// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module roundf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [22:0] mask_table1_q0;
wire   [4:0] one_half_table2_address0;
reg    one_half_table2_ce0;
wire   [23:0] one_half_table2_q0;
wire   [31:0] t_V_6_fu_70_p1;
reg   [31:0] t_V_6_reg_200;
wire   [0:0] tmp_i_i_fu_84_p2;
reg   [0:0] tmp_i_i_reg_206;
wire   [0:0] tmp_105_i_i_fu_90_p2;
reg   [0:0] tmp_105_i_i_reg_212;
reg   [22:0] mask_reg_227;
wire    ap_CS_fsm_state2;
reg   [23:0] one_half_reg_232;
wire   [31:0] sel_tmp_fu_175_p1;
reg   [31:0] sel_tmp_reg_237;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_106_i_i_fu_106_p1;
wire   [7:0] loc_V_fu_74_p4;
wire   [4:0] index_V_fu_96_p4;
wire   [0:0] p_Result_s_fu_112_p3;
wire   [31:0] one_half_cast_fu_127_p1;
wire   [31:0] p_Val2_s_fu_130_p2;
wire   [22:0] loc_V_2_fu_135_p1;
wire   [22:0] tmp_108_i_i_fu_139_p2;
wire   [8:0] tmp_fu_150_p4;
wire   [22:0] xs_sig_V_fu_144_p2;
wire   [31:0] p_Result_46_fu_119_p3;
wire   [31:0] p_Result_47_fu_160_p3;
wire   [31:0] sel_tmp_v_fu_168_p3;
wire    ap_CS_fsm_state4;
wire   [0:0] sel_tmp1_fu_179_p2;
wire   [0:0] sel_tmp2_fu_184_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

roundf_mask_table1 #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

roundf_one_half_tbkb #(
    .DataWidth( 24 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
one_half_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table2_address0),
    .ce0(one_half_table2_ce0),
    .q0(one_half_table2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask_reg_227 <= mask_table1_q0;
        one_half_reg_232 <= one_half_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sel_tmp_reg_237 <= sel_tmp_fu_175_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_6_reg_200 <= t_V_6_fu_70_p1;
        tmp_105_i_i_reg_212 <= tmp_105_i_i_fu_90_p2;
        tmp_i_i_reg_206 <= tmp_i_i_fu_84_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        one_half_table2_ce0 = 1'b1;
    end else begin
        one_half_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = ((sel_tmp2_fu_184_p2[0:0] === 1'b1) ? x : sel_tmp_reg_237);

assign index_V_fu_96_p4 = {{t_V_6_fu_70_p1[27:23]}};

assign loc_V_2_fu_135_p1 = p_Val2_s_fu_130_p2[22:0];

assign loc_V_fu_74_p4 = {{t_V_6_fu_70_p1[30:23]}};

assign mask_table1_address0 = tmp_106_i_i_fu_106_p1;

assign one_half_cast_fu_127_p1 = one_half_reg_232;

assign one_half_table2_address0 = tmp_106_i_i_fu_106_p1;

assign p_Result_46_fu_119_p3 = {{p_Result_s_fu_112_p3}, {31'd0}};

assign p_Result_47_fu_160_p3 = {{tmp_fu_150_p4}, {xs_sig_V_fu_144_p2}};

assign p_Result_s_fu_112_p3 = t_V_6_reg_200[32'd31];

assign p_Val2_s_fu_130_p2 = (t_V_6_reg_200 + one_half_cast_fu_127_p1);

assign sel_tmp1_fu_179_p2 = (tmp_i_i_reg_206 ^ 1'd1);

assign sel_tmp2_fu_184_p2 = (tmp_105_i_i_reg_212 & sel_tmp1_fu_179_p2);

assign sel_tmp_fu_175_p1 = sel_tmp_v_fu_168_p3;

assign sel_tmp_v_fu_168_p3 = ((tmp_i_i_reg_206[0:0] === 1'b1) ? p_Result_46_fu_119_p3 : p_Result_47_fu_160_p3);

assign t_V_6_fu_70_p1 = x;

assign tmp_105_i_i_fu_90_p2 = ((loc_V_fu_74_p4 > 8'd150) ? 1'b1 : 1'b0);

assign tmp_106_i_i_fu_106_p1 = index_V_fu_96_p4;

assign tmp_108_i_i_fu_139_p2 = (mask_reg_227 ^ 23'd8388607);

assign tmp_fu_150_p4 = {{p_Val2_s_fu_130_p2[31:23]}};

assign tmp_i_i_fu_84_p2 = ((loc_V_fu_74_p4 < 8'd126) ? 1'b1 : 1'b0);

assign xs_sig_V_fu_144_p2 = (loc_V_2_fu_135_p1 & tmp_108_i_i_fu_139_p2);

endmodule //roundf
