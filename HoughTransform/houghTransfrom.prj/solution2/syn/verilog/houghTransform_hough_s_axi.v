// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module houghTransform_hough_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 21,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [11:0]                   in_r_address0,
    input  wire                          in_r_ce0,
    output wire [15:0]                   in_r_q0,
    input  wire [11:0]                   out_r_address0,
    input  wire                          out_r_ce0,
    input  wire                          out_r_we0,
    input  wire [15:0]                   out_r_d0,
    input  wire [15:0]                   acc_address0,
    input  wire                          acc_ce0,
    input  wire                          acc_we0,
    input  wire [31:0]                   acc_d0,
    output wire [31:0]                   acc_q0,
    input  wire [15:0]                   dNonZero_address0,
    input  wire                          dNonZero_ce0,
    input  wire                          dNonZero_we0,
    input  wire [31:0]                   dNonZero_d0,
    output wire [31:0]                   dNonZero_q0,
    input  wire [15:0]                   fiNonZero_address0,
    input  wire                          fiNonZero_ce0,
    input  wire                          fiNonZero_we0,
    input  wire [31:0]                   fiNonZero_d0,
    output wire [31:0]                   fiNonZero_q0,
    output wire [31:0]                   threshold
);
//------------------------Address Info-------------------
// 0x000000 : Control signals
//            bit 0  - ap_start (Read/Write/COH)
//            bit 1  - ap_done (Read/COR)
//            bit 2  - ap_idle (Read)
//            bit 3  - ap_ready (Read)
//            bit 7  - auto_restart (Read/Write)
//            others - reserved
// 0x000004 : Global Interrupt Enable Register
//            bit 0  - Global Interrupt Enable (Read/Write)
//            others - reserved
// 0x000008 : IP Interrupt Enable Register (Read/Write)
//            bit 0  - Channel 0 (ap_done)
//            bit 1  - Channel 1 (ap_ready)
//            others - reserved
// 0x00000c : IP Interrupt Status Register (Read/TOW)
//            bit 0  - Channel 0 (ap_done)
//            bit 1  - Channel 1 (ap_ready)
//            others - reserved
// 0x100000 : Data signal of threshold
//            bit 31~0 - threshold[31:0] (Read/Write)
// 0x100004 : reserved
// 0x002000 ~
// 0x003fff : Memory 'in_r' (2500 * 16b)
//            Word n : bit [15: 0] - in_r[2n]
//                     bit [31:16] - in_r[2n+1]
// 0x004000 ~
// 0x005fff : Memory 'out_r' (2500 * 16b)
//            Word n : bit [15: 0] - out_r[2n]
//                     bit [31:16] - out_r[2n+1]
// 0x040000 ~
// 0x07ffff : Memory 'acc' (36000 * 32b)
//            Word n : bit [31:0] - acc[n]
// 0x080000 ~
// 0x0bffff : Memory 'dNonZero' (36000 * 32b)
//            Word n : bit [31:0] - dNonZero[n]
// 0x0c0000 ~
// 0x0fffff : Memory 'fiNonZero' (36000 * 32b)
//            Word n : bit [31:0] - fiNonZero[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL          = 21'h000000,
    ADDR_GIE              = 21'h000004,
    ADDR_IER              = 21'h000008,
    ADDR_ISR              = 21'h00000c,
    ADDR_THRESHOLD_DATA_0 = 21'h100000,
    ADDR_THRESHOLD_CTRL   = 21'h100004,
    ADDR_IN_R_BASE        = 21'h002000,
    ADDR_IN_R_HIGH        = 21'h003fff,
    ADDR_OUT_R_BASE       = 21'h004000,
    ADDR_OUT_R_HIGH       = 21'h005fff,
    ADDR_ACC_BASE         = 21'h040000,
    ADDR_ACC_HIGH         = 21'h07ffff,
    ADDR_DNONZERO_BASE    = 21'h080000,
    ADDR_DNONZERO_HIGH    = 21'h0bffff,
    ADDR_FINONZERO_BASE   = 21'h0c0000,
    ADDR_FINONZERO_HIGH   = 21'h0fffff,
    WRIDLE                = 2'd0,
    WRDATA                = 2'd1,
    WRRESP                = 2'd2,
    WRRESET               = 2'd3,
    RDIDLE                = 2'd0,
    RDDATA                = 2'd1,
    RDRESET               = 2'd2,
    ADDR_BITS         = 21;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_threshold = 'b0;
    // memory signals
    wire [10:0]                   int_in_r_address0;
    wire                          int_in_r_ce0;
    wire                          int_in_r_we0;
    wire [3:0]                    int_in_r_be0;
    wire [31:0]                   int_in_r_d0;
    wire [31:0]                   int_in_r_q0;
    wire [10:0]                   int_in_r_address1;
    wire                          int_in_r_ce1;
    wire                          int_in_r_we1;
    wire [3:0]                    int_in_r_be1;
    wire [31:0]                   int_in_r_d1;
    wire [31:0]                   int_in_r_q1;
    reg                           int_in_r_read;
    reg                           int_in_r_write;
    reg  [0:0]                    int_in_r_shift;
    wire [10:0]                   int_out_r_address0;
    wire                          int_out_r_ce0;
    wire                          int_out_r_we0;
    wire [3:0]                    int_out_r_be0;
    wire [31:0]                   int_out_r_d0;
    wire [31:0]                   int_out_r_q0;
    wire [10:0]                   int_out_r_address1;
    wire                          int_out_r_ce1;
    wire                          int_out_r_we1;
    wire [3:0]                    int_out_r_be1;
    wire [31:0]                   int_out_r_d1;
    wire [31:0]                   int_out_r_q1;
    reg                           int_out_r_read;
    reg                           int_out_r_write;
    reg  [0:0]                    int_out_r_shift;
    wire [15:0]                   int_acc_address0;
    wire                          int_acc_ce0;
    wire                          int_acc_we0;
    wire [3:0]                    int_acc_be0;
    wire [31:0]                   int_acc_d0;
    wire [31:0]                   int_acc_q0;
    wire [15:0]                   int_acc_address1;
    wire                          int_acc_ce1;
    wire                          int_acc_we1;
    wire [3:0]                    int_acc_be1;
    wire [31:0]                   int_acc_d1;
    wire [31:0]                   int_acc_q1;
    reg                           int_acc_read;
    reg                           int_acc_write;
    wire [15:0]                   int_dNonZero_address0;
    wire                          int_dNonZero_ce0;
    wire                          int_dNonZero_we0;
    wire [3:0]                    int_dNonZero_be0;
    wire [31:0]                   int_dNonZero_d0;
    wire [31:0]                   int_dNonZero_q0;
    wire [15:0]                   int_dNonZero_address1;
    wire                          int_dNonZero_ce1;
    wire                          int_dNonZero_we1;
    wire [3:0]                    int_dNonZero_be1;
    wire [31:0]                   int_dNonZero_d1;
    wire [31:0]                   int_dNonZero_q1;
    reg                           int_dNonZero_read;
    reg                           int_dNonZero_write;
    wire [15:0]                   int_fiNonZero_address0;
    wire                          int_fiNonZero_ce0;
    wire                          int_fiNonZero_we0;
    wire [3:0]                    int_fiNonZero_be0;
    wire [31:0]                   int_fiNonZero_d0;
    wire [31:0]                   int_fiNonZero_q0;
    wire [15:0]                   int_fiNonZero_address1;
    wire                          int_fiNonZero_ce1;
    wire                          int_fiNonZero_we1;
    wire [3:0]                    int_fiNonZero_be1;
    wire [31:0]                   int_fiNonZero_d1;
    wire [31:0]                   int_fiNonZero_q1;
    reg                           int_fiNonZero_read;
    reg                           int_fiNonZero_write;

//------------------------Instantiation------------------
// int_in_r
houghTransform_hough_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 1250 )
) int_in_r (
    .clk0     ( ACLK ),
    .address0 ( int_in_r_address0 ),
    .ce0      ( int_in_r_ce0 ),
    .we0      ( int_in_r_we0 ),
    .be0      ( int_in_r_be0 ),
    .d0       ( int_in_r_d0 ),
    .q0       ( int_in_r_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_r_address1 ),
    .ce1      ( int_in_r_ce1 ),
    .we1      ( int_in_r_we1 ),
    .be1      ( int_in_r_be1 ),
    .d1       ( int_in_r_d1 ),
    .q1       ( int_in_r_q1 )
);
// int_out_r
houghTransform_hough_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 1250 )
) int_out_r (
    .clk0     ( ACLK ),
    .address0 ( int_out_r_address0 ),
    .ce0      ( int_out_r_ce0 ),
    .we0      ( int_out_r_we0 ),
    .be0      ( int_out_r_be0 ),
    .d0       ( int_out_r_d0 ),
    .q0       ( int_out_r_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_r_address1 ),
    .ce1      ( int_out_r_ce1 ),
    .we1      ( int_out_r_we1 ),
    .be1      ( int_out_r_be1 ),
    .d1       ( int_out_r_d1 ),
    .q1       ( int_out_r_q1 )
);
// int_acc
houghTransform_hough_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 36000 )
) int_acc (
    .clk0     ( ACLK ),
    .address0 ( int_acc_address0 ),
    .ce0      ( int_acc_ce0 ),
    .we0      ( int_acc_we0 ),
    .be0      ( int_acc_be0 ),
    .d0       ( int_acc_d0 ),
    .q0       ( int_acc_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_acc_address1 ),
    .ce1      ( int_acc_ce1 ),
    .we1      ( int_acc_we1 ),
    .be1      ( int_acc_be1 ),
    .d1       ( int_acc_d1 ),
    .q1       ( int_acc_q1 )
);
// int_dNonZero
houghTransform_hough_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 36000 )
) int_dNonZero (
    .clk0     ( ACLK ),
    .address0 ( int_dNonZero_address0 ),
    .ce0      ( int_dNonZero_ce0 ),
    .we0      ( int_dNonZero_we0 ),
    .be0      ( int_dNonZero_be0 ),
    .d0       ( int_dNonZero_d0 ),
    .q0       ( int_dNonZero_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_dNonZero_address1 ),
    .ce1      ( int_dNonZero_ce1 ),
    .we1      ( int_dNonZero_we1 ),
    .be1      ( int_dNonZero_be1 ),
    .d1       ( int_dNonZero_d1 ),
    .q1       ( int_dNonZero_q1 )
);
// int_fiNonZero
houghTransform_hough_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 36000 )
) int_fiNonZero (
    .clk0     ( ACLK ),
    .address0 ( int_fiNonZero_address0 ),
    .ce0      ( int_fiNonZero_ce0 ),
    .we0      ( int_fiNonZero_we0 ),
    .be0      ( int_fiNonZero_be0 ),
    .d0       ( int_fiNonZero_d0 ),
    .q0       ( int_fiNonZero_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_fiNonZero_address1 ),
    .ce1      ( int_fiNonZero_ce1 ),
    .we1      ( int_fiNonZero_we1 ),
    .be1      ( int_fiNonZero_be1 ),
    .d1       ( int_fiNonZero_d1 ),
    .q1       ( int_fiNonZero_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_in_r_read & !int_out_r_read & !int_acc_read & !int_dNonZero_read & !int_fiNonZero_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_THRESHOLD_DATA_0: begin
                    rdata <= int_threshold[31:0];
                end
            endcase
        end
        else if (int_in_r_read) begin
            rdata <= int_in_r_q1;
        end
        else if (int_out_r_read) begin
            rdata <= int_out_r_q1;
        end
        else if (int_acc_read) begin
            rdata <= int_acc_q1;
        end
        else if (int_dNonZero_read) begin
            rdata <= int_dNonZero_q1;
        end
        else if (int_fiNonZero_read) begin
            rdata <= int_fiNonZero_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign threshold    = int_threshold;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_threshold[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_threshold[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_THRESHOLD_DATA_0)
            int_threshold[31:0] <= (WDATA[31:0] & wmask) | (int_threshold[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// in_r
assign int_in_r_address0      = in_r_address0 >> 1;
assign int_in_r_ce0           = in_r_ce0;
assign int_in_r_we0           = 1'b0;
assign int_in_r_be0           = 1'b0;
assign int_in_r_d0            = 1'b0;
assign in_r_q0                = int_in_r_q0 >> (int_in_r_shift * 16);
assign int_in_r_address1      = ar_hs? raddr[12:2] : waddr[12:2];
assign int_in_r_ce1           = ar_hs | (int_in_r_write & WVALID);
assign int_in_r_we1           = int_in_r_write & WVALID;
assign int_in_r_be1           = WSTRB;
assign int_in_r_d1            = WDATA;
// out_r
assign int_out_r_address0     = out_r_address0 >> 1;
assign int_out_r_ce0          = out_r_ce0;
assign int_out_r_we0          = out_r_we0;
assign int_out_r_be0          = 3 << (out_r_address0[0] * 2);
assign int_out_r_d0           = {2{out_r_d0}};
assign int_out_r_address1     = ar_hs? raddr[12:2] : waddr[12:2];
assign int_out_r_ce1          = ar_hs | (int_out_r_write & WVALID);
assign int_out_r_we1          = int_out_r_write & WVALID;
assign int_out_r_be1          = WSTRB;
assign int_out_r_d1           = WDATA;
// acc
assign int_acc_address0       = acc_address0;
assign int_acc_ce0            = acc_ce0;
assign int_acc_we0            = acc_we0;
assign int_acc_be0            = {4{acc_we0}};
assign int_acc_d0             = acc_d0;
assign acc_q0                 = int_acc_q0;
assign int_acc_address1       = ar_hs? raddr[17:2] : waddr[17:2];
assign int_acc_ce1            = ar_hs | (int_acc_write & WVALID);
assign int_acc_we1            = int_acc_write & WVALID;
assign int_acc_be1            = WSTRB;
assign int_acc_d1             = WDATA;
// dNonZero
assign int_dNonZero_address0  = dNonZero_address0;
assign int_dNonZero_ce0       = dNonZero_ce0;
assign int_dNonZero_we0       = dNonZero_we0;
assign int_dNonZero_be0       = {4{dNonZero_we0}};
assign int_dNonZero_d0        = dNonZero_d0;
assign dNonZero_q0            = int_dNonZero_q0;
assign int_dNonZero_address1  = ar_hs? raddr[17:2] : waddr[17:2];
assign int_dNonZero_ce1       = ar_hs | (int_dNonZero_write & WVALID);
assign int_dNonZero_we1       = int_dNonZero_write & WVALID;
assign int_dNonZero_be1       = WSTRB;
assign int_dNonZero_d1        = WDATA;
// fiNonZero
assign int_fiNonZero_address0 = fiNonZero_address0;
assign int_fiNonZero_ce0      = fiNonZero_ce0;
assign int_fiNonZero_we0      = fiNonZero_we0;
assign int_fiNonZero_be0      = {4{fiNonZero_we0}};
assign int_fiNonZero_d0       = fiNonZero_d0;
assign fiNonZero_q0           = int_fiNonZero_q0;
assign int_fiNonZero_address1 = ar_hs? raddr[17:2] : waddr[17:2];
assign int_fiNonZero_ce1      = ar_hs | (int_fiNonZero_write & WVALID);
assign int_fiNonZero_we1      = int_fiNonZero_write & WVALID;
assign int_fiNonZero_be1      = WSTRB;
assign int_fiNonZero_d1       = WDATA;
// int_in_r_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_r_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_R_BASE && raddr <= ADDR_IN_R_HIGH)
            int_in_r_read <= 1'b1;
        else
            int_in_r_read <= 1'b0;
    end
end

// int_in_r_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_r_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_R_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_R_HIGH)
            int_in_r_write <= 1'b1;
        else if (WVALID)
            int_in_r_write <= 1'b0;
    end
end

// int_in_r_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_r_ce0)
            int_in_r_shift <= in_r_address0[0];
    end
end

// int_out_r_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_r_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_R_BASE && raddr <= ADDR_OUT_R_HIGH)
            int_out_r_read <= 1'b1;
        else
            int_out_r_read <= 1'b0;
    end
end

// int_out_r_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_r_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_R_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_R_HIGH)
            int_out_r_write <= 1'b1;
        else if (WVALID)
            int_out_r_write <= 1'b0;
    end
end

// int_out_r_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_r_ce0)
            int_out_r_shift <= out_r_address0[0];
    end
end

// int_acc_read
always @(posedge ACLK) begin
    if (ARESET)
        int_acc_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_ACC_BASE && raddr <= ADDR_ACC_HIGH)
            int_acc_read <= 1'b1;
        else
            int_acc_read <= 1'b0;
    end
end

// int_acc_write
always @(posedge ACLK) begin
    if (ARESET)
        int_acc_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_ACC_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_ACC_HIGH)
            int_acc_write <= 1'b1;
        else if (WVALID)
            int_acc_write <= 1'b0;
    end
end

// int_dNonZero_read
always @(posedge ACLK) begin
    if (ARESET)
        int_dNonZero_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_DNONZERO_BASE && raddr <= ADDR_DNONZERO_HIGH)
            int_dNonZero_read <= 1'b1;
        else
            int_dNonZero_read <= 1'b0;
    end
end

// int_dNonZero_write
always @(posedge ACLK) begin
    if (ARESET)
        int_dNonZero_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_DNONZERO_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_DNONZERO_HIGH)
            int_dNonZero_write <= 1'b1;
        else if (WVALID)
            int_dNonZero_write <= 1'b0;
    end
end

// int_fiNonZero_read
always @(posedge ACLK) begin
    if (ARESET)
        int_fiNonZero_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_FINONZERO_BASE && raddr <= ADDR_FINONZERO_HIGH)
            int_fiNonZero_read <= 1'b1;
        else
            int_fiNonZero_read <= 1'b0;
    end
end

// int_fiNonZero_write
always @(posedge ACLK) begin
    if (ARESET)
        int_fiNonZero_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_FINONZERO_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_FINONZERO_HIGH)
            int_fiNonZero_write <= 1'b1;
        else if (WVALID)
            int_fiNonZero_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module houghTransform_hough_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

