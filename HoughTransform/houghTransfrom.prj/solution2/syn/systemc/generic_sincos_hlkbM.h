// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __generic_sincos_hlkbM_H__
#define __generic_sincos_hlkbM_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct generic_sincos_hlkbM_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 43;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(generic_sincos_hlkbM_ram) {
        ram[0] = "0b1010110101010001000011000110011101101011001";
        ram[1] = "0b1010110101010001010010011001101110010100011";
        ram[2] = "0b1010110101010010000000010011011110100110000";
        ram[3] = "0b1010110101010011001100110011101001100010111";
        ram[4] = "0b1010110101010100110111111010000110110001101";
        ram[5] = "0b1010110101010111000001100110101010011100011";
        ram[6] = "0b1010110101011001101001111001000101010010100";
        ram[7] = "0b1010110101011100110000110001000100110100010";
        ram[8] = "0b1010110101100000010110001110010011001011111";
        ram[9] = "0b1010110101100100011010010000010111000110101";
        ram[10] = "0b1010110101101000111100110110110011111100111";
        ram[11] = "0b1010110101101101111110000001001001100110001";
        ram[12] = "0b1010110101110011011101101110110100110111010";
        ram[13] = "0b1010110101111001011011111111001110110000010";
        ram[14] = "0b1010110101111111111000110001101101010111011";
        ram[15] = "0b1010110110000110110100000101100011001001101";
        ram[16] = "0b1010110110001110001101111001111111011010011";
        ram[17] = "0b1010110110010110000110001110001101101111000";
        ram[18] = "0b1010110110011110011101000001010110110001101";
        ram[19] = "0b1010110110100111010010010010011111011010100";
        ram[20] = "0b1010110110110000100110000000101001101001100";
        ram[21] = "0b1010110110111010011000001010110011110000000";
        ram[22] = "0b1010110111000100101000101111111000110010101";
        ram[23] = "0b1010110111001111010111101110110000010100001";
        ram[24] = "0b1010110111011010100101000110001110111001111";
        ram[25] = "0b1010110111100110010000110101000101010111110";
        ram[26] = "0b1010110111110010011010111010000001011011100";
        ram[27] = "0b1010110111111111000011010011101101011011000";
        ram[28] = "0b1010111000001100001010000000110000001101000";
        ram[29] = "0b1010111000011001101110111111101101101000100";
        ram[30] = "0b1010111000100111110010001111000101111001110";
        ram[31] = "0b1010111000110110010011101101010101111011000";
        ram[32] = "0b1010111001000101010011011000110111100010000";
        ram[33] = "0b1010111001010100110001010000000000110101110";
        ram[34] = "0b1010111001100100101101010001000101000101000";
        ram[35] = "0b1010111001110101000111011010010011101110000";
        ram[36] = "0b1010111010000101111111101001111001010111000";
        ram[37] = "0b1010111010010111010101111101111110111010010";
        ram[38] = "0b1010111010101001001010010100101010001101010";
        ram[39] = "0b1010111010111011011100101011111101101010101";
        ram[40] = "0b1010111011001110001101000001111000100000111";
        ram[41] = "0b1010111011100001011011010100010110100100100";
        ram[42] = "0b1010111011110101000111100001010000011000100";
        ram[43] = "0b1010111100001001010001100110011011010010110";
        ram[44] = "0b1010111100011101111001100001101001001011111";
        ram[45] = "0b1010111100110010111111010000101000111110001";
        ram[46] = "0b1010111101001000100010110001000101111010111";
        ram[47] = "0b1010111101011110100100000000101000010001001";
        ram[48] = "0b1010111101110101000010111100110100111000010";
        ram[49] = "0b1010111110001011111111100011001101011111010";
        ram[50] = "0b1010111110100011011001110001010000010011011";
        ram[51] = "0b1010111110111011010001100100011000101000101";
        ram[52] = "0b1010111111010011100110111001111110011010000";
        ram[53] = "0b1010111111101100011001101111010110000011010";
        ram[54] = "0b1011000000000101101010000001110001000111010";
        ram[55] = "0b1011000000011111010111101110011101101010100";
        ram[56] = "0b1011000000111001100010110010100110101110100";
        ram[57] = "0b1011000001010100001011001011010011111011000";
        ram[58] = "0b1011000001101111010000110101101001111100011";
        ram[59] = "0b1011000010001010110011101110101001111101001";
        ram[60] = "0b1011000010100110110011110011010001111010010";
        ram[61] = "0b1011000011000011010001000000011100110100110";
        ram[62] = "0b1011000011100000001011010011000010100010101";
        ram[63] = "0b1011000011111101100010100111110111010000000";
        ram[64] = "0b1011000100011011010110111011101100011011111";
        ram[65] = "0b1011000100111001101000001011010000001001001";
        ram[66] = "0b1011000101011000010110010011001101100001111";
        ram[67] = "0b1011000101110111100001010000001100001101011";
        ram[68] = "0b1011000110010111001000111110110000110101011";
        ram[69] = "0b1011000110110111001101011011011100111110111";
        ram[70] = "0b1011000111010111101110100010101110111100011";
        ram[71] = "0b1011000111111000101100010001000001111111110";
        ram[72] = "0b1011001000011010000110100010101110001010101";
        ram[73] = "0b1011001000111011111101010100001000011000000";
        ram[74] = "0b1011001001011110010000100001100010011100111";
        ram[75] = "0b1011001010000001000000000111001011001100011";
        ram[76] = "0b1011001010100100001100000001001110001101101";
        ram[77] = "0b1011001011000111110100001011110011111001001";
        ram[78] = "0b1011001011101011111000100011000001111001010";
        ram[79] = "0b1011001100010000011001000010111010010100011";
        ram[80] = "0b1011001100110101010101100111011100100011111";
        ram[81] = "0b1011001101011010101110001100100100110110000";
        ram[82] = "0b1011001110000000100010101110001100010000010";
        ram[83] = "0b1011001110100110110011001000001000111010011";
        ram[84] = "0b1011001111001101011111010110001101110111011";
        ram[85] = "0b1011001111110100100111010100001011000011111";
        ram[86] = "0b1011010000011100001010111101101101100110010";
        ram[87] = "0b1011010001000100001010001110011111010111101";
        ram[88] = "0b1011010001101100100101000010000111001110001";
        ram[89] = "0b1011010010010101011011010100001001010111011";
        ram[90] = "0b1011010010111110101101000000000110011011010";
        ram[91] = "0b1011010011101000011010000001011100101010111";
        ram[92] = "0b1011010100010010100010010011100110110110001";
        ram[93] = "0b1011010100111101000101110001111100111011010";
        ram[94] = "0b1011010101101000000100010111110100001101001";
        ram[95] = "0b1011010110010011011110000000011110100111111";
        ram[96] = "0b1011010110111111010010100111001011010111100";
        ram[97] = "0b1011010111101011100010000111000110101000010";
        ram[98] = "0b1011011000011000001100011011011001101010001";
        ram[99] = "0b1011011001000101010001011111001010110111000";
        ram[100] = "0b1011011001110010110001001101011101110010001";
        ram[101] = "0b1011011010100000101011100001010010110000101";
        ram[102] = "0b1011011011001111000000010101100111101010100";
        ram[103] = "0b1011011011111101101111100101010111001111110";
        ram[104] = "0b1011011100101100111001001011011001011001110";
        ram[105] = "0b1011011101011100011101000010100011001100101";
        ram[106] = "0b1011011110001100011011000101100110110111010";
        ram[107] = "0b1011011110111100110011001111010011101111011";
        ram[108] = "0b1011011111101101100101011010010110010011001";
        ram[109] = "0b1011100000011110110001100001011000010110111";
        ram[110] = "0b1011100001010000010111011111000000101010111";
        ram[111] = "0b1011100010000010010111001101110011100010001";
        ram[112] = "0b1011100010110100110000101000010010000011111";
        ram[113] = "0b1011100011100111100011101000111010111100010";
        ram[114] = "0b1011100100011010110000001010001001110001100";
        ram[115] = "0b1011100101001110010110000110010111101011010";
        ram[116] = "0b1011100110000010010101010111111010110001110";
        ram[117] = "0b1011100110110110101101111001000110101001111";
        ram[118] = "0b1011100111101011011111100100001100000110011";
        ram[119] = "0b1011101000100000101010010011011001000001111";
        ram[120] = "0b1011101001010110001110000000111000111111001";
        ram[121] = "0b1011101010001100001010100110110100011001101";
        ram[122] = "0b1011101011000010011111111111010001010101110";
        ram[123] = "0b1011101011111001001110000100010011001000000";
        ram[124] = "0b1011101100110000010100101111111010010100101";
        ram[125] = "0b1011101101100111110011111100000100111101001";
        ram[126] = "0b1011101110011111101011100010101110010111110";
        ram[127] = "0b1011101111010111111011011101101111000101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(generic_sincos_hlkbM) {


static const unsigned DataWidth = 43;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


generic_sincos_hlkbM_ram* meminst;


SC_CTOR(generic_sincos_hlkbM) {
meminst = new generic_sincos_hlkbM_ram("generic_sincos_hlkbM_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~generic_sincos_hlkbM() {
    delete meminst;
}


};//endmodule
#endif
