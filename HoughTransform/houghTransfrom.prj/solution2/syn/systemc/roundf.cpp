// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "roundf.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic roundf::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic roundf::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> roundf::ap_ST_fsm_state1 = "1";
const sc_lv<4> roundf::ap_ST_fsm_state2 = "10";
const sc_lv<4> roundf::ap_ST_fsm_state3 = "100";
const sc_lv<4> roundf::ap_ST_fsm_state4 = "1000";
const sc_lv<32> roundf::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> roundf::ap_const_lv32_1 = "1";
const sc_lv<32> roundf::ap_const_lv32_2 = "10";
const sc_lv<32> roundf::ap_const_lv32_17 = "10111";
const sc_lv<32> roundf::ap_const_lv32_1E = "11110";
const sc_lv<8> roundf::ap_const_lv8_7E = "1111110";
const sc_lv<8> roundf::ap_const_lv8_96 = "10010110";
const sc_lv<32> roundf::ap_const_lv32_1B = "11011";
const sc_lv<32> roundf::ap_const_lv32_1F = "11111";
const sc_lv<31> roundf::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<23> roundf::ap_const_lv23_7FFFFF = "11111111111111111111111";
const sc_lv<1> roundf::ap_const_lv1_1 = "1";
const sc_lv<32> roundf::ap_const_lv32_3 = "11";
const bool roundf::ap_const_boolean_1 = true;

roundf::roundf(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mask_table1_U = new roundf_mask_table1("mask_table1_U");
    mask_table1_U->clk(ap_clk);
    mask_table1_U->reset(ap_rst);
    mask_table1_U->address0(mask_table1_address0);
    mask_table1_U->ce0(mask_table1_ce0);
    mask_table1_U->q0(mask_table1_q0);
    one_half_table2_U = new roundf_one_half_tbkb("one_half_table2_U");
    one_half_table2_U->clk(ap_clk);
    one_half_table2_U->reset(ap_rst);
    one_half_table2_U->address0(one_half_table2_address0);
    one_half_table2_U->ce0(one_half_table2_ce0);
    one_half_table2_U->q0(one_half_table2_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( x );
    sensitive << ( sel_tmp_reg_237 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sel_tmp2_fu_184_p2 );

    SC_METHOD(thread_index_V_fu_96_p4);
    sensitive << ( t_V_6_fu_70_p1 );

    SC_METHOD(thread_loc_V_2_fu_135_p1);
    sensitive << ( p_Val2_s_fu_130_p2 );

    SC_METHOD(thread_loc_V_fu_74_p4);
    sensitive << ( t_V_6_fu_70_p1 );

    SC_METHOD(thread_mask_table1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_106_i_i_fu_106_p1 );

    SC_METHOD(thread_mask_table1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_one_half_cast_fu_127_p1);
    sensitive << ( one_half_reg_232 );

    SC_METHOD(thread_one_half_table2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_106_i_i_fu_106_p1 );

    SC_METHOD(thread_one_half_table2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_p_Result_46_fu_119_p3);
    sensitive << ( p_Result_s_fu_112_p3 );

    SC_METHOD(thread_p_Result_47_fu_160_p3);
    sensitive << ( tmp_fu_150_p4 );
    sensitive << ( xs_sig_V_fu_144_p2 );

    SC_METHOD(thread_p_Result_s_fu_112_p3);
    sensitive << ( t_V_6_reg_200 );

    SC_METHOD(thread_p_Val2_s_fu_130_p2);
    sensitive << ( t_V_6_reg_200 );
    sensitive << ( one_half_cast_fu_127_p1 );

    SC_METHOD(thread_sel_tmp1_fu_179_p2);
    sensitive << ( tmp_i_i_reg_206 );

    SC_METHOD(thread_sel_tmp2_fu_184_p2);
    sensitive << ( tmp_105_i_i_reg_212 );
    sensitive << ( sel_tmp1_fu_179_p2 );

    SC_METHOD(thread_sel_tmp_fu_175_p1);
    sensitive << ( sel_tmp_v_fu_168_p3 );

    SC_METHOD(thread_sel_tmp_v_fu_168_p3);
    sensitive << ( tmp_i_i_reg_206 );
    sensitive << ( p_Result_46_fu_119_p3 );
    sensitive << ( p_Result_47_fu_160_p3 );

    SC_METHOD(thread_t_V_6_fu_70_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_105_i_i_fu_90_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( loc_V_fu_74_p4 );

    SC_METHOD(thread_tmp_106_i_i_fu_106_p1);
    sensitive << ( index_V_fu_96_p4 );

    SC_METHOD(thread_tmp_108_i_i_fu_139_p2);
    sensitive << ( mask_reg_227 );

    SC_METHOD(thread_tmp_fu_150_p4);
    sensitive << ( p_Val2_s_fu_130_p2 );

    SC_METHOD(thread_tmp_i_i_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( loc_V_fu_74_p4 );

    SC_METHOD(thread_xs_sig_V_fu_144_p2);
    sensitive << ( loc_V_2_fu_135_p1 );
    sensitive << ( tmp_108_i_i_fu_139_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "roundf_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mask_table1_address0, "mask_table1_address0");
    sc_trace(mVcdFile, mask_table1_ce0, "mask_table1_ce0");
    sc_trace(mVcdFile, mask_table1_q0, "mask_table1_q0");
    sc_trace(mVcdFile, one_half_table2_address0, "one_half_table2_address0");
    sc_trace(mVcdFile, one_half_table2_ce0, "one_half_table2_ce0");
    sc_trace(mVcdFile, one_half_table2_q0, "one_half_table2_q0");
    sc_trace(mVcdFile, t_V_6_fu_70_p1, "t_V_6_fu_70_p1");
    sc_trace(mVcdFile, t_V_6_reg_200, "t_V_6_reg_200");
    sc_trace(mVcdFile, tmp_i_i_fu_84_p2, "tmp_i_i_fu_84_p2");
    sc_trace(mVcdFile, tmp_i_i_reg_206, "tmp_i_i_reg_206");
    sc_trace(mVcdFile, tmp_105_i_i_fu_90_p2, "tmp_105_i_i_fu_90_p2");
    sc_trace(mVcdFile, tmp_105_i_i_reg_212, "tmp_105_i_i_reg_212");
    sc_trace(mVcdFile, mask_reg_227, "mask_reg_227");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, one_half_reg_232, "one_half_reg_232");
    sc_trace(mVcdFile, sel_tmp_fu_175_p1, "sel_tmp_fu_175_p1");
    sc_trace(mVcdFile, sel_tmp_reg_237, "sel_tmp_reg_237");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_106_i_i_fu_106_p1, "tmp_106_i_i_fu_106_p1");
    sc_trace(mVcdFile, loc_V_fu_74_p4, "loc_V_fu_74_p4");
    sc_trace(mVcdFile, index_V_fu_96_p4, "index_V_fu_96_p4");
    sc_trace(mVcdFile, p_Result_s_fu_112_p3, "p_Result_s_fu_112_p3");
    sc_trace(mVcdFile, one_half_cast_fu_127_p1, "one_half_cast_fu_127_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_130_p2, "p_Val2_s_fu_130_p2");
    sc_trace(mVcdFile, loc_V_2_fu_135_p1, "loc_V_2_fu_135_p1");
    sc_trace(mVcdFile, tmp_108_i_i_fu_139_p2, "tmp_108_i_i_fu_139_p2");
    sc_trace(mVcdFile, tmp_fu_150_p4, "tmp_fu_150_p4");
    sc_trace(mVcdFile, xs_sig_V_fu_144_p2, "xs_sig_V_fu_144_p2");
    sc_trace(mVcdFile, p_Result_46_fu_119_p3, "p_Result_46_fu_119_p3");
    sc_trace(mVcdFile, p_Result_47_fu_160_p3, "p_Result_47_fu_160_p3");
    sc_trace(mVcdFile, sel_tmp_v_fu_168_p3, "sel_tmp_v_fu_168_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sel_tmp1_fu_179_p2, "sel_tmp1_fu_179_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_184_p2, "sel_tmp2_fu_184_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

roundf::~roundf() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mask_table1_U;
    delete one_half_table2_U;
}

void roundf::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mask_reg_227 = mask_table1_q0.read();
        one_half_reg_232 = one_half_table2_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sel_tmp_reg_237 = sel_tmp_fu_175_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        t_V_6_reg_200 = t_V_6_fu_70_p1.read();
        tmp_105_i_i_reg_212 = tmp_105_i_i_fu_90_p2.read();
        tmp_i_i_reg_206 = tmp_i_i_fu_84_p2.read();
    }
}

void roundf::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void roundf::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void roundf::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void roundf::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void roundf::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void roundf::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void roundf::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void roundf::thread_ap_return() {
    ap_return = (!sel_tmp2_fu_184_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_184_p2.read()[0].to_bool())? x.read(): sel_tmp_reg_237.read());
}

void roundf::thread_index_V_fu_96_p4() {
    index_V_fu_96_p4 = t_V_6_fu_70_p1.read().range(27, 23);
}

void roundf::thread_loc_V_2_fu_135_p1() {
    loc_V_2_fu_135_p1 = p_Val2_s_fu_130_p2.read().range(23-1, 0);
}

void roundf::thread_loc_V_fu_74_p4() {
    loc_V_fu_74_p4 = t_V_6_fu_70_p1.read().range(30, 23);
}

void roundf::thread_mask_table1_address0() {
    mask_table1_address0 =  (sc_lv<5>) (tmp_106_i_i_fu_106_p1.read());
}

void roundf::thread_mask_table1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mask_table1_ce0 = ap_const_logic_1;
    } else {
        mask_table1_ce0 = ap_const_logic_0;
    }
}

void roundf::thread_one_half_cast_fu_127_p1() {
    one_half_cast_fu_127_p1 = esl_zext<32,24>(one_half_reg_232.read());
}

void roundf::thread_one_half_table2_address0() {
    one_half_table2_address0 =  (sc_lv<5>) (tmp_106_i_i_fu_106_p1.read());
}

void roundf::thread_one_half_table2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        one_half_table2_ce0 = ap_const_logic_1;
    } else {
        one_half_table2_ce0 = ap_const_logic_0;
    }
}

void roundf::thread_p_Result_46_fu_119_p3() {
    p_Result_46_fu_119_p3 = esl_concat<1,31>(p_Result_s_fu_112_p3.read(), ap_const_lv31_0);
}

void roundf::thread_p_Result_47_fu_160_p3() {
    p_Result_47_fu_160_p3 = esl_concat<9,23>(tmp_fu_150_p4.read(), xs_sig_V_fu_144_p2.read());
}

void roundf::thread_p_Result_s_fu_112_p3() {
    p_Result_s_fu_112_p3 = t_V_6_reg_200.read().range(31, 31);
}

void roundf::thread_p_Val2_s_fu_130_p2() {
    p_Val2_s_fu_130_p2 = (!t_V_6_reg_200.read().is_01() || !one_half_cast_fu_127_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_6_reg_200.read()) + sc_biguint<32>(one_half_cast_fu_127_p1.read()));
}

void roundf::thread_sel_tmp1_fu_179_p2() {
    sel_tmp1_fu_179_p2 = (tmp_i_i_reg_206.read() ^ ap_const_lv1_1);
}

void roundf::thread_sel_tmp2_fu_184_p2() {
    sel_tmp2_fu_184_p2 = (tmp_105_i_i_reg_212.read() & sel_tmp1_fu_179_p2.read());
}

void roundf::thread_sel_tmp_fu_175_p1() {
    sel_tmp_fu_175_p1 = sel_tmp_v_fu_168_p3.read();
}

void roundf::thread_sel_tmp_v_fu_168_p3() {
    sel_tmp_v_fu_168_p3 = (!tmp_i_i_reg_206.read()[0].is_01())? sc_lv<32>(): ((tmp_i_i_reg_206.read()[0].to_bool())? p_Result_46_fu_119_p3.read(): p_Result_47_fu_160_p3.read());
}

void roundf::thread_t_V_6_fu_70_p1() {
    t_V_6_fu_70_p1 = x.read();
}

void roundf::thread_tmp_105_i_i_fu_90_p2() {
    tmp_105_i_i_fu_90_p2 = (!loc_V_fu_74_p4.read().is_01() || !ap_const_lv8_96.is_01())? sc_lv<1>(): (sc_biguint<8>(loc_V_fu_74_p4.read()) > sc_biguint<8>(ap_const_lv8_96));
}

void roundf::thread_tmp_106_i_i_fu_106_p1() {
    tmp_106_i_i_fu_106_p1 = esl_zext<32,5>(index_V_fu_96_p4.read());
}

void roundf::thread_tmp_108_i_i_fu_139_p2() {
    tmp_108_i_i_fu_139_p2 = (mask_reg_227.read() ^ ap_const_lv23_7FFFFF);
}

void roundf::thread_tmp_fu_150_p4() {
    tmp_fu_150_p4 = p_Val2_s_fu_130_p2.read().range(31, 23);
}

void roundf::thread_tmp_i_i_fu_84_p2() {
    tmp_i_i_fu_84_p2 = (!loc_V_fu_74_p4.read().is_01() || !ap_const_lv8_7E.is_01())? sc_lv<1>(): (sc_biguint<8>(loc_V_fu_74_p4.read()) < sc_biguint<8>(ap_const_lv8_7E));
}

void roundf::thread_xs_sig_V_fu_144_p2() {
    xs_sig_V_fu_144_p2 = (loc_V_2_fu_135_p1.read() & tmp_108_i_i_fu_139_p2.read());
}

void roundf::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

