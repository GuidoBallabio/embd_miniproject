-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity generic_sincos_hlmb6_rom is 
    generic(
             dwidth     : integer := 23; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of generic_sincos_hlmb6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10100011001101011110001", 1 => "10100011001101001100000", 
    2 => "10100011001100100101101", 3 => "10100011001011101101001", 
    4 => "10100011001010100110101", 5 => "10100011001001010000001", 
    6 => "10100011000111100010110", 7 => "10100011000101100011001", 
    8 => "10100011000011010010101", 9 => "10100011000000110001011", 
    10 => "10100010111110000000010", 11 => "10100010111010111000111", 
    12 => "10100010110111100100100", 13 => "10100010110011111000101", 
    14 => "10100010101111111100110", 15 => "10100010101011101101111", 
    16 => "10100010100111010010001", 17 => "10100010100010011111101", 
    18 => "10100010011101011110101", 19 => "10100010011000000100110", 
    20 => "10100010010010011110101", 21 => "10100010001100100110111", 
    22 => "10100010000110011111001", 23 => "10100001111111111111000", 
    24 => "10100001111001010100011", 25 => "10100001110010010011111", 
    26 => "10100001101011000001111", 27 => "10100001100011011111001", 
    28 => "10100001011011100101101", 29 => "10100001010011011111010", 
    30 => "10100001001011001000100", 31 => "10100001000010011010110", 
    32 => "10100000111001100001101", 33 => "10100000110000010000100", 
    34 => "10100000100110110010110", 35 => "10100000011100111111110", 
    36 => "10100000010010111101111", 37 => "10100000001000100111111", 
    38 => "10011111111110000010101", 39 => "10011111110011001001110", 
    40 => "10011111101000000000110", 41 => "10011111011100100110101", 
    42 => "10011111010000111000011", 43 => "10011111000100111011000", 
    44 => "10011110111000101010110", 45 => "10011110101100001011011", 
    46 => "10011110011111011001011", 47 => "10011110010010010101000", 
    48 => "10011110000100111111001", 49 => "10011101110111011001111", 
    50 => "10011101101001011110100", 51 => "10011101011011010011111", 
    52 => "10011101001100111101011", 53 => "10011100111110010001010", 
    54 => "10011100101111010100111", 55 => "10011100100000000100111", 
    56 => "10011100010000100110001", 57 => "10011100000000110010001", 
    58 => "10011011110000110011010", 59 => "10011011100000100011100", 
    60 => "10011011001111111100011", 61 => "10011010111111000101010", 
    62 => "10011010101110000100110", 63 => "10011010011100101100101", 
    64 => "10011010001011000101100", 65 => "10011001111001001010001", 
    66 => "10011001100111000011000", 67 => "10011001010100101001100", 
    68 => "10011001000001111101000", 69 => "10011000101111000000001", 
    70 => "10011000011011110010101", 71 => "10011000001000010110001", 
    72 => "10010111110100101001001", 73 => "10010111100000101001011", 
    74 => "10010111001100011000100", 75 => "10010110110111111001000", 
    76 => "10010110100011001011011", 77 => "10010110001110000111111", 
    78 => "10010101111000111011010", 79 => "10010101100011011000001", 
    80 => "10010101001101100110010", 81 => "10010100110111100100111", 
    82 => "10010100100001010010011", 83 => "10010100001010110000100", 
    84 => "10010011110011111101011", 85 => "10010011011100111001010", 
    86 => "10010011000101100111001", 87 => "10010010101110000101100", 
    88 => "10010010010110001110110", 89 => "10010001111110001111110", 
    90 => "10010001100101111001010", 91 => "10010001001101011011000", 
    92 => "10010000110100101000100", 93 => "10010000011011100000111", 
    94 => "10010000000010001111010", 95 => "10001111101000101101111", 
    96 => "10001111001110111101001", 97 => "10001110110100111110000", 
    98 => "10001110011010101100111", 99 => "10001110000000001011010", 
    100 => "10001101100101011110101", 101 => "10001101001010011100111", 
    102 => "10001100101111001110001", 103 => "10001100010011110000111", 
    104 => "10001011111000000100011", 105 => "10001011011100001000111", 
    106 => "10001010111111111111111", 107 => "10001010100011100111001", 
    108 => "10001010000110111101001", 109 => "10001001101010000111010", 
    110 => "10001001001100111100111", 111 => "10001000101111101000111", 
    112 => "10001000010010000011110", 113 => "10000111110100010000111", 
    114 => "10000111010110001110011", 115 => "10000110110111111110000", 
    116 => "10000110011001011101101", 117 => "10000101111010101111110", 
    118 => "10000101011011110110010", 119 => "10000100111100101001000", 
    120 => "10000100011101010011010", 121 => "10000011111101101001111", 
    122 => "10000011011101110010110", 123 => "10000010111101101110100", 
    124 => "10000010011101011011010", 125 => "10000001111100111100111", 
    126 => "10000001011100010001110", 127 => "10000000111011010011001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity generic_sincos_hlmb6 is
    generic (
        DataWidth : INTEGER := 23;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of generic_sincos_hlmb6 is
    component generic_sincos_hlmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    generic_sincos_hlmb6_rom_U :  component generic_sincos_hlmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


