-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hls_ref_4oPi_table_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_s_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_s_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal hls_hotbm_fourth_o_19_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_19_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_19_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal hls_hotbm_fourth_o_20_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_20_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_20_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_21_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_21_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_21_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_27_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_27_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_27_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal results_sign_V_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_302_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1435 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_312_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1442 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal expv_op_fu_322_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal expv_op_reg_1455 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_11_fu_349_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_reg_1465 : STD_LOGIC_VECTOR (6 downto 0);
    signal table_256_V_reg_1470 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_reg_1475 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_reg_1496 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_51_i_reg_1502 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_36_fu_416_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_36_reg_1507 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_12_fu_422_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_426_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_i_reg_1518 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_i_fu_431_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_reg_1523 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_11_fu_436_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_11_reg_1528 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_V_fu_485_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1533 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1539 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_V_reg_1550 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Ex_V_fu_526_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1557 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_550_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_reg_1567 : STD_LOGIC_VECTOR (11 downto 0);
    signal sin_basis_fu_558_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_58_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_58_reg_1579 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_reg_1584 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i1_reg_1595 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_15_fu_724_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_15_reg_1600 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i4_reg_1605 : STD_LOGIC_VECTOR (48 downto 0);
    signal OP1_V_fu_738_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1610 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_86_i_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_i_reg_1617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_81_i_reg_1634 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal hls_hotbm_fourth_o_29_reg_1640 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_31_reg_1645 : STD_LOGIC_VECTOR (43 downto 0);
    signal OP2_V_fu_769_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_83_i_reg_1692 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_85_i_reg_1697 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_19_reg_1702 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_22_i_reg_1707 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_24_i_reg_1712 : STD_LOGIC_VECTOR (47 downto 0);
    signal hls_hotbm_fourth_o_33_reg_1717 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_35_reg_1722 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_22_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_22_reg_1747 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1752 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_2_reg_1757 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_read_assign_fu_920_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_read_assign_reg_1762 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal r_V_fu_937_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_reg_1767 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal result_V_reg_1782 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_1_i_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_1_i_reg_1793 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_2_i_reg_1798 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i1_56_reg_1803 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_i2_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_i1_i_fu_1090_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i_reg_1815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_i2_i_57_fu_1108_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_57_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_fu_1119_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_42_i_reg_1829 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_46_i_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_reg_1835 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_i_fu_1158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i_reg_1840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_43_i_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_reg_1846 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_1_i_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i_reg_1853 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_1_i_fu_1179_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_1_i_reg_1858 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_66_1_i_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_1_i_reg_1864 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_2_i_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_2_i_reg_1869 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_i_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_reg_1875 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_2_i_fu_1224_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_2_i_reg_1882 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal or_cond_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1888 : STD_LOGIC_VECTOR (0 downto 0);
    signal newexp_fu_1277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_reg_1893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1898 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_37_fu_1364_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_37_reg_1903 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ret_V_9_fu_1387_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_9_reg_1908 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i2_i_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr_V_fu_328_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_334_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_i_i_fu_353_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_3_fu_356_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_28_fu_371_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal p_Result_i3_i_fu_441_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_29_fu_451_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_30_fu_459_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_31_fu_469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_i_fu_477_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_i_fu_505_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_13_fu_508_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_499_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_i_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_cast_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_i_fu_544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_38_fu_579_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_585_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_623_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_2_cast_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_i_fu_693_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_59_i_fu_697_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_60_i_fu_702_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_14_fu_707_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_741_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_741_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_32_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_789_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_801_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_789_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_860_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_860_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_872_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_20_fu_847_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_89_i_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_i_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_i_cast_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_21_fu_885_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_860_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_872_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_93_i_cast_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_i_cast_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_fu_929_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_949_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal tmp_i_55_fu_1005_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_26_fu_1012_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_fu_1024_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_1042_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_i_fu_1061_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_27_fu_1049_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_35_fu_1080_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_1068_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_36_fu_1098_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_1116_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_i_fu_1129_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_1136_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_37_fu_1148_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_1_i_fu_1176_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_66_2_i_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Ex_V_ret_fu_1211_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_2_i_fu_1221_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sel_tmp2_i_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_3_i_fu_1229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel9_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_1254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_1217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_i_fu_1267_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_i_cast_fu_1273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_1259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_3_i_fu_1291_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_3_i_fu_1294_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_18_fu_1306_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_19_fu_1316_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_21_fu_1332_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_22_fu_1341_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_20_fu_1325_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_23_fu_1350_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_cond_i_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1357_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_17_fu_1303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_1_fu_1380_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_1372_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal not_or_cond_demorgan_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_cast_fu_1404_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_10_fu_1412_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_39_fu_1418_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_385_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_385_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_789_p10 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_801_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_860_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_860_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_872_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_872_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_949_p00 : STD_LOGIC_VECTOR (125 downto 0);

    component houghTransform_muncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (169 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component houghTransform_mupcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_muocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_muqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component houghTransform_muGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component houghTransform_muHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component houghTransform_muIfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component houghTransform_muJfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component houghTransform_muKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component generic_sincos_hlcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doubleBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubleCeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doubleDeQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doubleEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doubleFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_s_U : component generic_sincos_hlcud
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_s_address0,
        ce0 => hls_ref_4oPi_table_s_ce0,
        q0 => hls_ref_4oPi_table_s_q0);

    hls_hotbm_fourth_o_19_U : component sin_or_cos_doubleBew
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_19_address0,
        ce0 => hls_hotbm_fourth_o_19_ce0,
        q0 => hls_hotbm_fourth_o_19_q0);

    hls_hotbm_fourth_o_20_U : component sin_or_cos_doubleCeG
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_20_address0,
        ce0 => hls_hotbm_fourth_o_20_ce0,
        q0 => hls_hotbm_fourth_o_20_q0);

    hls_hotbm_fourth_o_21_U : component sin_or_cos_doubleDeQ
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_21_address0,
        ce0 => hls_hotbm_fourth_o_21_ce0,
        q0 => hls_hotbm_fourth_o_21_q0);

    hls_hotbm_fourth_o_27_U : component sin_or_cos_doubleEe0
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_27_address0,
        ce0 => hls_hotbm_fourth_o_27_ce0,
        q0 => hls_hotbm_fourth_o_27_q0);

    hls_hotbm_fourth_o_U : component sin_or_cos_doubleFfa
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_address0,
        ce0 => hls_hotbm_fourth_o_ce0,
        q0 => hls_hotbm_fourth_o_q0);

    houghTransform_muncg_x_U32 : component houghTransform_muncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 170,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_385_p0,
        din1 => grp_fu_385_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    houghTransform_mupcA_x_U33 : component houghTransform_mupcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_36_reg_1507,
        dout => sin_basis_fu_558_p10);

    houghTransform_muocq_x_U34 : component houghTransform_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_38_fu_579_p3,
        dout => tmp_6_fu_585_p18);

    houghTransform_muocq_x_U35 : component houghTransform_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_38_fu_579_p3,
        dout => tmp_7_fu_623_p18);

    houghTransform_muqcK_x_U36 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_741_p0,
        din1 => grp_fu_741_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_741_p2);

    houghTransform_muqcK_x_U37 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_772_p2);

    houghTransform_muqcK_x_U38 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);

    houghTransform_muGfk_U39 : component houghTransform_muGfk
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 52,
        din1_WIDTH => 56,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_29_reg_1640,
        din1 => grp_fu_789_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_789_p2);

    houghTransform_muHfu_U40 : component houghTransform_muHfu
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 44,
        din1_WIDTH => 49,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_31_reg_1645,
        din1 => grp_fu_801_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_801_p2);

    houghTransform_muIfE_U41 : component houghTransform_muIfE
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 42,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_860_p0,
        din1 => grp_fu_860_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_860_p2);

    houghTransform_muJfO_U42 : component houghTransform_muJfO
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 25,
        din1_WIDTH => 35,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_872_p0,
        din1 => grp_fu_872_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_872_p2);

    houghTransform_muKfY_U43 : component houghTransform_muKfY
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_949_p0,
        din1 => r_V_reg_1767,
        ce => ap_const_logic_1,
        dout => grp_fu_949_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Ex_V_reg_1557 <= Ex_V_fu_526_p2;
                Mx_V_reg_1550 <= p_Val2_13_fu_508_p2(123 downto 61);
                isNeg_reg_1562 <= Ex_V_fu_526_p2(10 downto 10);
                or_cond_58_reg_1579 <= or_cond_58_fu_669_p2;
                p_Result_s_reg_1590 <= p_Result_s_fu_684_p2;
                sh_assign_reg_1567 <= sh_assign_fu_550_p3;
                sin_basis_reg_1572 <= sin_basis_fu_558_p10;
                tmp4_demorgan_reg_1584 <= tmp4_demorgan_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                Mx_V_read_assign_reg_1762 <= Mx_V_read_assign_fu_920_p3;
                r_V_reg_1767 <= r_V_fu_937_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Mx_zeros_V_reg_1533 <= Mx_zeros_V_fu_485_p1;
                p_Val2_11_reg_1528 <= p_Val2_11_fu_436_p3;
                tmp_3_reg_1545 <= tmp_3_fu_494_p2;
                tmp_8_reg_1539 <= tmp_8_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    OP1_V_reg_1610(48 downto 0) <= OP1_V_fu_738_p1(48 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_1448 <= closepath_fu_316_p2;
                expv_op_reg_1455 <= expv_op_fu_322_p2;
                loc_V_1_reg_1442 <= loc_V_1_fu_312_p1;
                loc_V_reg_1435 <= p_Val2_s_fu_290_p1(62 downto 52);
                results_sign_V_reg_1430 <= p_Val2_s_fu_290_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                hls_hotbm_fourth_o_29_reg_1640 <= hls_hotbm_fourth_o_20_q0;
                hls_hotbm_fourth_o_31_reg_1645 <= hls_hotbm_fourth_o_21_q0;
                tmp_81_i_reg_1634 <= grp_fu_741_p2(97 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                hls_hotbm_fourth_o_33_reg_1717 <= hls_hotbm_fourth_o_27_q0;
                hls_hotbm_fourth_o_35_reg_1722 <= hls_hotbm_fourth_o_q0;
                p_Val2_19_reg_1702 <= hls_hotbm_fourth_o_19_q0;
                tmp_22_i_reg_1707 <= grp_fu_789_p2(107 downto 52);
                tmp_24_i_reg_1712 <= grp_fu_801_p2(92 downto 45);
                tmp_83_i_reg_1692 <= grp_fu_772_p2(97 downto 56);
                tmp_85_i_reg_1697 <= grp_fu_777_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                newexp_reg_1893 <= newexp_fu_1277_p2;
                or_cond_reg_1888 <= or_cond_fu_1243_p2;
                tmp_16_reg_1898 <= newexp_fu_1277_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                p_Result_16_1_i_reg_1793 <= grp_fu_949_p2(109 downto 94);
                p_Result_16_2_i_reg_1798 <= grp_fu_949_p2(93 downto 78);
                p_Result_1_i_reg_1788 <= grp_fu_949_p2(125 downto 110);
                p_Result_i1_56_reg_1803 <= grp_fu_949_p2(77 downto 63);
                result_V_reg_1782 <= grp_fu_949_p2(125 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_Result_i1_reg_1595 <= p_Val2_14_fu_707_p3(62 downto 56);
                p_Val2_15_reg_1600 <= p_Val2_15_fu_724_p1;
                tmp_i4_reg_1605 <= p_Val2_14_fu_707_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Val2_22_reg_1747 <= p_Val2_22_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_36_reg_1507 <= p_Val2_36_fu_416_p3;
                p_Val2_i_reg_1518 <= p_Val2_i_fu_426_p2;
                tmp_12_reg_1513 <= tmp_12_fu_422_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp4_demorgan_reg_1584) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                p_Val2_37_reg_1903 <= p_Val2_37_fu_1364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_9_reg_1496 <= grp_fu_385_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                ret_V_9_reg_1908 <= ret_V_9_fu_1387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_1475 <= r_V_3_fu_356_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                sel_tmp6_i_reg_1875 <= sel_tmp6_i_fu_1205_p2;
                shift_2_1_i_reg_1853 <= shift_2_1_i_fu_1171_p2;
                shift_2_2_i_reg_1869 <= shift_2_2_i_fu_1189_p2;
                tmp_43_i_reg_1846 <= tmp_43_i_fu_1166_p2;
                tmp_66_1_i_reg_1864 <= tmp_66_1_i_fu_1184_p2;
                tmp_i3_i_reg_1840 <= tmp_i3_i_fu_1158_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                table_256_V_reg_1470 <= hls_ref_4oPi_table_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_11_reg_1465 <= tmp_11_fu_349_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_1752 <= grp_fu_860_p2(74 downto 38);
                tmp_2_reg_1757 <= grp_fu_872_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp4_demorgan_reg_1584))) then
                tmp_42_i_reg_1829 <= tmp_42_i_fu_1119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_46_i_reg_1835 <= tmp_46_i_fu_1124_p2;
                tmp_i1_i_reg_1815 <= tmp_i1_i_fu_1090_p3;
                tmp_i2_i_57_reg_1822 <= tmp_i2_i_57_fu_1108_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (closepath_reg_1448 = ap_const_lv1_0))) then
                tmp_51_i_reg_1502 <= grp_fu_385_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp4_demorgan_reg_1584) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                tmp_65_1_i_reg_1858 <= tmp_65_1_i_fu_1179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp4_demorgan_reg_1584) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                tmp_65_2_i_reg_1882 <= tmp_65_2_i_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    tmp_86_i_reg_1617(7 downto 0) <= tmp_86_i_fu_753_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_9_reg_1490 <= tmp_9_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_i_i2_reg_1808 <= tmp_i_i2_fu_1034_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (closepath_reg_1448 = ap_const_lv1_1))) then
                tmp_i_reg_1523 <= tmp_i_fu_431_p2;
            end if;
        end if;
    end process;
    OP1_V_reg_1610(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_86_i_reg_1617(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_526_p2 <= std_logic_vector(unsigned(storemerge_i_fu_499_p3) - unsigned(tmp_55_i_fu_523_p1));
    Mx_V_read_assign_fu_920_p3 <= 
        Mx_V_reg_1550 when (sin_basis_reg_1572(0) = '1') else 
        ap_const_lv63_7FFFFFFFFFFFFFFF;
    Mx_zeros_V_fu_485_p1 <= tmp_i4_i_fu_477_p3(6 - 1 downto 0);
    OP1_V_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i4_reg_1605),98));
    OP2_V_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_i_reg_1634),98));
    addr_V_fu_328_p3 <= 
        ap_const_lv11_4A when (closepath_reg_1448(0) = '1') else 
        expv_op_reg_1455;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_39_fu_1418_p4;
    closepath_fu_316_p2 <= "1" when (unsigned(loc_V_fu_302_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    expv_op_fu_322_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_302_p4));
    grp_fu_385_p0 <= grp_fu_385_p00(53 - 1 downto 0);
    grp_fu_385_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_28_fu_371_p3),223));
    grp_fu_385_p1 <= grp_fu_385_p10(170 - 1 downto 0);
    grp_fu_385_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1475),223));
    grp_fu_741_p0 <= OP1_V_fu_738_p1(49 - 1 downto 0);
    grp_fu_741_p1 <= OP1_V_fu_738_p1(49 - 1 downto 0);
    grp_fu_772_p0 <= OP1_V_reg_1610(49 - 1 downto 0);
    grp_fu_772_p1 <= OP2_V_fu_769_p1(49 - 1 downto 0);
    grp_fu_777_p0 <= OP2_V_fu_769_p1(49 - 1 downto 0);
    grp_fu_777_p1 <= OP2_V_fu_769_p1(49 - 1 downto 0);
    grp_fu_789_p1 <= grp_fu_789_p10(56 - 1 downto 0);
    grp_fu_789_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_15_reg_1600),108));
    grp_fu_801_p1 <= grp_fu_801_p10(49 - 1 downto 0);
    grp_fu_801_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_i_reg_1634),93));
    grp_fu_860_p0 <= grp_fu_860_p00(33 - 1 downto 0);
    grp_fu_860_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_33_reg_1717),75));
    grp_fu_860_p1 <= grp_fu_860_p10(42 - 1 downto 0);
    grp_fu_860_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_i_reg_1692),75));
    grp_fu_872_p0 <= grp_fu_872_p00(25 - 1 downto 0);
    grp_fu_872_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_35_reg_1722),60));
    grp_fu_872_p1 <= grp_fu_872_p10(35 - 1 downto 0);
    grp_fu_872_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_i_reg_1697),60));
    grp_fu_949_p0 <= grp_fu_949_p00(63 - 1 downto 0);
    grp_fu_949_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_reg_1762),126));
    hls_hotbm_fourth_o_19_address0 <= tmp_86_i_reg_1617(8 - 1 downto 0);

    hls_hotbm_fourth_o_19_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_19_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_20_address0 <= tmp_86_i_fu_753_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_20_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hls_hotbm_fourth_o_20_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_21_address0 <= tmp_86_i_fu_753_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_21_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hls_hotbm_fourth_o_21_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_27_address0 <= tmp_86_i_reg_1617(8 - 1 downto 0);

    hls_hotbm_fourth_o_27_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_27_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_address0 <= tmp_86_i_reg_1617(8 - 1 downto 0);

    hls_hotbm_fourth_o_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_ref_4oPi_table_s_address0 <= tmp_i2_i_fu_344_p1(4 - 1 downto 0);

    hls_ref_4oPi_table_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_536_p3 <= Ex_V_fu_526_p2(10 downto 10);
    loc_V_1_fu_312_p1 <= p_Val2_s_fu_290_p1(52 - 1 downto 0);
    loc_V_fu_302_p4 <= p_Val2_s_fu_290_p1(62 downto 52);
    newSel1_fu_1254_p3 <= 
        shift_2_2_i_reg_1869 when (tmp_43_i_reg_1846(0) = '1') else 
        tmp_i_i2_reg_1808;
    newSel2_fu_1259_p3 <= 
        newSel9_fu_1248_p3 when (or_cond_fu_1243_p2(0) = '1') else 
        newSel1_fu_1254_p3;
    newSel9_fu_1248_p3 <= 
        shift_2_3_i_fu_1229_p2 when (sel_tmp6_i_reg_1875(0) = '1') else 
        shift_2_1_i_reg_1853;
    newexp_fu_1277_p2 <= std_logic_vector(signed(tmp_44_i_cast_fu_1273_p1) - signed(newSel2_fu_1259_p3));
    not_or_cond_demorgan_fu_1394_p2 <= (tmp_8_reg_1539 and tmp_9_reg_1490);
    not_or_cond_fu_1398_p2 <= (not_or_cond_demorgan_fu_1394_p2 xor ap_const_lv1_1);
    or_cond_58_fu_669_p2 <= (tmp_8_reg_1539 and tmp_9_reg_1490);
    or_cond_fu_1243_p2 <= (sel_tmp6_i_reg_1875 or sel_tmp3_i_fu_1238_p2);
    or_cond_i_fu_1299_p2 <= (tmp_16_reg_1898 or tmp_46_i_reg_1835);
    out_exp_V_fu_1372_p3 <= 
        ap_const_lv11_0 when (or_cond_i_fu_1299_p2(0) = '1') else 
        tmp_17_fu_1303_p1;
    p_Ex_V_ret_fu_1211_p3 <= 
        Ex_V_reg_1557 when (sin_basis_reg_1572(0) = '1') else 
        ap_const_lv11_0;
    p_Result_1_fu_1380_p3 <= 
        ap_const_lv11_3FF when (or_cond_58_reg_1579(0) = '1') else 
        ap_const_lv11_7FF;
    p_Result_28_fu_371_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1442);
    p_Result_29_fu_451_p3 <= (p_Result_i3_i_fu_441_p4 & ap_const_lv1_1);
    p_Result_2_cast_fu_1404_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond_fu_1398_p2(0) = '1') else 
        ap_const_lv52_0;
    
    p_Result_30_fu_459_p4_proc : process(p_Result_29_fu_451_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_30_fu_459_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_29_fu_451_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_30_fu_459_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_30_fu_459_p4_i) := p_Result_29_fu_451_p3(62-1-p_Result_30_fu_459_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_30_fu_459_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_31_fu_469_p3 <= (ap_const_lv2_3 & p_Result_30_fu_459_p4);
    p_Result_32_fu_747_p3 <= (sin_basis_reg_1572 & p_Result_i1_reg_1595);
    p_Result_33_fu_1136_p5 <= (tmp_3_i_fu_1129_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_34_fu_1024_p4_proc : process(p_Val2_26_fu_1012_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_fu_1024_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_26_fu_1012_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_fu_1024_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_fu_1024_p4_i) := p_Val2_26_fu_1012_p5(32-1-p_Result_34_fu_1024_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_fu_1024_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_35_fu_1080_p4_proc : process(p_Val2_27_fu_1049_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_35_fu_1080_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_27_fu_1049_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_35_fu_1080_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_35_fu_1080_p4_i) := p_Val2_27_fu_1049_p5(32-1-p_Result_35_fu_1080_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_35_fu_1080_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_36_fu_1098_p4_proc : process(p_Val2_28_fu_1068_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_36_fu_1098_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_28_fu_1068_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_36_fu_1098_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_36_fu_1098_p4_i) := p_Val2_28_fu_1068_p5(32-1-p_Result_36_fu_1098_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_36_fu_1098_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_37_fu_1148_p4_proc : process(p_Result_33_fu_1136_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_37_fu_1148_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_33_fu_1136_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_37_fu_1148_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_37_fu_1148_p4_i) := p_Result_33_fu_1136_p5(32-1-p_Result_37_fu_1148_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_37_fu_1148_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_38_fu_579_p3 <= (results_sign_V_reg_1430 & p_Val2_36_reg_1507);
    p_Result_39_fu_1418_p4 <= ((p_Result_s_reg_1590 & ret_V_9_reg_1908) & ret_V_10_fu_1412_p3);
    p_Result_i3_i_fu_441_p4 <= p_Val2_11_fu_436_p3(123 downto 63);
    p_Result_i_i_fu_334_p4 <= addr_V_fu_328_p3(10 downto 7);
    p_Result_s_fu_684_p2 <= (tmp_s_fu_661_p3 and tmp4_fu_678_p2);
    p_Val2_11_fu_436_p3 <= 
        p_Val2_i_reg_1518 when (tmp_12_reg_1513(0) = '1') else 
        p_Val2_9_reg_1496;
    p_Val2_13_fu_508_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_11_reg_1528),to_integer(unsigned('0' & tmp_52_i_fu_505_p1(31-1 downto 0)))));
    p_Val2_14_fu_707_p3 <= 
        tmp_59_i_fu_697_p2 when (isNeg_reg_1562(0) = '1') else 
        tmp_60_i_fu_702_p2;
    p_Val2_15_fu_724_p1 <= p_Val2_14_fu_707_p3(56 - 1 downto 0);
    p_Val2_20_fu_847_p3 <= (p_Val2_19_reg_1702 & ap_const_lv4_0);
    p_Val2_21_fu_885_p2 <= std_logic_vector(signed(tmp_89_i_fu_882_p1) + signed(tmp_88_i_fu_878_p1));
    p_Val2_22_fu_894_p2 <= std_logic_vector(signed(tmp_91_i_cast_fu_891_p1) + signed(p_Val2_21_fu_885_p2));
    p_Val2_23_fu_929_p2 <= std_logic_vector(unsigned(tmp_93_i_cast_fu_926_p1) + unsigned(p_Val2_22_reg_1747));
    p_Val2_26_fu_1012_p5 <= (tmp_i_55_fu_1005_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_27_fu_1049_p5 <= (tmp_1_i_fu_1042_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_28_fu_1068_p5 <= (tmp_2_i_fu_1061_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_36_fu_416_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1448(0) = '1') else 
        tmp_51_i_reg_1502;
    p_Val2_37_fu_1364_p3 <= 
        ap_const_lv52_0 when (or_cond_i_fu_1299_p2(0) = '1') else 
        tmp_5_fu_1357_p3;
    p_Val2_i_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_9_reg_1496));
    p_Val2_s_fu_290_p1 <= t_in;
    r_V_3_fu_356_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_1470),to_integer(unsigned('0' & tmp_45_i_i_fu_353_p1(31-1 downto 0)))));
    r_V_fu_937_p2 <= std_logic_vector(unsigned(tmp_95_i_cast_fu_934_p1) + unsigned(p_Val2_23_fu_929_p2));
    ret_V_10_fu_1412_p3 <= 
        p_Result_2_cast_fu_1404_p3 when (tmp4_demorgan_reg_1584(0) = '1') else 
        p_Val2_37_reg_1903;
    ret_V_9_fu_1387_p3 <= 
        p_Result_1_fu_1380_p3 when (tmp4_demorgan_reg_1584(0) = '1') else 
        out_exp_V_fu_1372_p3;
        rhs_V_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_fu_1211_p3),12));

    sel_tmp2_i_fu_1233_p2 <= (tmp_66_1_i_reg_1864 xor ap_const_lv1_1);
    sel_tmp3_i_fu_1238_p2 <= (tmp_43_i_reg_1846 and sel_tmp2_i_fu_1233_p2);
    sel_tmp6_i_fu_1205_p2 <= (tmp_fu_1199_p2 and tmp_43_i_fu_1166_p2);
        sh_assign_2_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_reg_1567),32));

    sh_assign_fu_550_p3 <= 
        tmp_57_i_fu_544_p2 when (isNeg_fu_536_p3(0) = '1') else 
        sh_cast_fu_532_p1;
        sh_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_526_p2),12));

    shift_2_1_i_fu_1171_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i1_i_reg_1815));
    shift_2_2_i_fu_1189_p2 <= std_logic_vector(unsigned(shift_2_1_i_fu_1171_p2) + unsigned(tmp_i2_i_57_reg_1822));
    shift_2_3_i_fu_1229_p2 <= std_logic_vector(unsigned(shift_2_2_i_reg_1869) + unsigned(tmp_i3_i_reg_1840));
    storemerge_i_fu_499_p3 <= 
        tmp_i_reg_1523 when (closepath_reg_1448(0) = '1') else 
        ap_const_lv11_0;
    tmp4_demorgan_fu_673_p2 <= (tmp_3_reg_1545 or or_cond_58_fu_669_p2);
    tmp4_fu_678_p2 <= (tmp4_demorgan_fu_673_p2 xor ap_const_lv1_1);
    tmp_11_fu_349_p1 <= addr_V_fu_328_p3(7 - 1 downto 0);
    tmp_12_fu_422_p1 <= p_Val2_36_fu_416_p3(1 - 1 downto 0);
    tmp_17_fu_1303_p1 <= newexp_reg_1893(11 - 1 downto 0);
    tmp_18_fu_1306_p4 <= tmp_65_3_i_fu_1294_p2(61 downto 10);
    tmp_19_fu_1316_p4 <= tmp_65_1_i_reg_1858(61 downto 10);
    tmp_1_i_fu_1042_p3 <= (p_Result_16_1_i_reg_1793 & ap_const_lv1_1);
    tmp_20_fu_1325_p3 <= 
        tmp_18_fu_1306_p4 when (sel_tmp6_i_reg_1875(0) = '1') else 
        tmp_19_fu_1316_p4;
    tmp_21_fu_1332_p4 <= tmp_65_2_i_reg_1882(61 downto 10);
    tmp_22_fu_1341_p4 <= tmp_42_i_reg_1829(61 downto 10);
    tmp_23_fu_1350_p3 <= 
        tmp_21_fu_1332_p4 when (tmp_43_i_reg_1846(0) = '1') else 
        tmp_22_fu_1341_p4;
    tmp_2_i_fu_1061_p3 <= (p_Result_16_2_i_reg_1798 & ap_const_lv1_1);
    tmp_3_fu_494_p2 <= "1" when (loc_V_reg_1435 = ap_const_lv11_7FF) else "0";
    tmp_3_i_fu_1129_p3 <= (p_Result_i1_56_reg_1803 & ap_const_lv1_1);
    tmp_42_i_fu_1119_p2 <= std_logic_vector(shift_left(unsigned(result_V_reg_1782),to_integer(unsigned('0' & tmp_i3_fu_1116_p1(31-1 downto 0)))));
    tmp_43_i_fu_1166_p2 <= "1" when (tmp_i_i2_reg_1808 = ap_const_lv32_10) else "0";
        tmp_44_i_cast_fu_1273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_i_fu_1267_p2),32));

    tmp_44_i_fu_1267_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) + unsigned(rhs_V_fu_1217_p1));
    tmp_45_i_i_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1465),256));
    tmp_46_i_fu_1124_p2 <= "1" when (result_V_reg_1782 = ap_const_lv63_0) else "0";
    tmp_52_i_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1533),124));
    tmp_55_i_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1533),11));
    tmp_57_i_fu_544_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_cast_fu_532_p1));
    tmp_58_i_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_690_p1),63));
    tmp_59_i_fu_697_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1550),to_integer(unsigned('0' & tmp_58_i_fu_693_p1(31-1 downto 0)))));
    tmp_5_fu_1357_p3 <= 
        tmp_20_fu_1325_p3 when (or_cond_reg_1888(0) = '1') else 
        tmp_23_fu_1350_p3;
    tmp_60_i_fu_702_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1550),to_integer(unsigned('0' & tmp_58_i_fu_693_p1(31-1 downto 0)))));
    tmp_62_1_i_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_i_reg_1815),63));
    tmp_62_2_i_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_i_57_reg_1822),63));
    tmp_62_3_i_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_i_reg_1840),63));
    tmp_65_1_i_fu_1179_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i_reg_1829),to_integer(unsigned('0' & tmp_62_1_i_fu_1176_p1(31-1 downto 0)))));
    tmp_65_2_i_fu_1224_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_1_i_reg_1858),to_integer(unsigned('0' & tmp_62_2_i_fu_1221_p1(31-1 downto 0)))));
    tmp_65_3_i_fu_1294_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_2_i_reg_1882),to_integer(unsigned('0' & tmp_62_3_i_fu_1291_p1(31-1 downto 0)))));
    tmp_66_1_i_fu_1184_p2 <= "1" when (tmp_i1_i_reg_1815 = ap_const_lv32_10) else "0";
    tmp_66_2_i_fu_1194_p2 <= "1" when (tmp_i2_i_57_reg_1822 = ap_const_lv32_10) else "0";
    tmp_86_i_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_32_fu_747_p3),32));
        tmp_88_i_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_fu_847_p3),64));

        tmp_89_i_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_i_reg_1707),64));

    tmp_8_fu_489_p2 <= "1" when (loc_V_reg_1435 = ap_const_lv11_0) else "0";
        tmp_91_i_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_i_reg_1712),64));

    tmp_93_i_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1752),64));
    tmp_95_i_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1757),64));
    tmp_9_fu_391_p2 <= "1" when (loc_V_1_reg_1442 = ap_const_lv52_0) else "0";
    tmp_fu_1199_p2 <= (tmp_66_1_i_fu_1184_p2 and tmp_66_2_i_fu_1194_p2);
    
    tmp_i1_i_fu_1090_p3_proc : process(p_Result_35_fu_1080_p4)
    begin
        tmp_i1_i_fu_1090_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_35_fu_1080_p4(i) = '1' then
                tmp_i1_i_fu_1090_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i2_i_57_fu_1108_p3_proc : process(p_Result_36_fu_1098_p4)
    begin
        tmp_i2_i_57_fu_1108_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_36_fu_1098_p4(i) = '1' then
                tmp_i2_i_57_fu_1108_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i2_i_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_334_p4),32));
    tmp_i3_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i2_reg_1808),63));
    
    tmp_i3_i_fu_1158_p3_proc : process(p_Result_37_fu_1148_p4)
    begin
        tmp_i3_i_fu_1158_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_37_fu_1148_p4(i) = '1' then
                tmp_i3_i_fu_1158_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i4_i_fu_477_p3_proc : process(p_Result_31_fu_469_p3)
    begin
        tmp_i4_i_fu_477_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_31_fu_469_p3(i) = '1' then
                tmp_i4_i_fu_477_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_55_fu_1005_p3 <= (p_Result_1_i_reg_1788 & ap_const_lv1_1);
    tmp_i_fu_431_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1435));
    
    tmp_i_i2_fu_1034_p3_proc : process(p_Result_34_fu_1024_p4)
    begin
        tmp_i_i2_fu_1034_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_fu_1024_p4(i) = '1' then
                tmp_i_i2_fu_1034_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_s_fu_661_p3 <= 
        tmp_6_fu_585_p18 when (sin_basis_fu_558_p10(0) = '1') else 
        tmp_7_fu_623_p18;
end behav;
