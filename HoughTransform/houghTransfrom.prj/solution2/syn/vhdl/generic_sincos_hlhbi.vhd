-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity generic_sincos_hlhbi_rom is 
    generic(
             dwidth     : integer := 27; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of generic_sincos_hlhbi_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "101111110000111110011000001", 1 => "101111110001000000110111110", 
    2 => "101111110001000101111010010", 3 => "101111110001001101011010101", 
    4 => "101111110001010111011011000", 5 => "101111110001100011111101101", 
    6 => "101111110001110010111101011", 7 => "101111110010000100011101110", 
    8 => "101111110010011000011110100", 9 => "101111110010101111000000100", 
    10 => "101111110011001000000011010", 11 => "101111110011100011100101001", 
    12 => "101111110100000001100111011", 13 => "101111110100100010001001010", 
    14 => "101111110101000101001000000", 15 => "101111110101101010100111111", 
    16 => "101111110110010010101001011", 17 => "101111110110111101000110100", 
    18 => "101111110111101010000100110", 19 => "101111111000011001100001110", 
    20 => "101111111001001011011100111", 21 => "101111111001111111111000010", 
    22 => "101111111010110110110100001", 23 => "101111111011110000001110110", 
    24 => "101111111100101100000100011", 25 => "101111111101101010011000111", 
    26 => "101111111110101011001101001", 27 => "101111111111101110100001010", 
    28 => "110000000000110100010010001", 29 => "110000000001111100100000011", 
    30 => "110000000011000111001101101", 31 => "110000000100010100010101000", 
    32 => "110000000101100011111010111", 33 => "110000000110110110000000110", 
    34 => "110000001000001010100001101", 35 => "110000001001100001011101100", 
    36 => "110000001010111010110100111", 37 => "110000001100010110101001110", 
    38 => "110000001101110100111011100", 39 => "110000001111010101101011010", 
    40 => "110000010000111000110001011", 41 => "110000010010011110010111111", 
    42 => "110000010100000110011001101", 43 => "110000010101110000110001000", 
    44 => "110000010111011101100111011", 45 => "110000011001001100110110010", 
    46 => "110000011010111110011111010", 47 => "110000011100110010100010100", 
    48 => "110000011110101000111100000", 49 => "110000100000100001110001110", 
    50 => "110000100010011101000000111", 51 => "110000100100011010101000011", 
    52 => "110000100110011010101000000", 53 => "110000101000011100111110101", 
    54 => "110000101010100001101101111", 55 => "110000101100101000110101111", 
    56 => "110000101110110010010010101", 57 => "110000110000111110000110110", 
    58 => "110000110011001100010001111", 59 => "110000110101011100110000010", 
    60 => "110000110111101111100110110", 61 => "110000111010000100110011001", 
    62 => "110000111100011100010100010", 63 => "110000111110110110000111110", 
    64 => "110001000001010010001111101", 65 => "110001000011110000101110010", 
    66 => "110001000110010001011011101", 67 => "110001001000110100100011100", 
    68 => "110001001011011001111000010", 69 => "110001001110000001100000000", 
    70 => "110001010000101011011010111", 71 => "110001010011010111100111111", 
    72 => "110001010110000110000110100", 73 => "110001011000110110110001010", 
    74 => "110001011011101001110010100", 75 => "110001011110011110111110001", 
    76 => "110001100001010110011001110", 77 => "110001100100010000000101000", 
    78 => "110001100111001011111110100", 79 => "110001101010001010000111010", 
    80 => "110001101101001010011101010", 81 => "110001110000001100111111110", 
    82 => "110001110011010001110001110", 83 => "110001110110011000101011110", 
    84 => "110001111001100001110100011", 85 => "110001111100101101000111000", 
    86 => "110001111111111010100100000", 87 => "110010000011001010001100000", 
    88 => "110010000110011011111100110", 89 => "110010001001101111110111001", 
    90 => "110010001101000101110111110", 91 => "110010010000011110000001100", 
    92 => "110010010011111000011001001", 93 => "110010010111010100110001101", 
    94 => "110010011010110011001111100", 95 => "110010011110010011110111000", 
    96 => "110010100001110110100010101", 97 => "110010100101011011010011100", 
    98 => "110010101001000010001001010", 99 => "110010101100101011000100110", 
    100 => "110010110000010110000001111", 101 => "110010110100000010111110010", 
    102 => "110010110111110001111101101", 103 => "110010111011100011000001110", 
    104 => "110010111111010110000110110", 105 => "110011000011001011001010001", 
    106 => "110011000111000010010001000", 107 => "110011001010111011010010000", 
    108 => "110011001110110110010001101", 109 => "110011010010110011010011100", 
    110 => "110011010110110010010010000", 111 => "110011011010110011001100000", 
    112 => "110011011110110101111111110", 113 => "110011100010111010110001001", 
    114 => "110011100111000001100000000", 115 => "110011101011001010000101011", 
    116 => "110011101111010100101000011", 117 => "110011110011100001000001000", 
    118 => "110011110111101111010100111", 119 => "110011111011111111011111101", 
    120 => "110100000000010001011100010", 121 => "110100000100100101010100110", 
    122 => "110100001000111011000100001", 123 => "110100001101010010100101101", 
    124 => "110100010001101011111001011", 125 => "110100010110000111000100111", 
    126 => "110100011010100100000011011", 127 => "110100011111000010110010001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity generic_sincos_hlhbi is
    generic (
        DataWidth : INTEGER := 27;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of generic_sincos_hlhbi is
    component generic_sincos_hlhbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    generic_sincos_hlhbi_rom_U :  component generic_sincos_hlhbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


