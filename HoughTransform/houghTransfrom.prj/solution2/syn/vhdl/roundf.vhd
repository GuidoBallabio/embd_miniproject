-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity roundf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of roundf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_6_fu_70_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_6_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_i_i_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_i_i_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_reg_227 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal one_half_reg_232 : STD_LOGIC_VECTOR (23 downto 0);
    signal sel_tmp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_106_i_i_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_74_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_V_fu_96_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_cast_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_135_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_108_i_i_fu_139_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_150_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xs_sig_V_fu_144_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_46_fu_119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_47_fu_160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_v_fu_168_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sel_tmp1_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component roundf_mask_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component roundf_one_half_tbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    mask_table1_U : component roundf_mask_table1
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    one_half_table2_U : component roundf_one_half_tbkb
    generic map (
        DataWidth => 24,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mask_reg_227 <= mask_table1_q0;
                one_half_reg_232 <= one_half_table2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sel_tmp_reg_237 <= sel_tmp_fu_175_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                t_V_6_reg_200 <= t_V_6_fu_70_p1;
                tmp_105_i_i_reg_212 <= tmp_105_i_i_fu_90_p2;
                tmp_i_i_reg_206 <= tmp_i_i_fu_84_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        x when (sel_tmp2_fu_184_p2(0) = '1') else 
        sel_tmp_reg_237;
    index_V_fu_96_p4 <= t_V_6_fu_70_p1(27 downto 23);
    loc_V_2_fu_135_p1 <= p_Val2_s_fu_130_p2(23 - 1 downto 0);
    loc_V_fu_74_p4 <= t_V_6_fu_70_p1(30 downto 23);
    mask_table1_address0 <= tmp_106_i_i_fu_106_p1(5 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_reg_232),32));
    one_half_table2_address0 <= tmp_106_i_i_fu_106_p1(5 - 1 downto 0);

    one_half_table2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_46_fu_119_p3 <= (p_Result_s_fu_112_p3 & ap_const_lv31_0);
    p_Result_47_fu_160_p3 <= (tmp_fu_150_p4 & xs_sig_V_fu_144_p2);
    p_Result_s_fu_112_p3 <= t_V_6_reg_200(31 downto 31);
    p_Val2_s_fu_130_p2 <= std_logic_vector(unsigned(t_V_6_reg_200) + unsigned(one_half_cast_fu_127_p1));
    sel_tmp1_fu_179_p2 <= (tmp_i_i_reg_206 xor ap_const_lv1_1);
    sel_tmp2_fu_184_p2 <= (tmp_105_i_i_reg_212 and sel_tmp1_fu_179_p2);
    sel_tmp_fu_175_p1 <= sel_tmp_v_fu_168_p3;
    sel_tmp_v_fu_168_p3 <= 
        p_Result_46_fu_119_p3 when (tmp_i_i_reg_206(0) = '1') else 
        p_Result_47_fu_160_p3;
    t_V_6_fu_70_p1 <= x;
    tmp_105_i_i_fu_90_p2 <= "1" when (unsigned(loc_V_fu_74_p4) > unsigned(ap_const_lv8_96)) else "0";
    tmp_106_i_i_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_96_p4),32));
    tmp_108_i_i_fu_139_p2 <= (mask_reg_227 xor ap_const_lv23_7FFFFF);
    tmp_fu_150_p4 <= p_Val2_s_fu_130_p2(31 downto 23);
    tmp_i_i_fu_84_p2 <= "1" when (unsigned(loc_V_fu_74_p4) < unsigned(ap_const_lv8_7E)) else "0";
    xs_sig_V_fu_144_p2 <= (loc_V_2_fu_135_p1 and tmp_108_i_i_fu_139_p2);
end behav;
