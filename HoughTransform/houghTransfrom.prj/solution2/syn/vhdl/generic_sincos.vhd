-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_sincos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of generic_sincos is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv63_4000000000000000 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hls_ref_4oPi_table_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_s_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_s_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal hls_hotbm_fourth_o_22_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_22_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_22_q0 : STD_LOGIC_VECTOR (57 downto 0);
    signal hls_hotbm_fourth_o_23_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_23_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_23_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal hls_hotbm_fourth_o_24_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_24_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_24_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_25_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_25_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_25_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_26_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_26_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_26_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal hls_hotbm_fourth_o_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_9_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_9_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal hls_hotbm_fourth_o_15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_15_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_15_q0 : STD_LOGIC_VECTOR (50 downto 0);
    signal hls_hotbm_fourth_o_16_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_16_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_16_q0 : STD_LOGIC_VECTOR (42 downto 0);
    signal hls_hotbm_fourth_o_17_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_17_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_17_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_18_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_18_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_18_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal sin_results_sign_V_reg_2110 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_398_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_2116 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_6_fu_408_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_6_reg_2123 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal expv_op_fu_418_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal expv_op_reg_2136 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_700_fu_445_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_700_reg_2146 : STD_LOGIC_VECTOR (6 downto 0);
    signal table_256_V_reg_2151 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_reg_2156 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_45_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_2171 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_59_reg_2177 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_51_i_reg_2183 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_100_fu_512_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_100_reg_2188 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_701_fu_518_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_701_reg_2194 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_522_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_i_reg_2199 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_61_fu_527_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_61_reg_2204 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Mx_zeros_V_fu_576_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_2209 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_V_reg_2215 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rhs_V_2_fu_619_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_2_reg_2222 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_i_fu_631_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_i_reg_2234 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_2239 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_2245 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_reg_2251 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_65_fu_687_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_65_reg_2256 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i1_reg_2262 : STD_LOGIC_VECTOR (48 downto 0);
    signal or_cond_69_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_69_reg_2267 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_70_fu_798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_70_reg_2273 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond2_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond2_reg_2278 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_104_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_104_reg_2284 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_833_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_2289 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP1_V_fu_854_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_2295 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_62_i_reg_2302 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_67_i_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_i_reg_2309 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP2_V_fu_879_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal hls_hotbm_fourth_o_39_reg_2342 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_46_reg_2347 : STD_LOGIC_VECTOR (50 downto 0);
    signal hls_hotbm_fourth_o_48_reg_2352 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal hls_hotbm_fourth_o_37_reg_2392 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_64_i_reg_2427 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_66_i_reg_2433 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_41_reg_2439 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_43_reg_2444 : STD_LOGIC_VECTOR (26 downto 0);
    signal hls_hotbm_fourth_o_50_reg_2454 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_52_reg_2459 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_521_reg_2464 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_71_reg_2489 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_13_i_reg_2494 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_15_i_reg_2499 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_9_i_reg_2529 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_11_i_reg_2534 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_i_reg_2539 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_522_reg_2544 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_13_fu_1098_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_13_reg_2549 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_69_reg_2554 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_5_i_reg_2559 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp60_fu_1133_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp60_reg_2564 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_1150_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_reg_2569 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_20_i_fu_1179_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_20_i_reg_2574 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_Val2_72_fu_1200_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_72_reg_2589 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_523_reg_2594 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_1_i_reg_2600 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_1_i_reg_2605 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_2_i_reg_2610 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_705_fu_1246_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_705_reg_2615 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_1_i4_reg_2620 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_16_1_i7_reg_2625 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_2_i1_reg_2630 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i2_reg_2635 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_i2_fu_1319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_reg_2640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_i_i_fu_1360_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_2647 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i_fu_1400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i_reg_2654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_42_i_fu_1411_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_42_i_reg_2661 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i1_i1_fu_1464_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i1_reg_2667 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i1_fu_1482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i1_reg_2674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i1_fu_1493_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_42_i1_reg_2681 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_46_i_fu_1499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_reg_2687 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_i_68_fu_1533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_68_reg_2692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_43_i_fu_1541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_reg_2698 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_1_i_fu_1546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i_reg_2706 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_1_i_fu_1554_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_1_i_reg_2712 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_66_1_i_fu_1559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_1_i_reg_2718 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_2_i_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_2_i_reg_2724 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_i1_fu_1599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i1_reg_2729 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i1_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i1_reg_2735 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_1_i1_fu_1612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i1_reg_2742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_1_i1_fu_1620_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_1_i1_reg_2747 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_66_1_i1_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_1_i1_reg_2753 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_2_i1_fu_1630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_2_i1_reg_2758 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_i1_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i1_reg_2764 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_i_fu_1681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i_reg_2771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_65_2_i_fu_1696_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_2_i_reg_2776 : STD_LOGIC_VECTOR (62 downto 0);
    signal shift_2_3_i_fu_1701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_3_i_reg_2782 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_i_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_reg_2787 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2793 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_1732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_reg_2799 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_2_i1_fu_1741_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_2_i1_reg_2804 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_cond3_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_2810 : STD_LOGIC_VECTOR (0 downto 0);
    signal newexp_1_fu_1793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_1_reg_2815 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_714_reg_2820 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_101_fu_1902_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_101_reg_2825 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal p_Val2_102_fu_1991_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_102_reg_2830 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_56_fu_2014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_2835 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_32_fu_2018_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_32_reg_2841 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_34_fu_2033_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_34_reg_2846 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i2_i_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr_V_fu_424_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_430_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_i_i_fu_449_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_7_fu_452_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_108_fu_467_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_481_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal p_Result_i3_i_fu_532_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_109_fu_542_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_110_fu_550_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_111_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_i_fu_568_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_580_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_i_fu_592_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_63_fu_595_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_585_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_i_fu_610_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_assign_fu_647_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_cast_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_i_fu_656_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_59_i_fu_660_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_60_i_fu_665_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_64_fu_670_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_122_fu_701_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_707_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond2_demorga_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp66_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_results_sign_V_fu_745_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_857_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_857_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_857_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_882_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_882_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_887_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_887_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_899_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_911_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_923_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_935_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_882_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_887_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_899_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_977_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_989_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_911_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal grp_fu_923_p2 : STD_LOGIC_VECTOR (91 downto 0);
    signal grp_fu_1021_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_1033_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1033_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_977_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal grp_fu_989_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1021_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_1033_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_72_i_cast_fu_1086_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_11_fu_1059_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_74_i_cast_fu_1095_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_12_fu_1089_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_935_p2 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_69_i_cast_fu_1120_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_90_cast_fu_1117_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp59_fu_1123_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_7_i_fu_1114_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp63_cast_fu_1129_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_76_i_cast_fu_1139_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_78_i_cast_fu_1147_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_14_fu_1142_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_70_fu_1156_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Val2_88_cast_fu_1167_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_87_cast_fu_1163_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_fu_1170_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp62_cast_fu_1176_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1191_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1191_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_20_i_cast_fu_1197_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1191_p2 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_i_67_fu_1290_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_73_fu_1297_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_113_fu_1309_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_1327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i5_fu_1334_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_81_fu_1338_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_118_fu_1350_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_1371_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_74_fu_1378_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_114_fu_1390_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_1408_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_i8_fu_1416_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_i1_fu_1435_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_82_fu_1423_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_119_fu_1454_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_83_fu_1442_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_120_fu_1472_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_80_fu_1368_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i2_fu_1490_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_i_fu_1504_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_75_fu_1511_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_115_fu_1523_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_1_i_fu_1551_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_i1_fu_1570_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_117_fu_1577_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_121_fu_1589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_1_i1_fu_1617_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_66_2_i1_fu_1635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp63_fu_1640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_1652_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_112_fu_1659_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_116_fu_1671_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_2_i_fu_1693_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal shift_2_2_i_fu_1689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_i_fu_1707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp61_fu_1717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_2_i1_fu_1738_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sel_tmp2_i1_fu_1750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i1_fu_1755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_3_i1_fu_1746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_1765_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_1771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_i_fu_1784_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_i_cast_fu_1789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_1776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_3_i_fu_1807_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal newSel5_fu_1815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel7_fu_1820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_3_i_fu_1810_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_708_fu_1844_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_709_fu_1854_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_711_fu_1870_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_712_fu_1879_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_710_fu_1863_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_713_fu_1888_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_706_fu_1832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_526_fu_1895_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_707_fu_1840_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_3_i1_fu_1918_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_65_3_i1_fu_1921_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_716_fu_1933_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_717_fu_1943_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_719_fu_1959_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_720_fu_1968_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_718_fu_1952_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_721_fu_1977_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_cond_i_fu_1926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_529_fu_1984_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_715_fu_1930_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_3_cast_fu_2007_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_1_fu_1999_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_5_fu_2026_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_1910_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Result_4_cast_fu_2041_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_35_fu_2054_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_33_fu_2048_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_123_fu_2060_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_124_fu_2068_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_write_assign_in_fu_2083_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_write_assign_in_fu_2076_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_out_fu_2094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_out_fu_2090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_1021_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_1033_p00 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_1033_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_1191_p00 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_fu_1191_p10 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_fu_481_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_481_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_899_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_899_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_911_p10 : STD_LOGIC_VECTOR (106 downto 0);
    signal grp_fu_923_p10 : STD_LOGIC_VECTOR (91 downto 0);
    signal grp_fu_935_p10 : STD_LOGIC_VECTOR (108 downto 0);
    signal grp_fu_977_p10 : STD_LOGIC_VECTOR (76 downto 0);
    signal grp_fu_989_p10 : STD_LOGIC_VECTOR (61 downto 0);

    component houghTransform_muncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (169 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component houghTransform_muocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_mupcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_muqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component houghTransform_murcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component houghTransform_musc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;


    component houghTransform_mutde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (91 downto 0) );
    end component;


    component houghTransform_muudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (108 downto 0) );
    end component;


    component houghTransform_muvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (76 downto 0) );
    end component;


    component houghTransform_muwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component houghTransform_muxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component houghTransform_muyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component houghTransform_muzec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (61 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (124 downto 0) );
    end component;


    component generic_sincos_hlcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component generic_sincos_hldEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component generic_sincos_hleOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component generic_sincos_hlfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component generic_sincos_hlg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component generic_sincos_hlhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component generic_sincos_hlibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component generic_sincos_hljbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component generic_sincos_hlkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component generic_sincos_hllbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component generic_sincos_hlmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_s_U : component generic_sincos_hlcud
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_s_address0,
        ce0 => hls_ref_4oPi_table_s_ce0,
        q0 => hls_ref_4oPi_table_s_q0);

    hls_hotbm_fourth_o_22_U : component generic_sincos_hldEe
    generic map (
        DataWidth => 58,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_22_address0,
        ce0 => hls_hotbm_fourth_o_22_ce0,
        q0 => hls_hotbm_fourth_o_22_q0);

    hls_hotbm_fourth_o_23_U : component generic_sincos_hleOg
    generic map (
        DataWidth => 53,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_23_address0,
        ce0 => hls_hotbm_fourth_o_23_ce0,
        q0 => hls_hotbm_fourth_o_23_q0);

    hls_hotbm_fourth_o_24_U : component generic_sincos_hlfYi
    generic map (
        DataWidth => 44,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_24_address0,
        ce0 => hls_hotbm_fourth_o_24_ce0,
        q0 => hls_hotbm_fourth_o_24_q0);

    hls_hotbm_fourth_o_25_U : component generic_sincos_hlg8j
    generic map (
        DataWidth => 35,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_25_address0,
        ce0 => hls_hotbm_fourth_o_25_ce0,
        q0 => hls_hotbm_fourth_o_25_q0);

    hls_hotbm_fourth_o_26_U : component generic_sincos_hlhbi
    generic map (
        DataWidth => 27,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_26_address0,
        ce0 => hls_hotbm_fourth_o_26_ce0,
        q0 => hls_hotbm_fourth_o_26_q0);

    hls_hotbm_fourth_o_9_U : component generic_sincos_hlibs
    generic map (
        DataWidth => 59,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_9_address0,
        ce0 => hls_hotbm_fourth_o_9_ce0,
        q0 => hls_hotbm_fourth_o_9_q0);

    hls_hotbm_fourth_o_15_U : component generic_sincos_hljbC
    generic map (
        DataWidth => 51,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_15_address0,
        ce0 => hls_hotbm_fourth_o_15_ce0,
        q0 => hls_hotbm_fourth_o_15_q0);

    hls_hotbm_fourth_o_16_U : component generic_sincos_hlkbM
    generic map (
        DataWidth => 43,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_16_address0,
        ce0 => hls_hotbm_fourth_o_16_ce0,
        q0 => hls_hotbm_fourth_o_16_q0);

    hls_hotbm_fourth_o_17_U : component generic_sincos_hllbW
    generic map (
        DataWidth => 33,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_17_address0,
        ce0 => hls_hotbm_fourth_o_17_ce0,
        q0 => hls_hotbm_fourth_o_17_q0);

    hls_hotbm_fourth_o_18_U : component generic_sincos_hlmb6
    generic map (
        DataWidth => 23,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_18_address0,
        ce0 => hls_hotbm_fourth_o_18_ce0,
        q0 => hls_hotbm_fourth_o_18_q0);

    houghTransform_muncg_U4 : component houghTransform_muncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 170,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_481_p0,
        din1 => grp_fu_481_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_481_p2);

    houghTransform_muocq_U5 : component houghTransform_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_122_fu_701_p3,
        dout => tmp_55_fu_707_p18);

    houghTransform_muocq_U6 : component houghTransform_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_122_fu_701_p3,
        dout => cos_results_sign_V_fu_745_p18);

    houghTransform_mupcA_U7 : component houghTransform_mupcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_100_reg_2188,
        dout => tmp_57_fu_833_p10);

    houghTransform_muqcK_U8 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_857_p0,
        din1 => grp_fu_857_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_857_p2);

    houghTransform_muqcK_U9 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_882_p0,
        din1 => grp_fu_882_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_882_p2);

    houghTransform_muqcK_U10 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_887_p0,
        din1 => grp_fu_887_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_887_p2);

    houghTransform_murcU_U11 : component houghTransform_murcU
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 44,
        din1_WIDTH => 49,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_899_p0,
        din1 => grp_fu_899_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_899_p2);

    houghTransform_musc4_U12 : component houghTransform_musc4
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 51,
        din1_WIDTH => 56,
        dout_WIDTH => 107)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_46_reg_2347,
        din1 => grp_fu_911_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_911_p2);

    houghTransform_mutde_U13 : component houghTransform_mutde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 43,
        din1_WIDTH => 49,
        dout_WIDTH => 92)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_48_reg_2352,
        din1 => grp_fu_923_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_923_p2);

    houghTransform_muudo_U14 : component houghTransform_muudo
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 56,
        dout_WIDTH => 109)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_37_reg_2392,
        din1 => grp_fu_935_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_935_p2);

    houghTransform_muvdy_U15 : component houghTransform_muvdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 42,
        dout_WIDTH => 77)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_41_reg_2439,
        din1 => grp_fu_977_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_977_p2);

    houghTransform_muwdI_U16 : component houghTransform_muwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 27,
        din1_WIDTH => 35,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_43_reg_2444,
        din1 => grp_fu_989_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_989_p2);

    houghTransform_muxdS_U17 : component houghTransform_muxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 42,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hls_hotbm_fourth_o_50_reg_2454,
        din1 => grp_fu_1021_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1021_p2);

    houghTransform_muyd2_U18 : component houghTransform_muyd2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 23,
        din1_WIDTH => 35,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1033_p0,
        din1 => grp_fu_1033_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1033_p2);

    houghTransform_muzec_U19 : component houghTransform_muzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 62,
        dout_WIDTH => 125)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1191_p0,
        din1 => grp_fu_1191_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_V_reg_2251 <= p_Val2_64_fu_670_p3(62 downto 56);
                not_or_cond2_reg_2278 <= not_or_cond2_fu_809_p2;
                or_cond_69_reg_2267 <= or_cond_69_fu_783_p2;
                p_Result_104_reg_2284 <= p_Result_104_fu_827_p2;
                p_Result_s_70_reg_2273 <= p_Result_s_70_fu_798_p3;
                p_Val2_65_reg_2256 <= p_Val2_65_fu_687_p1;
                tmp_57_reg_2289 <= tmp_57_fu_833_p10;
                tmp_i1_reg_2262 <= p_Val2_64_fu_670_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Mx_V_reg_2215 <= p_Val2_63_fu_595_p2(123 downto 61);
                isNeg_reg_2228 <= Ex_V_fu_613_p2(10 downto 10);
                rhs_V_2_reg_2222 <= rhs_V_2_fu_619_p1;
                tmp_46_reg_2245 <= tmp_46_fu_642_p2;
                tmp_57_i_reg_2234 <= tmp_57_i_fu_631_p2;
                tmp_s_reg_2239 <= tmp_s_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Mx_zeros_V_reg_2209 <= Mx_zeros_V_fu_576_p1;
                p_Val2_61_reg_2204 <= p_Val2_61_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    OP1_V_reg_2295(48 downto 0) <= OP1_V_fu_854_p1(48 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_2129 <= closepath_fu_412_p2;
                expv_op_reg_2136 <= expv_op_fu_418_p2;
                loc_V_6_reg_2123 <= loc_V_6_fu_408_p1;
                loc_V_reg_2116 <= p_Val2_s_fu_386_p1(62 downto 52);
                sin_results_sign_V_reg_2110 <= p_Val2_s_fu_386_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                hls_hotbm_fourth_o_37_reg_2392 <= hls_hotbm_fourth_o_23_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                hls_hotbm_fourth_o_39_reg_2342 <= hls_hotbm_fourth_o_24_q0;
                hls_hotbm_fourth_o_46_reg_2347 <= hls_hotbm_fourth_o_15_q0;
                hls_hotbm_fourth_o_48_reg_2352 <= hls_hotbm_fourth_o_16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                hls_hotbm_fourth_o_41_reg_2439 <= hls_hotbm_fourth_o_25_q0;
                hls_hotbm_fourth_o_43_reg_2444 <= hls_hotbm_fourth_o_26_q0;
                hls_hotbm_fourth_o_50_reg_2454 <= hls_hotbm_fourth_o_17_q0;
                hls_hotbm_fourth_o_52_reg_2459 <= hls_hotbm_fourth_o_18_q0;
                tmp_64_i_reg_2427 <= grp_fu_882_p2(97 downto 56);
                tmp_66_i_reg_2433 <= grp_fu_887_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                newSel6_reg_2799 <= newSel6_fu_1732_p3;
                newexp_1_reg_2815 <= newexp_1_fu_1793_p2;
                or_cond3_reg_2810 <= or_cond3_fu_1760_p2;
                or_cond_reg_2793 <= or_cond_fu_1726_p2;
                sel_tmp6_i_reg_2787 <= sel_tmp6_i_fu_1721_p2;
                shift_2_3_i_reg_2782 <= shift_2_3_i_fu_1701_p2;
                tmp_65_2_i1_reg_2804 <= tmp_65_2_i1_fu_1741_p2;
                tmp_65_2_i_reg_2776 <= tmp_65_2_i_fu_1696_p2;
                tmp_714_reg_2820 <= newexp_1_fu_1793_p2(31 downto 31);
                tmp_i3_i_reg_2771 <= tmp_i3_i_fu_1681_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                p_Result_16_1_i7_reg_2625 <= grp_fu_1191_p2(109 downto 94);
                p_Result_16_1_i_reg_2605 <= p_Val2_72_fu_1200_p2(46 downto 31);
                p_Result_16_2_i1_reg_2630 <= grp_fu_1191_p2(93 downto 78);
                p_Result_16_2_i_reg_2610 <= p_Val2_72_fu_1200_p2(30 downto 15);
                p_Result_1_i4_reg_2620 <= grp_fu_1191_p2(124 downto 110);
                p_Result_1_i_reg_2600 <= p_Val2_72_fu_1200_p2(62 downto 47);
                p_Result_i2_reg_2635 <= grp_fu_1191_p2(77 downto 63);
                p_Val2_72_reg_2589 <= p_Val2_72_fu_1200_p2;
                tmp_523_reg_2594 <= grp_fu_1191_p2(124 downto 63);
                tmp_705_reg_2615 <= tmp_705_fu_1246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_100_reg_2188 <= p_Val2_100_fu_512_p3;
                p_Val2_i_reg_2199 <= p_Val2_i_fu_522_p2;
                tmp_701_reg_2194 <= tmp_701_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                p_Val2_101_reg_2825 <= p_Val2_101_fu_1902_p3;
                p_Val2_102_reg_2830 <= p_Val2_102_fu_1991_p3;
                ret_V_32_reg_2841 <= ret_V_32_fu_2018_p3;
                ret_V_34_reg_2846 <= ret_V_34_fu_2033_p3;
                tmp_56_reg_2835 <= tmp_56_fu_2014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                p_Val2_13_reg_2549 <= p_Val2_13_fu_1098_p2;
                tmp_11_i_reg_2534 <= grp_fu_989_p2(61 downto 32);
                tmp_17_i_reg_2539 <= grp_fu_1021_p2(74 downto 39);
                tmp_522_reg_2544 <= grp_fu_1033_p2(57 downto 32);
                tmp_9_i_reg_2529 <= grp_fu_977_p2(76 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_Val2_20_i_reg_2574 <= p_Val2_20_i_fu_1179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_59_reg_2177 <= grp_fu_481_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Val2_69_reg_2554 <= hls_hotbm_fourth_o_22_q0;
                r_V_reg_2569 <= r_V_fu_1150_p2;
                tmp60_reg_2564 <= tmp60_fu_1133_p2;
                tmp_5_i_reg_2559 <= grp_fu_935_p2(108 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Val2_71_reg_2489 <= hls_hotbm_fourth_o_9_q0;
                tmp_13_i_reg_2494 <= grp_fu_911_p2(106 downto 53);
                tmp_15_i_reg_2499 <= grp_fu_923_p2(91 downto 46);
                tmp_521_reg_2464 <= grp_fu_899_p2(92 downto 46);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_2156 <= r_V_7_fu_452_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                sel_tmp6_i1_reg_2764 <= sel_tmp6_i1_fu_1646_p2;
                shift_2_1_i1_reg_2742 <= shift_2_1_i1_fu_1612_p2;
                shift_2_1_i_reg_2706 <= shift_2_1_i_fu_1546_p2;
                shift_2_2_i1_reg_2758 <= shift_2_2_i1_fu_1630_p2;
                tmp_43_i1_reg_2735 <= tmp_43_i1_fu_1607_p2;
                tmp_43_i_reg_2698 <= tmp_43_i_fu_1541_p2;
                tmp_65_1_i1_reg_2747 <= tmp_65_1_i1_fu_1620_p2;
                tmp_65_1_i_reg_2712 <= tmp_65_1_i_fu_1554_p2;
                tmp_66_1_i1_reg_2753 <= tmp_66_1_i1_fu_1625_p2;
                tmp_66_1_i_reg_2718 <= tmp_66_1_i_fu_1559_p2;
                tmp_66_2_i_reg_2724 <= tmp_66_2_i_fu_1564_p2;
                tmp_i2_i_68_reg_2692 <= tmp_i2_i_68_fu_1533_p3;
                tmp_i3_i1_reg_2729 <= tmp_i3_i1_fu_1599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                table_256_V_reg_2151 <= hls_ref_4oPi_table_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_42_i1_reg_2681 <= tmp_42_i1_fu_1493_p2;
                tmp_42_i_reg_2661 <= tmp_42_i_fu_1411_p2;
                tmp_46_i_reg_2687 <= tmp_46_i_fu_1499_p2;
                tmp_i1_i1_reg_2667 <= tmp_i1_i1_fu_1464_p3;
                tmp_i1_i_reg_2654 <= tmp_i1_i_fu_1400_p3;
                tmp_i2_i1_reg_2674 <= tmp_i2_i1_fu_1482_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_45_reg_2171 <= tmp_45_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (closepath_reg_2129 = ap_const_lv1_0))) then
                tmp_51_i_reg_2183 <= grp_fu_481_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_62_i_reg_2302 <= grp_fu_857_p2(97 downto 49);
                    tmp_67_i_reg_2309(6 downto 0) <= tmp_67_i_fu_873_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_700_reg_2146 <= tmp_700_fu_445_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_i_i2_reg_2640 <= tmp_i_i2_fu_1319_p3;
                tmp_i_i_reg_2647 <= tmp_i_i_fu_1360_p3;
            end if;
        end if;
    end process;
    OP1_V_reg_2295(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_67_i_reg_2309(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_613_p2 <= std_logic_vector(unsigned(storemerge_i_fu_585_p3) - unsigned(tmp_55_i_fu_610_p1));
    Mx_zeros_V_fu_576_p1 <= tmp_i4_i_fu_568_p3(6 - 1 downto 0);
    OP1_V_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_reg_2262),98));
    OP2_V_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_i_reg_2302),98));
    addr_V_fu_424_p3 <= 
        ap_const_lv11_4A when (closepath_reg_2129(0) = '1') else 
        expv_op_reg_2136;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= s_out_fu_2094_p1;
    ap_return_1 <= c_out_fu_2090_p1;
    c_out_fu_2090_p1 <= c_write_assign_in_fu_2083_p3;
    c_write_assign_in_fu_2083_p3 <= 
        p_Result_124_fu_2068_p4 when (tmp_57_reg_2289(0) = '1') else 
        p_Result_123_fu_2060_p4;
    closepath_fu_412_p2 <= "1" when (unsigned(loc_V_fu_398_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    expv_op_fu_418_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_398_p4));
    grp_fu_1021_p1 <= grp_fu_1021_p10(42 - 1 downto 0);
    grp_fu_1021_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_i_reg_2427),75));
    grp_fu_1033_p0 <= grp_fu_1033_p00(23 - 1 downto 0);
    grp_fu_1033_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_52_reg_2459),58));
    grp_fu_1033_p1 <= grp_fu_1033_p10(35 - 1 downto 0);
    grp_fu_1033_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_i_reg_2433),58));
    grp_fu_1191_p0 <= grp_fu_1191_p00(63 - 1 downto 0);
    grp_fu_1191_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_2215),125));
    grp_fu_1191_p1 <= grp_fu_1191_p10(62 - 1 downto 0);
    grp_fu_1191_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_2569),125));
    grp_fu_481_p0 <= grp_fu_481_p00(53 - 1 downto 0);
    grp_fu_481_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_108_fu_467_p3),223));
    grp_fu_481_p1 <= grp_fu_481_p10(170 - 1 downto 0);
    grp_fu_481_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_2156),223));
    grp_fu_857_p0 <= OP1_V_fu_854_p1(49 - 1 downto 0);
    grp_fu_857_p1 <= OP1_V_fu_854_p1(49 - 1 downto 0);
    grp_fu_882_p0 <= OP1_V_reg_2295(49 - 1 downto 0);
    grp_fu_882_p1 <= OP2_V_fu_879_p1(49 - 1 downto 0);
    grp_fu_887_p0 <= OP2_V_fu_879_p1(49 - 1 downto 0);
    grp_fu_887_p1 <= OP2_V_fu_879_p1(49 - 1 downto 0);
    grp_fu_899_p0 <= grp_fu_899_p00(44 - 1 downto 0);
    grp_fu_899_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_39_reg_2342),93));
    grp_fu_899_p1 <= grp_fu_899_p10(49 - 1 downto 0);
    grp_fu_899_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_i_reg_2302),93));
    grp_fu_911_p1 <= grp_fu_911_p10(56 - 1 downto 0);
    grp_fu_911_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_65_reg_2256),107));
    grp_fu_923_p1 <= grp_fu_923_p10(49 - 1 downto 0);
    grp_fu_923_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_i_reg_2302),92));
    grp_fu_935_p1 <= grp_fu_935_p10(56 - 1 downto 0);
    grp_fu_935_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_65_reg_2256),109));
    grp_fu_977_p1 <= grp_fu_977_p10(42 - 1 downto 0);
    grp_fu_977_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_i_reg_2427),77));
    grp_fu_989_p1 <= grp_fu_989_p10(35 - 1 downto 0);
    grp_fu_989_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_i_reg_2433),62));
    hls_hotbm_fourth_o_15_address0 <= tmp_67_i_fu_873_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_15_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_15_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_16_address0 <= tmp_67_i_fu_873_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_16_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_16_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_17_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_17_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_17_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_18_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_18_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_18_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_22_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_22_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hls_hotbm_fourth_o_22_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_23_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_23_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            hls_hotbm_fourth_o_23_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_24_address0 <= tmp_67_i_fu_873_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_24_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_24_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_25_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_25_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_25_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_26_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_26_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_26_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_9_address0 <= tmp_67_i_reg_2309(7 - 1 downto 0);

    hls_hotbm_fourth_o_9_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            hls_hotbm_fourth_o_9_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_ref_4oPi_table_s_address0 <= tmp_i2_i_fu_440_p1(4 - 1 downto 0);

    hls_ref_4oPi_table_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_6_fu_408_p1 <= p_Val2_s_fu_386_p1(52 - 1 downto 0);
    loc_V_fu_398_p4 <= p_Val2_s_fu_386_p1(62 downto 52);
    newSel1_fu_1765_p3 <= 
        shift_2_3_i1_fu_1746_p2 when (sel_tmp6_i1_reg_2764(0) = '1') else 
        shift_2_1_i1_reg_2742;
    newSel2_fu_1771_p3 <= 
        shift_2_2_i1_reg_2758 when (tmp_43_i1_reg_2735(0) = '1') else 
        tmp_i_i_reg_2647;
    newSel4_fu_1776_p3 <= 
        newSel1_fu_1765_p3 when (or_cond3_fu_1760_p2(0) = '1') else 
        newSel2_fu_1771_p3;
    newSel5_fu_1815_p3 <= 
        shift_2_3_i_reg_2782 when (sel_tmp6_i_reg_2787(0) = '1') else 
        shift_2_1_i_reg_2706;
    newSel6_fu_1732_p3 <= 
        shift_2_2_i_fu_1689_p2 when (tmp_43_i_reg_2698(0) = '1') else 
        tmp_i_i2_reg_2640;
    newSel7_fu_1820_p3 <= 
        newSel5_fu_1815_p3 when (or_cond_reg_2793(0) = '1') else 
        newSel6_reg_2799;
    newexp_1_fu_1793_p2 <= std_logic_vector(signed(tmp_44_i_cast_fu_1789_p1) - signed(newSel4_fu_1776_p3));
    newexp_fu_1826_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF) - unsigned(newSel7_fu_1820_p3));
    not_or_cond2_demorga_fu_805_p2 <= (tmp_s_reg_2239 and tmp_45_reg_2171);
    not_or_cond2_fu_809_p2 <= (not_or_cond2_demorga_fu_805_p2 xor ap_const_lv1_1);
    not_or_cond_fu_815_p2 <= (or_cond_69_fu_783_p2 xor ap_const_lv1_1);
    not_tmp_s_fu_787_p2 <= (tmp_46_reg_2245 xor ap_const_lv1_1);
    or_cond3_fu_1760_p2 <= (sel_tmp6_i1_reg_2764 or sel_tmp3_i1_fu_1755_p2);
    or_cond_69_fu_783_p2 <= (tmp_s_reg_2239 and tmp_45_reg_2171);
    or_cond_fu_1726_p2 <= (sel_tmp6_i_fu_1721_p2 or sel_tmp3_i_fu_1712_p2);
    or_cond_i_fu_1926_p2 <= (tmp_714_reg_2820 or tmp_46_i_reg_2687);
    out_exp_V_1_fu_1999_p3 <= 
        ap_const_lv11_0 when (or_cond_i_fu_1926_p2(0) = '1') else 
        tmp_715_fu_1930_p1;
    out_exp_V_fu_1910_p3 <= 
        ap_const_lv11_0 when (tmp_706_fu_1832_p3(0) = '1') else 
        tmp_707_fu_1840_p1;
    p_Result_104_fu_827_p2 <= (tmp66_fu_821_p2 and cos_results_sign_V_fu_745_p18);
    p_Result_108_fu_467_p3 <= (ap_const_lv1_1 & loc_V_6_reg_2123);
    p_Result_109_fu_542_p3 <= (p_Result_i3_i_fu_532_p4 & ap_const_lv1_1);
    
    p_Result_110_fu_550_p4_proc : process(p_Result_109_fu_542_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_110_fu_550_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_109_fu_542_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_110_fu_550_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_110_fu_550_p4_i) := p_Result_109_fu_542_p3(62-1-p_Result_110_fu_550_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_110_fu_550_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_111_fu_560_p3 <= (ap_const_lv2_3 & p_Result_110_fu_550_p4);
    p_Result_112_fu_1659_p5 <= (tmp_3_i_fu_1652_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_113_fu_1309_p4_proc : process(p_Val2_73_fu_1297_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_113_fu_1309_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_73_fu_1297_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_113_fu_1309_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_113_fu_1309_p4_i) := p_Val2_73_fu_1297_p5(32-1-p_Result_113_fu_1309_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_113_fu_1309_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_114_fu_1390_p4_proc : process(p_Val2_74_fu_1378_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_114_fu_1390_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_74_fu_1378_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_114_fu_1390_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_114_fu_1390_p4_i) := p_Val2_74_fu_1378_p5(32-1-p_Result_114_fu_1390_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_114_fu_1390_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_115_fu_1523_p4_proc : process(p_Val2_75_fu_1511_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_115_fu_1523_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_75_fu_1511_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_115_fu_1523_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_115_fu_1523_p4_i) := p_Val2_75_fu_1511_p5(32-1-p_Result_115_fu_1523_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_115_fu_1523_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_116_fu_1671_p4_proc : process(p_Result_112_fu_1659_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_116_fu_1671_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_112_fu_1659_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_116_fu_1671_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_116_fu_1671_p4_i) := p_Result_112_fu_1659_p5(32-1-p_Result_116_fu_1671_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_116_fu_1671_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_117_fu_1577_p5 <= (tmp_3_i1_fu_1570_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_118_fu_1350_p4_proc : process(p_Val2_81_fu_1338_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_118_fu_1350_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_81_fu_1338_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_118_fu_1350_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_118_fu_1350_p4_i) := p_Val2_81_fu_1338_p5(32-1-p_Result_118_fu_1350_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_118_fu_1350_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_119_fu_1454_p4_proc : process(p_Val2_82_fu_1423_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_119_fu_1454_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_82_fu_1423_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_119_fu_1454_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_119_fu_1454_p4_i) := p_Val2_82_fu_1423_p5(32-1-p_Result_119_fu_1454_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_119_fu_1454_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_120_fu_1472_p4_proc : process(p_Val2_83_fu_1442_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_120_fu_1472_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_83_fu_1442_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_120_fu_1472_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_120_fu_1472_p4_i) := p_Val2_83_fu_1442_p5(32-1-p_Result_120_fu_1472_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_120_fu_1472_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_121_fu_1589_p4_proc : process(p_Result_117_fu_1577_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_121_fu_1589_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_117_fu_1577_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_121_fu_1589_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_121_fu_1589_p4_i) := p_Result_117_fu_1577_p5(32-1-p_Result_121_fu_1589_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_121_fu_1589_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_122_fu_701_p3 <= (sin_results_sign_V_reg_2110 & p_Val2_100_reg_2188);
    p_Result_123_fu_2060_p4 <= ((p_Result_104_reg_2284 & ret_V_34_reg_2846) & ret_V_35_fu_2054_p3);
    p_Result_124_fu_2068_p4 <= ((p_Result_s_70_reg_2273 & ret_V_32_reg_2841) & ret_V_33_fu_2048_p3);
    p_Result_3_cast_fu_2007_p3 <= 
        ap_const_lv11_7FF when (not_or_cond2_reg_2278(0) = '1') else 
        ap_const_lv11_0;
    p_Result_4_cast_fu_2041_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond2_reg_2278(0) = '1') else 
        ap_const_lv52_0;
    p_Result_5_fu_2026_p3 <= 
        ap_const_lv11_3FF when (or_cond_69_reg_2267(0) = '1') else 
        ap_const_lv11_7FF;
    p_Result_i3_i_fu_532_p4 <= p_Val2_61_fu_527_p3(123 downto 63);
    p_Result_i_i_fu_430_p4 <= addr_V_fu_424_p3(10 downto 7);
    p_Result_s_70_fu_798_p3 <= 
        sin_results_sign_V_reg_2110 when (or_cond_69_fu_783_p2(0) = '1') else 
        p_Result_s_fu_792_p2;
    p_Result_s_fu_792_p2 <= (tmp_55_fu_707_p18 and not_tmp_s_fu_787_p2);
    p_Val2_100_fu_512_p3 <= 
        ap_const_lv3_0 when (closepath_reg_2129(0) = '1') else 
        tmp_51_i_reg_2183;
    p_Val2_101_fu_1902_p3 <= 
        ap_const_lv52_0 when (tmp_706_fu_1832_p3(0) = '1') else 
        tmp_526_fu_1895_p3;
    p_Val2_102_fu_1991_p3 <= 
        ap_const_lv52_0 when (or_cond_i_fu_1926_p2(0) = '1') else 
        tmp_529_fu_1984_p3;
    p_Val2_11_fu_1059_p3 <= (p_Val2_71_reg_2489 & ap_const_lv3_0);
    p_Val2_12_fu_1089_p2 <= std_logic_vector(signed(tmp_72_i_cast_fu_1086_p1) + signed(p_Val2_11_fu_1059_p3));
    p_Val2_13_fu_1098_p2 <= std_logic_vector(signed(tmp_74_i_cast_fu_1095_p1) + signed(p_Val2_12_fu_1089_p2));
    p_Val2_14_fu_1142_p2 <= std_logic_vector(signed(tmp_76_i_cast_fu_1139_p1) + signed(p_Val2_13_reg_2549));
        p_Val2_20_i_cast_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_i_reg_2574),63));

    p_Val2_20_i_fu_1179_p2 <= std_logic_vector(unsigned(tmp_fu_1170_p2) + unsigned(tmp62_cast_fu_1176_p1));
    p_Val2_61_fu_527_p3 <= 
        p_Val2_i_reg_2199 when (tmp_701_reg_2194(0) = '1') else 
        p_Val2_59_reg_2177;
    p_Val2_63_fu_595_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_61_reg_2204),to_integer(unsigned('0' & tmp_52_i_fu_592_p1(31-1 downto 0)))));
    p_Val2_64_fu_670_p3 <= 
        tmp_59_i_fu_660_p2 when (isNeg_reg_2228(0) = '1') else 
        tmp_60_i_fu_665_p2;
    p_Val2_65_fu_687_p1 <= p_Val2_64_fu_670_p3(56 - 1 downto 0);
    p_Val2_70_fu_1156_p3 <= (p_Val2_69_reg_2554 & ap_const_lv3_0);
    p_Val2_72_fu_1200_p2 <= std_logic_vector(signed(ap_const_lv63_4000000000000000) - signed(p_Val2_20_i_cast_fu_1197_p1));
    p_Val2_73_fu_1297_p5 <= (tmp_i_67_fu_1290_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_74_fu_1378_p5 <= (tmp_1_i_fu_1371_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_75_fu_1511_p5 <= (tmp_2_i_fu_1504_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_80_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_523_reg_2594),63));
    p_Val2_81_fu_1338_p5 <= (tmp_i5_fu_1334_p1 & ap_const_lv32_0(14 downto 0));
    p_Val2_82_fu_1423_p5 <= (tmp_1_i8_fu_1416_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_83_fu_1442_p5 <= (tmp_2_i1_fu_1435_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_87_cast_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_70_fu_1156_p3),62));
        p_Val2_88_cast_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_reg_2559),62));

        p_Val2_90_cast_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_reg_2529),39));

    p_Val2_i_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_59_reg_2177));
    p_Val2_s_fu_386_p1 <= t_in;
    r_V_7_fu_452_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_2151),to_integer(unsigned('0' & tmp_45_i_i_fu_449_p1(31-1 downto 0)))));
    r_V_fu_1150_p2 <= std_logic_vector(unsigned(tmp_78_i_cast_fu_1147_p1) + unsigned(p_Val2_14_fu_1142_p2));
    ret_V_32_fu_2018_p3 <= 
        p_Result_3_cast_fu_2007_p3 when (tmp_56_fu_2014_p2(0) = '1') else 
        out_exp_V_1_fu_1999_p3;
    ret_V_33_fu_2048_p3 <= 
        p_Result_4_cast_fu_2041_p3 when (tmp_56_reg_2835(0) = '1') else 
        p_Val2_102_reg_2830;
    ret_V_34_fu_2033_p3 <= 
        p_Result_5_fu_2026_p3 when (tmp_56_fu_2014_p2(0) = '1') else 
        out_exp_V_fu_1910_p3;
    ret_V_35_fu_2054_p3 <= 
        p_Result_4_cast_fu_2041_p3 when (tmp_56_reg_2835(0) = '1') else 
        p_Val2_101_reg_2825;
        rhs_V_2_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_613_p2),12));

    s_out_fu_2094_p1 <= s_write_assign_in_fu_2076_p3;
    s_write_assign_in_fu_2076_p3 <= 
        p_Result_123_fu_2060_p4 when (tmp_57_reg_2289(0) = '1') else 
        p_Result_124_fu_2068_p4;
    sel_tmp2_i1_fu_1750_p2 <= (tmp_66_1_i1_reg_2753 xor ap_const_lv1_1);
    sel_tmp2_i_fu_1707_p2 <= (tmp_66_1_i_reg_2718 xor ap_const_lv1_1);
    sel_tmp3_i1_fu_1755_p2 <= (tmp_43_i1_reg_2735 and sel_tmp2_i1_fu_1750_p2);
    sel_tmp3_i_fu_1712_p2 <= (tmp_43_i_reg_2698 and sel_tmp2_i_fu_1707_p2);
    sel_tmp6_i1_fu_1646_p2 <= (tmp63_fu_1640_p2 and tmp_43_i1_fu_1607_p2);
    sel_tmp6_i_fu_1721_p2 <= (tmp61_fu_1717_p2 and tmp_43_i_reg_2698);
        sh_assign_3_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_647_p3),32));

    sh_assign_fu_647_p3 <= 
        tmp_57_i_reg_2234 when (isNeg_reg_2228(0) = '1') else 
        rhs_V_2_reg_2222;
    shift_2_1_i1_fu_1612_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i1_i1_reg_2667));
    shift_2_1_i_fu_1546_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i1_i_reg_2654));
    shift_2_2_i1_fu_1630_p2 <= std_logic_vector(unsigned(shift_2_1_i1_fu_1612_p2) + unsigned(tmp_i2_i1_reg_2674));
    shift_2_2_i_fu_1689_p2 <= std_logic_vector(unsigned(shift_2_1_i_reg_2706) + unsigned(tmp_i2_i_68_reg_2692));
    shift_2_3_i1_fu_1746_p2 <= std_logic_vector(unsigned(shift_2_2_i1_reg_2758) + unsigned(tmp_i3_i1_reg_2729));
    shift_2_3_i_fu_1701_p2 <= std_logic_vector(unsigned(shift_2_2_i_fu_1689_p2) + unsigned(tmp_i3_i_fu_1681_p3));
    storemerge_i_fu_585_p3 <= 
        tmp_i_fu_580_p2 when (closepath_reg_2129(0) = '1') else 
        ap_const_lv11_0;
    tmp59_fu_1123_p2 <= std_logic_vector(signed(tmp_69_i_cast_fu_1120_p1) + signed(p_Val2_90_cast_fu_1117_p1));
    tmp60_fu_1133_p2 <= std_logic_vector(unsigned(tmp_7_i_fu_1114_p1) + unsigned(tmp63_cast_fu_1129_p1));
    tmp61_fu_1717_p2 <= (tmp_66_1_i_reg_2718 and tmp_66_2_i_reg_2724);
        tmp62_cast_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp60_reg_2564),62));

        tmp63_cast_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp59_fu_1123_p2),48));

    tmp63_fu_1640_p2 <= (tmp_66_1_i1_fu_1625_p2 and tmp_66_2_i1_fu_1635_p2);
    tmp66_fu_821_p2 <= (not_tmp_s_fu_787_p2 and not_or_cond_fu_815_p2);
    tmp_1_i8_fu_1416_p3 <= (p_Result_16_1_i7_reg_2625 & ap_const_lv1_1);
    tmp_1_i_fu_1371_p3 <= (p_Result_16_1_i_reg_2605 & ap_const_lv1_1);
    tmp_2_i1_fu_1435_p3 <= (p_Result_16_2_i1_reg_2630 & ap_const_lv1_1);
    tmp_2_i_fu_1504_p3 <= (p_Result_16_2_i_reg_2610 & ap_const_lv1_1);
    tmp_3_i1_fu_1570_p3 <= (p_Result_i2_reg_2635 & ap_const_lv1_1);
    tmp_3_i_fu_1652_p3 <= (tmp_705_reg_2615 & ap_const_lv1_1);
    tmp_42_i1_fu_1493_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_80_fu_1368_p1),to_integer(unsigned('0' & tmp_i2_fu_1490_p1(31-1 downto 0)))));
    tmp_42_i_fu_1411_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_72_reg_2589),to_integer(unsigned('0' & tmp_i3_fu_1408_p1(31-1 downto 0)))));
    tmp_43_i1_fu_1607_p2 <= "1" when (tmp_i_i_reg_2647 = ap_const_lv32_10) else "0";
    tmp_43_i_fu_1541_p2 <= "1" when (tmp_i_i2_reg_2640 = ap_const_lv32_10) else "0";
        tmp_44_i_cast_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_i_fu_1784_p2),32));

    tmp_44_i_fu_1784_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) + unsigned(rhs_V_2_reg_2222));
    tmp_45_fu_487_p2 <= "1" when (loc_V_6_reg_2123 = ap_const_lv52_0) else "0";
    tmp_45_i_i_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_700_reg_2146),256));
    tmp_46_fu_642_p2 <= "1" when (loc_V_reg_2116 = ap_const_lv11_7FF) else "0";
    tmp_46_i_fu_1499_p2 <= "1" when (tmp_523_reg_2594 = ap_const_lv62_0) else "0";
    tmp_526_fu_1895_p3 <= 
        tmp_710_fu_1863_p3 when (or_cond_reg_2793(0) = '1') else 
        tmp_713_fu_1888_p3;
    tmp_529_fu_1984_p3 <= 
        tmp_718_fu_1952_p3 when (or_cond3_reg_2810(0) = '1') else 
        tmp_721_fu_1977_p3;
    tmp_52_i_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_2209),124));
    tmp_54_fu_1327_p3 <= (p_Result_1_i4_reg_2620 & ap_const_lv1_1);
    tmp_55_i_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_2209),11));
    tmp_56_fu_2014_p2 <= (or_cond_69_reg_2267 or tmp_46_reg_2245);
    tmp_57_i_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_2_fu_619_p1));
    tmp_58_i_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_652_p1),63));
    tmp_59_i_fu_660_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_2215),to_integer(unsigned('0' & tmp_58_i_fu_656_p1(31-1 downto 0)))));
    tmp_60_i_fu_665_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_2215),to_integer(unsigned('0' & tmp_58_i_fu_656_p1(31-1 downto 0)))));
    tmp_62_1_i1_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_i1_reg_2667),63));
    tmp_62_1_i_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_i_reg_2654),63));
    tmp_62_2_i1_fu_1738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_i1_reg_2674),63));
    tmp_62_2_i_fu_1693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_i_68_reg_2692),63));
    tmp_62_3_i1_fu_1918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_i1_reg_2729),63));
    tmp_62_3_i_fu_1807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_i_reg_2771),63));
    tmp_65_1_i1_fu_1620_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i1_reg_2681),to_integer(unsigned('0' & tmp_62_1_i1_fu_1617_p1(31-1 downto 0)))));
    tmp_65_1_i_fu_1554_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i_reg_2661),to_integer(unsigned('0' & tmp_62_1_i_fu_1551_p1(31-1 downto 0)))));
    tmp_65_2_i1_fu_1741_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_1_i1_reg_2747),to_integer(unsigned('0' & tmp_62_2_i1_fu_1738_p1(31-1 downto 0)))));
    tmp_65_2_i_fu_1696_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_1_i_reg_2712),to_integer(unsigned('0' & tmp_62_2_i_fu_1693_p1(31-1 downto 0)))));
    tmp_65_3_i1_fu_1921_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_2_i1_reg_2804),to_integer(unsigned('0' & tmp_62_3_i1_fu_1918_p1(31-1 downto 0)))));
    tmp_65_3_i_fu_1810_p2 <= std_logic_vector(shift_left(unsigned(tmp_65_2_i_reg_2776),to_integer(unsigned('0' & tmp_62_3_i_fu_1807_p1(31-1 downto 0)))));
    tmp_66_1_i1_fu_1625_p2 <= "1" when (tmp_i1_i1_reg_2667 = ap_const_lv32_10) else "0";
    tmp_66_1_i_fu_1559_p2 <= "1" when (tmp_i1_i_reg_2654 = ap_const_lv32_10) else "0";
    tmp_66_2_i1_fu_1635_p2 <= "1" when (tmp_i2_i1_reg_2674 = ap_const_lv32_10) else "0";
    tmp_66_2_i_fu_1564_p2 <= "1" when (tmp_i2_i_68_fu_1533_p3 = ap_const_lv32_10) else "0";
    tmp_67_i_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_reg_2251),32));
        tmp_69_i_cast_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_i_reg_2534),39));

    tmp_700_fu_445_p1 <= addr_V_fu_424_p3(7 - 1 downto 0);
    tmp_701_fu_518_p1 <= p_Val2_100_fu_512_p3(1 - 1 downto 0);
    tmp_705_fu_1246_p1 <= p_Val2_72_fu_1200_p2(15 - 1 downto 0);
    tmp_706_fu_1832_p3 <= newexp_fu_1826_p2(31 downto 31);
    tmp_707_fu_1840_p1 <= newexp_fu_1826_p2(11 - 1 downto 0);
    tmp_708_fu_1844_p4 <= tmp_65_3_i_fu_1810_p2(61 downto 10);
    tmp_709_fu_1854_p4 <= tmp_65_1_i_reg_2712(61 downto 10);
    tmp_710_fu_1863_p3 <= 
        tmp_708_fu_1844_p4 when (sel_tmp6_i_reg_2787(0) = '1') else 
        tmp_709_fu_1854_p4;
    tmp_711_fu_1870_p4 <= tmp_65_2_i_reg_2776(61 downto 10);
    tmp_712_fu_1879_p4 <= tmp_42_i_reg_2661(61 downto 10);
    tmp_713_fu_1888_p3 <= 
        tmp_711_fu_1870_p4 when (tmp_43_i_reg_2698(0) = '1') else 
        tmp_712_fu_1879_p4;
    tmp_715_fu_1930_p1 <= newexp_1_reg_2815(11 - 1 downto 0);
    tmp_716_fu_1933_p4 <= tmp_65_3_i1_fu_1921_p2(61 downto 10);
    tmp_717_fu_1943_p4 <= tmp_65_1_i1_reg_2747(61 downto 10);
    tmp_718_fu_1952_p3 <= 
        tmp_716_fu_1933_p4 when (sel_tmp6_i1_reg_2764(0) = '1') else 
        tmp_717_fu_1943_p4;
    tmp_719_fu_1959_p4 <= tmp_65_2_i1_reg_2804(61 downto 10);
    tmp_720_fu_1968_p4 <= tmp_42_i1_reg_2681(61 downto 10);
    tmp_721_fu_1977_p3 <= 
        tmp_719_fu_1959_p4 when (tmp_43_i1_reg_2735(0) = '1') else 
        tmp_720_fu_1968_p4;
        tmp_72_i_cast_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_i_reg_2494),62));

        tmp_74_i_cast_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_i_reg_2499),62));

        tmp_76_i_cast_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_i_reg_2539),62));

    tmp_78_i_cast_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_522_reg_2544),62));
    tmp_7_i_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_521_reg_2464),48));
    tmp_fu_1170_p2 <= std_logic_vector(signed(p_Val2_88_cast_fu_1167_p1) + signed(p_Val2_87_cast_fu_1163_p1));
    
    tmp_i1_i1_fu_1464_p3_proc : process(p_Result_119_fu_1454_p4)
    begin
        tmp_i1_i1_fu_1464_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_119_fu_1454_p4(i) = '1' then
                tmp_i1_i1_fu_1464_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i1_i_fu_1400_p3_proc : process(p_Result_114_fu_1390_p4)
    begin
        tmp_i1_i_fu_1400_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_114_fu_1390_p4(i) = '1' then
                tmp_i1_i_fu_1400_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i2_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_reg_2647),63));
    
    tmp_i2_i1_fu_1482_p3_proc : process(p_Result_120_fu_1472_p4)
    begin
        tmp_i2_i1_fu_1482_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_120_fu_1472_p4(i) = '1' then
                tmp_i2_i1_fu_1482_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i2_i_68_fu_1533_p3_proc : process(p_Result_115_fu_1523_p4)
    begin
        tmp_i2_i_68_fu_1533_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_115_fu_1523_p4(i) = '1' then
                tmp_i2_i_68_fu_1533_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i2_i_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_430_p4),32));
    tmp_i3_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i2_reg_2640),63));
    
    tmp_i3_i1_fu_1599_p3_proc : process(p_Result_121_fu_1589_p4)
    begin
        tmp_i3_i1_fu_1599_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_121_fu_1589_p4(i) = '1' then
                tmp_i3_i1_fu_1599_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i3_i_fu_1681_p3_proc : process(p_Result_116_fu_1671_p4)
    begin
        tmp_i3_i_fu_1681_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_116_fu_1671_p4(i) = '1' then
                tmp_i3_i_fu_1681_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i4_i_fu_568_p3_proc : process(p_Result_111_fu_560_p3)
    begin
        tmp_i4_i_fu_568_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_111_fu_560_p3(i) = '1' then
                tmp_i4_i_fu_568_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i5_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1327_p3),17));
    tmp_i_67_fu_1290_p3 <= (p_Result_1_i_reg_2600 & ap_const_lv1_1);
    tmp_i_fu_580_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_2116));
    
    tmp_i_i2_fu_1319_p3_proc : process(p_Result_113_fu_1309_p4)
    begin
        tmp_i_i2_fu_1319_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_113_fu_1309_p4(i) = '1' then
                tmp_i_i2_fu_1319_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i_i_fu_1360_p3_proc : process(p_Result_118_fu_1350_p4)
    begin
        tmp_i_i_fu_1360_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_118_fu_1350_p4(i) = '1' then
                tmp_i_i_fu_1360_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_s_fu_637_p2 <= "1" when (loc_V_reg_2116 = ap_const_lv11_0) else "0";
end behav;
