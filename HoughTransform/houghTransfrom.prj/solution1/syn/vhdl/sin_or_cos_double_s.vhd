-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hls_ref_4oPi_table_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_s_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_s_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal hls_hotbm_fourth_o_19_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_19_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_19_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal hls_hotbm_fourth_o_20_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_20_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_20_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_21_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_21_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_21_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_27_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_27_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_27_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_19_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_278_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1096 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_288_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1103 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal expv_op_fu_298_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal expv_op_reg_1116 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_fu_325_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_1126 : STD_LOGIC_VECTOR (6 downto 0);
    signal table_256_V_reg_1131 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_reg_1136 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_reg_1157 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_64_i_reg_1163 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_29_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_29_reg_1168 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_fu_398_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_402_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_i_reg_1179 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_i_fu_407_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_reg_1184 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_11_fu_412_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_11_reg_1189 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_V_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_V_reg_1213 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Ex_V_fu_502_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1220 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_526_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_reg_1230 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_i_reg_1235 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_15_fu_568_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_15_reg_1240 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i1_reg_1245 : STD_LOGIC_VECTOR (48 downto 0);
    signal OP1_V_fu_582_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1250 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_fu_591_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_i_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_i_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_i_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_i_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_94_i_reg_1293 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal hls_hotbm_fourth_o_29_reg_1299 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_31_reg_1304 : STD_LOGIC_VECTOR (43 downto 0);
    signal OP2_V_fu_645_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_96_i_reg_1351 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_98_i_reg_1356 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_19_reg_1361 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_23_i_reg_1366 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_25_i_reg_1371 : STD_LOGIC_VECTOR (47 downto 0);
    signal hls_hotbm_fourth_o_33_reg_1376 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_35_reg_1381 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_22_fu_770_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_22_reg_1406 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1411 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_2_reg_1416 : STD_LOGIC_VECTOR (28 downto 0);
    signal cos_basis_fu_801_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal Mx_V_read_assign_fu_807_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_read_assign_reg_1427 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_3_fu_825_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_3_reg_1432 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal result_V_reg_1447 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_54_cast_fu_870_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_cast_reg_1452 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_scaled_fixed2ieee_fu_260_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_260_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_260_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_260_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_260_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_i2_i_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr_V_fu_304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_310_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_52_i_i_fu_329_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_4_fu_332_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_20_fu_347_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal p_Result_i3_i_fu_417_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_21_fu_427_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_22_fu_435_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_23_fu_445_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_i_fu_453_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_i_fu_481_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_13_fu_484_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_475_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_i_fu_499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_cast_fu_508_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_i_fu_520_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_cast_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_fu_537_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_72_i_fu_541_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_73_i_fu_546_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_14_fu_551_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_585_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_585_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal not_do_cos_i_fu_612_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_648_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_648_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_653_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_665_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_736_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_736_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_748_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_748_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_20_fu_723_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_101_i_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_i_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_21_fu_761_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_i_cast_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_736_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_748_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal cos_basis_fu_801_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_i_cast_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_fu_817_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_i_cast_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_837_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Ex_V_ret_fu_843_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_860_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_864_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_25_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_26_fu_901_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_907_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_945_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_983_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_879_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_1004_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_2_fu_887_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_55_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_1004_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_2_fu_1022_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal not_or_cond_demorgan_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_cast_fu_1055_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_3_fu_897_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_56_fu_1029_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_1037_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_7_fu_1068_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_27_fu_1076_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_fu_1086_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_361_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_665_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_677_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_736_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_736_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_748_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_748_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_837_p10 : STD_LOGIC_VECTOR (125 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (12 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component houghTransform_muibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component houghTransform_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component houghTransform_mukbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_mulbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component houghTransform_mumb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component houghTransform_muncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component houghTransform_muocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component houghTransform_mupcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component houghTransform_muqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doubledEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubleeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doublefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doubleg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doublehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_s_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_s_address0,
        ce0 => hls_ref_4oPi_table_s_ce0,
        q0 => hls_ref_4oPi_table_s_q0);

    hls_hotbm_fourth_o_19_U : component sin_or_cos_doubledEe
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_19_address0,
        ce0 => hls_hotbm_fourth_o_19_ce0,
        q0 => hls_hotbm_fourth_o_19_q0);

    hls_hotbm_fourth_o_20_U : component sin_or_cos_doubleeOg
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_20_address0,
        ce0 => hls_hotbm_fourth_o_20_ce0,
        q0 => hls_hotbm_fourth_o_20_q0);

    hls_hotbm_fourth_o_21_U : component sin_or_cos_doublefYi
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_21_address0,
        ce0 => hls_hotbm_fourth_o_21_ce0,
        q0 => hls_hotbm_fourth_o_21_q0);

    hls_hotbm_fourth_o_27_U : component sin_or_cos_doubleg8j
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_27_address0,
        ce0 => hls_hotbm_fourth_o_27_ce0,
        q0 => hls_hotbm_fourth_o_27_q0);

    hls_hotbm_fourth_o_U : component sin_or_cos_doublehbi
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_address0,
        ce0 => hls_hotbm_fourth_o_ce0,
        q0 => hls_hotbm_fourth_o_q0);

    grp_scaled_fixed2ieee_fu_260 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_260_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_260_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_260_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_260_ap_ready,
        in_V => result_V_reg_1447,
        prescale => tmp_54_cast_reg_1452,
        ap_return => grp_scaled_fixed2ieee_fu_260_ap_return);

    houghTransform_muibs_U4 : component houghTransform_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    houghTransform_mujbC_U5 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_585_p0,
        din1 => grp_fu_585_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p2);

    houghTransform_mukbM_U6 : component houghTransform_mukbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_29_reg_1168,
        dout => tmp_fu_591_p10);

    houghTransform_mujbC_U7 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_648_p0,
        din1 => grp_fu_648_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_648_p2);

    houghTransform_mujbC_U8 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_653_p0,
        din1 => grp_fu_653_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_653_p2);

    houghTransform_mulbW_U9 : component houghTransform_mulbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_665_p0,
        din1 => hls_hotbm_fourth_o_29_reg_1299,
        ce => ap_const_logic_1,
        dout => grp_fu_665_p2);

    houghTransform_mumb6_U10 : component houghTransform_mumb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_677_p0,
        din1 => hls_hotbm_fourth_o_31_reg_1304,
        ce => ap_const_logic_1,
        dout => grp_fu_677_p2);

    houghTransform_muncg_U11 : component houghTransform_muncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_736_p0,
        din1 => grp_fu_736_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_736_p2);

    houghTransform_muocq_U12 : component houghTransform_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 25,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_748_p0,
        din1 => grp_fu_748_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_748_p2);

    houghTransform_mupcA_U13 : component houghTransform_mupcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_3_reg_1432,
        din1 => grp_fu_837_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_837_p2);

    houghTransform_muqcK_U14 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_26_fu_901_p3,
        dout => tmp_3_fu_907_p18);

    houghTransform_muqcK_U15 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_26_fu_901_p3,
        dout => tmp_4_fu_945_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_scaled_fixed2ieee_fu_260_ap_ready)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_scaled_fixed2ieee_fu_260_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= ret_i_i_fu_1086_p1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Ex_V_reg_1220 <= Ex_V_fu_502_p2;
                Mx_V_reg_1213 <= p_Val2_13_fu_484_p2(123 downto 61);
                isNeg_reg_1225 <= Ex_V_fu_502_p2(10 downto 10);
                sh_assign_reg_1230 <= sh_assign_fu_526_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                Mx_V_read_assign_reg_1427 <= Mx_V_read_assign_fu_807_p3;
                cos_basis_reg_1421 <= cos_basis_fu_801_p3;
                r_V_3_reg_1432 <= r_V_3_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Mx_zeros_V_reg_1194 <= Mx_zeros_V_fu_461_p1;
                p_Val2_11_reg_1189 <= p_Val2_11_fu_412_p3;
                tmp_6_reg_1200 <= tmp_6_fu_465_p2;
                tmp_8_reg_1206 <= tmp_8_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    OP1_V_reg_1250(48 downto 0) <= OP1_V_fu_582_p1(48 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_1109 <= closepath_fu_292_p2;
                expv_op_reg_1116 <= expv_op_fu_298_p2;
                loc_V_1_reg_1103 <= loc_V_1_fu_288_p1;
                loc_V_reg_1096 <= p_Val2_s_fu_266_p1(62 downto 52);
                p_Result_19_reg_1090 <= p_Val2_s_fu_266_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                hls_hotbm_fourth_o_29_reg_1299 <= hls_hotbm_fourth_o_20_q0;
                hls_hotbm_fourth_o_31_reg_1304 <= hls_hotbm_fourth_o_21_q0;
                tmp_94_i_reg_1293 <= grp_fu_585_p2(97 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                hls_hotbm_fourth_o_33_reg_1376 <= hls_hotbm_fourth_o_27_q0;
                hls_hotbm_fourth_o_35_reg_1381 <= hls_hotbm_fourth_o_q0;
                p_Val2_19_reg_1361 <= hls_hotbm_fourth_o_19_q0;
                tmp_23_i_reg_1366 <= grp_fu_665_p2(107 downto 52);
                tmp_25_i_reg_1371 <= grp_fu_677_p2(92 downto 45);
                tmp_96_i_reg_1351 <= grp_fu_648_p2(97 downto 56);
                tmp_98_i_reg_1356 <= grp_fu_653_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                not_do_cos_i_reg_1270 <= not_do_cos_i_fu_612_p2;
                tmp_reg_1263 <= tmp_fu_591_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_Result_i_reg_1235 <= p_Val2_14_fu_551_p3(62 downto 56);
                p_Val2_15_reg_1240 <= p_Val2_15_fu_568_p1;
                tmp_i1_reg_1245 <= p_Val2_14_fu_551_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Val2_22_reg_1406 <= p_Val2_22_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_29_reg_1168 <= p_Val2_29_fu_392_p3;
                p_Val2_i_reg_1179 <= p_Val2_i_fu_402_p2;
                tmp_13_reg_1174 <= tmp_13_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_9_reg_1157 <= grp_fu_361_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                result_V_reg_1447 <= grp_fu_837_p2(125 downto 63);
                tmp_54_cast_reg_1452 <= tmp_54_cast_fu_870_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_1136 <= r_V_4_fu_332_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                table_256_V_reg_1131 <= hls_ref_4oPi_table_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_12_reg_1126 <= tmp_12_fu_325_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_1411 <= grp_fu_736_p2(74 downto 38);
                tmp_2_reg_1416 <= grp_fu_748_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (closepath_reg_1109 = ap_const_lv1_0))) then
                tmp_64_i_reg_1163 <= grp_fu_361_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_7_reg_1151 <= tmp_7_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    tmp_99_i_reg_1276(7 downto 0) <= tmp_99_i_fu_629_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (closepath_reg_1109 = ap_const_lv1_1))) then
                tmp_i_reg_1184 <= tmp_i_fu_407_p2;
            end if;
        end if;
    end process;
    OP1_V_reg_1250(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_99_i_reg_1276(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_scaled_fixed2ieee_fu_260_ap_done, ap_CS_fsm_state32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_scaled_fixed2ieee_fu_260_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_502_p2 <= std_logic_vector(unsigned(storemerge_i_fu_475_p3) - unsigned(tmp_68_i_fu_499_p1));
    Mx_V_read_assign_fu_807_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_fu_801_p3(0) = '1') else 
        Mx_V_reg_1213;
    Mx_zeros_V_fu_461_p1 <= tmp_i4_i_fu_453_p3(6 - 1 downto 0);
    OP1_V_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_reg_1245),98));
    OP2_V_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_i_reg_1293),98));
    addr_V_fu_304_p3 <= 
        ap_const_lv11_4A when (closepath_reg_1109(0) = '1') else 
        expv_op_reg_1116;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_scaled_fixed2ieee_fu_260_ap_done, ap_CS_fsm_state32)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_scaled_fixed2ieee_fu_260_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_scaled_fixed2ieee_fu_260_ap_done, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_scaled_fixed2ieee_fu_260_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_scaled_fixed2ieee_fu_260_ap_done, ap_CS_fsm_state32, ret_i_i_fu_1086_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_scaled_fixed2ieee_fu_260_ap_done = ap_const_logic_1))) then 
            ap_return <= ret_i_i_fu_1086_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    closepath_fu_292_p2 <= "1" when (unsigned(loc_V_fu_278_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_801_p0 <= (0=>do_cos, others=>'-');
    cos_basis_fu_801_p3 <= 
        tmp_s_fu_796_p2 when (cos_basis_fu_801_p0(0) = '1') else 
        tmp_reg_1263;
    expv_op_fu_298_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_278_p4));
    grp_fu_361_p0 <= grp_fu_361_p00(170 - 1 downto 0);
    grp_fu_361_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1136),223));
    grp_fu_361_p1 <= grp_fu_361_p10(53 - 1 downto 0);
    grp_fu_361_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_347_p3),223));
    grp_fu_585_p0 <= OP1_V_fu_582_p1(49 - 1 downto 0);
    grp_fu_585_p1 <= OP1_V_fu_582_p1(49 - 1 downto 0);
    grp_fu_648_p0 <= OP2_V_fu_645_p1(49 - 1 downto 0);
    grp_fu_648_p1 <= OP1_V_reg_1250(49 - 1 downto 0);
    grp_fu_653_p0 <= OP2_V_fu_645_p1(49 - 1 downto 0);
    grp_fu_653_p1 <= OP2_V_fu_645_p1(49 - 1 downto 0);
    grp_fu_665_p0 <= grp_fu_665_p00(56 - 1 downto 0);
    grp_fu_665_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_15_reg_1240),108));
    grp_fu_677_p0 <= grp_fu_677_p00(49 - 1 downto 0);
    grp_fu_677_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_i_reg_1293),93));
    grp_fu_736_p0 <= grp_fu_736_p00(42 - 1 downto 0);
    grp_fu_736_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_i_reg_1351),75));
    grp_fu_736_p1 <= grp_fu_736_p10(33 - 1 downto 0);
    grp_fu_736_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_33_reg_1376),75));
    grp_fu_748_p0 <= grp_fu_748_p00(35 - 1 downto 0);
    grp_fu_748_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_i_reg_1356),60));
    grp_fu_748_p1 <= grp_fu_748_p10(25 - 1 downto 0);
    grp_fu_748_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_35_reg_1381),60));
    grp_fu_837_p1 <= grp_fu_837_p10(63 - 1 downto 0);
    grp_fu_837_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_reg_1427),126));
    grp_scaled_fixed2ieee_fu_260_ap_start <= ap_reg_grp_scaled_fixed2ieee_fu_260_ap_start;
    hls_hotbm_fourth_o_19_address0 <= tmp_99_i_reg_1276(8 - 1 downto 0);

    hls_hotbm_fourth_o_19_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_19_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_20_address0 <= tmp_99_i_fu_629_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_20_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hls_hotbm_fourth_o_20_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_21_address0 <= tmp_99_i_fu_629_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_21_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hls_hotbm_fourth_o_21_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_27_address0 <= tmp_99_i_reg_1276(8 - 1 downto 0);

    hls_hotbm_fourth_o_27_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_27_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_address0 <= tmp_99_i_reg_1276(8 - 1 downto 0);

    hls_hotbm_fourth_o_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_ref_4oPi_table_s_address0 <= tmp_i2_i_fu_320_p1(4 - 1 downto 0);

    hls_ref_4oPi_table_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_512_p3 <= Ex_V_fu_502_p2(10 downto 10);
    loc_V_1_fu_288_p1 <= p_Val2_s_fu_266_p1(52 - 1 downto 0);
    loc_V_2_fu_887_p4 <= p_Val2_25_fu_875_p1(62 downto 52);
    loc_V_3_fu_897_p1 <= p_Val2_25_fu_875_p1(52 - 1 downto 0);
    loc_V_fu_278_p4 <= p_Val2_s_fu_266_p1(62 downto 52);
    not_do_cos_i_fu_612_p0 <= (0=>do_cos, others=>'-');
    not_do_cos_i_fu_612_p2 <= (not_do_cos_i_fu_612_p0 xor ap_const_lv1_1);
    not_or_cond_demorgan_fu_1045_p2 <= (tmp_6_reg_1200 and tmp_7_reg_1151);
    not_or_cond_fu_1049_p2 <= (not_or_cond_demorgan_fu_1045_p2 xor ap_const_lv1_1);
    not_tmp_s_fu_1011_p2 <= (tmp_8_reg_1206 xor ap_const_lv1_1);
    or_cond_fu_996_p2 <= (tmp_6_reg_1200 and tmp_7_reg_1151);
    p_Ex_V_ret_fu_843_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1421(0) = '1') else 
        Ex_V_reg_1220;
    p_Result_1_fu_1000_p2 <= (p_Result_19_reg_1090 and not_do_cos_i_reg_1270);
    p_Result_20_fu_347_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1103);
    p_Result_21_fu_427_p3 <= (p_Result_i3_i_fu_417_p4 & ap_const_lv1_1);
    
    p_Result_22_fu_435_p4_proc : process(p_Result_21_fu_427_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_22_fu_435_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_21_fu_427_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_22_fu_435_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_22_fu_435_p4_i) := p_Result_21_fu_427_p3(62-1-p_Result_22_fu_435_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_435_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_23_fu_445_p3 <= (ap_const_lv2_3 & p_Result_22_fu_435_p4);
    p_Result_24_fu_622_p3 <= (sin_basis_fu_618_p2 & p_Result_i_reg_1235);
    p_Result_25_fu_879_p3 <= p_Val2_25_fu_875_p1(63 downto 63);
    p_Result_26_fu_901_p3 <= (p_Result_19_reg_1090 & p_Val2_29_reg_1168);
    p_Result_27_fu_1076_p4 <= ((p_Result_s_56_fu_1029_p3 & ret_V_6_fu_1037_p3) & ret_V_7_fu_1068_p3);
    p_Result_2_fu_1022_p3 <= 
        ap_const_lv11_7FF when (tmp_8_reg_1206(0) = '1') else 
        loc_V_2_fu_887_p4;
    p_Result_3_cast_fu_1055_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond_fu_1049_p2(0) = '1') else 
        ap_const_lv52_0;
    p_Result_i3_i_fu_417_p4 <= p_Val2_11_fu_412_p3(123 downto 63);
    p_Result_i_i_fu_310_p4 <= addr_V_fu_304_p3(10 downto 7);
    p_Result_s_55_fu_1016_p2 <= (p_Result_s_fu_990_p2 and not_tmp_s_fu_1011_p2);
    p_Result_s_56_fu_1029_p3 <= 
        p_Result_1_fu_1000_p2 when (or_cond_fu_996_p2(0) = '1') else 
        p_Result_s_55_fu_1016_p2;
    p_Result_s_fu_990_p2 <= (tmp_5_fu_983_p3 or p_Result_25_fu_879_p3);
    p_Val2_11_fu_412_p3 <= 
        p_Val2_i_reg_1179 when (tmp_13_reg_1174(0) = '1') else 
        p_Val2_9_reg_1157;
    p_Val2_13_fu_484_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_11_reg_1189),to_integer(unsigned('0' & tmp_65_i_fu_481_p1(31-1 downto 0)))));
    p_Val2_14_fu_551_p3 <= 
        tmp_72_i_fu_541_p2 when (isNeg_reg_1225(0) = '1') else 
        tmp_73_i_fu_546_p2;
    p_Val2_15_fu_568_p1 <= p_Val2_14_fu_551_p3(56 - 1 downto 0);
    p_Val2_20_fu_723_p3 <= (p_Val2_19_reg_1361 & ap_const_lv4_0);
    p_Val2_21_fu_761_p2 <= std_logic_vector(signed(tmp_101_i_fu_754_p1) + signed(tmp_102_i_fu_758_p1));
    p_Val2_22_fu_770_p2 <= std_logic_vector(unsigned(p_Val2_21_fu_761_p2) + unsigned(tmp_104_i_cast_fu_767_p1));
    p_Val2_23_fu_817_p2 <= std_logic_vector(unsigned(p_Val2_22_reg_1406) + unsigned(tmp_106_i_cast_fu_814_p1));
    p_Val2_25_fu_875_p1 <= grp_scaled_fixed2ieee_fu_260_ap_return;
    p_Val2_29_fu_392_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1109(0) = '1') else 
        tmp_64_i_reg_1163;
    p_Val2_i_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_9_reg_1157));
    p_Val2_s_fu_266_p1 <= t_in;
    p_cast_cast_fu_1004_p0 <= (0=>do_cos, others=>'-');
    p_cast_cast_fu_1004_p3 <= 
        ap_const_lv11_3FF when (p_cast_cast_fu_1004_p0(0) = '1') else 
        ap_const_lv11_0;
    r_V_3_fu_825_p2 <= std_logic_vector(unsigned(p_Val2_23_fu_817_p2) + unsigned(tmp_108_i_cast_fu_822_p1));
    r_V_4_fu_332_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_1131),to_integer(unsigned('0' & tmp_52_i_i_fu_329_p1(31-1 downto 0)))));
    r_V_fu_864_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_fu_860_p1));
    ret_V_6_fu_1037_p3 <= 
        p_cast_cast_fu_1004_p3 when (or_cond_fu_996_p2(0) = '1') else 
        p_Result_2_fu_1022_p3;
    ret_V_7_fu_1068_p3 <= 
        p_Result_3_cast_fu_1055_p3 when (tmp_9_fu_1063_p2(0) = '1') else 
        loc_V_3_fu_897_p1;
    ret_i_i_fu_1086_p1 <= p_Result_27_fu_1076_p4;
        rhs_V_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_fu_843_p3),12));

        sh_assign_4_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_reg_1230),32));

    sh_assign_fu_526_p3 <= 
        tmp_70_i_fu_520_p2 when (isNeg_fu_512_p3(0) = '1') else 
        sh_cast_fu_508_p1;
        sh_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_502_p2),12));

    sin_basis_fu_618_p2 <= (tmp_reg_1263 xor not_do_cos_i_reg_1270);
    storemerge_i_fu_475_p3 <= 
        tmp_i_reg_1184 when (closepath_reg_1109(0) = '1') else 
        ap_const_lv11_0;
        tmp_101_i_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_fu_723_p3),64));

        tmp_102_i_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_i_reg_1366),64));

        tmp_104_i_cast_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_i_reg_1371),64));

    tmp_106_i_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1411),64));
    tmp_108_i_cast_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1416),64));
    tmp_12_fu_325_p1 <= addr_V_fu_304_p3(7 - 1 downto 0);
    tmp_13_fu_398_p1 <= p_Val2_29_fu_392_p3(1 - 1 downto 0);
    tmp_52_i_i_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1126),256));
        tmp_54_cast_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_864_p2),13));

    tmp_5_fu_983_p3 <= 
        tmp_3_fu_907_p18 when (cos_basis_reg_1421(0) = '1') else 
        tmp_4_fu_945_p18;
    tmp_65_i_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1194),124));
    tmp_68_i_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1194),11));
    tmp_6_fu_465_p2 <= "1" when (loc_V_reg_1096 = ap_const_lv11_0) else "0";
    tmp_70_i_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_cast_fu_508_p1));
    tmp_71_i_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_4_cast_fu_534_p1),63));
    tmp_72_i_fu_541_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1213),to_integer(unsigned('0' & tmp_71_i_fu_537_p1(31-1 downto 0)))));
    tmp_73_i_fu_546_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1213),to_integer(unsigned('0' & tmp_71_i_fu_537_p1(31-1 downto 0)))));
    tmp_7_fu_367_p2 <= "1" when (loc_V_1_reg_1103 = ap_const_lv52_0) else "0";
    tmp_8_fu_470_p2 <= "1" when (loc_V_reg_1096 = ap_const_lv11_7FF) else "0";
    tmp_99_i_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_24_fu_622_p3),32));
    tmp_9_fu_1063_p2 <= (or_cond_fu_996_p2 or tmp_8_reg_1206);
    tmp_i2_i_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_310_p4),32));
    
    tmp_i4_i_fu_453_p3_proc : process(p_Result_23_fu_445_p3)
    begin
        tmp_i4_i_fu_453_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_23_fu_445_p3(i) = '1' then
                tmp_i4_i_fu_453_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_fu_407_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1096));
    tmp_s_fu_796_p2 <= (tmp_reg_1263 xor ap_const_lv1_1);
end behav;
