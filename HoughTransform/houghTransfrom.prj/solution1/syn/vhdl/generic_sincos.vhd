-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_sincos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of generic_sincos is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv63_4000000000000000 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hls_ref_4oPi_table_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_s_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_s_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal hls_hotbm_fourth_o_22_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_22_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_22_q0 : STD_LOGIC_VECTOR (57 downto 0);
    signal hls_hotbm_fourth_o_23_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_23_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_23_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal hls_hotbm_fourth_o_24_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_24_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_24_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_25_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_25_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_25_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_26_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_26_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_26_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal hls_hotbm_fourth_o_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_9_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_9_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal hls_hotbm_fourth_o_15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_15_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_15_q0 : STD_LOGIC_VECTOR (50 downto 0);
    signal hls_hotbm_fourth_o_16_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_16_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_16_q0 : STD_LOGIC_VECTOR (42 downto 0);
    signal hls_hotbm_fourth_o_17_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_17_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_17_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_18_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hls_hotbm_fourth_o_18_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_18_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal sin_results_sign_V_1_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_363_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1371 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_11_fu_373_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_11_reg_1378 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal expv_op_fu_383_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal expv_op_reg_1391 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_79_fu_410_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_reg_1401 : STD_LOGIC_VECTOR (6 downto 0);
    signal table_256_V_reg_1406 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_reg_1411 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_58_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_59_reg_1432 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_64_i_reg_1438 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_91_fu_477_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_91_reg_1443 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_80_fu_483_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_1449 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_487_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_i_reg_1454 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_61_fu_492_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_61_reg_1459 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Mx_zeros_V_fu_541_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1464 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_V_reg_1470 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rhs_V_2_fu_584_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_2_reg_1477 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_reg_1482 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_596_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_6_reg_1488 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1494 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_reg_1506 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_65_fu_652_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_65_reg_1511 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i2_reg_1517 : STD_LOGIC_VECTOR (48 downto 0);
    signal OP1_V_fu_666_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1522 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_75_i_reg_1529 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_80_i_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_i_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP2_V_fu_691_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal hls_hotbm_fourth_o_39_reg_1569 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_46_reg_1574 : STD_LOGIC_VECTOR (50 downto 0);
    signal hls_hotbm_fourth_o_48_reg_1579 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal hls_hotbm_fourth_o_37_reg_1619 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_77_i_reg_1654 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_79_i_reg_1660 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_41_reg_1666 : STD_LOGIC_VECTOR (34 downto 0);
    signal hls_hotbm_fourth_o_43_reg_1671 : STD_LOGIC_VECTOR (26 downto 0);
    signal hls_hotbm_fourth_o_50_reg_1681 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_52_reg_1686 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_71_reg_1691 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_71_reg_1716 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_14_i_reg_1721 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_16_i_reg_1726 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_10_i_reg_1756 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_i_reg_1761 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_18_i_reg_1766 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_72_reg_1771 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_74_fu_910_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_74_reg_1776 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_69_reg_1781 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_6_i_reg_1786 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp2_fu_945_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp2_reg_1791 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_962_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_reg_1796 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_20_i_fu_991_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_20_i_reg_1801 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_73_reg_1816 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal cos_result_V_fu_1022_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal cos_result_V_reg_1821 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sin_result_V_fu_1029_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sin_result_V_reg_1826 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_cast_fu_1033_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_reg_1831 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_cond_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1836 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond2_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond2_reg_1844 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_scaled_fixed2ieee_fu_338_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_338_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_338_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_338_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_338_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_scaled_fixed2ieee_fu_345_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_345_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_345_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_345_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_345_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start : STD_LOGIC := '0';
    signal tmp_i2_i_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr_V_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_395_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_52_i_i_fu_414_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_9_fu_417_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_95_fu_432_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal p_Result_i3_i_fu_497_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_96_fu_507_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_97_fu_515_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_98_fu_525_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_i_fu_533_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_545_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_i_fu_557_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_63_fu_560_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_550_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_i_fu_575_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_fu_578_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_assign_fu_612_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_fu_621_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_72_i_fu_625_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_73_i_fu_630_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_64_fu_635_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_669_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_694_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_694_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_699_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_699_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_711_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_711_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_723_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_735_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_747_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_694_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_699_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_789_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_801_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_723_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (91 downto 0);
    signal grp_fu_833_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_845_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_845_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_789_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_845_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_72_fu_871_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_85_i_cast_fu_898_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_73_fu_901_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_87_i_cast_fu_907_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (108 downto 0);
    signal p_Val2_97_cast_fu_929_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_82_i_cast_fu_932_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp3_fu_935_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp3_cast_fu_941_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_i_fu_926_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_89_i_cast_fu_951_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_75_fu_954_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_91_i_cast_fu_959_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_70_fu_968_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Val2_94_cast_fu_975_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_95_cast_fu_979_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp2_cast_fu_988_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp1_fu_982_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1003_p0 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1003_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1003_p2 : STD_LOGIC_VECTOR (124 downto 0);
    signal p_Val2_20_i_cast_fu_1019_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal not_or_cond2_demorga_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_77_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_78_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_99_fu_1051_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1109_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_100_fu_1061_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1153_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_101_fu_1087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_71_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_cast_fu_1214_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_12_fu_1069_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_5_cast_fu_1233_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_13_fu_1079_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal not_or_cond_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_results_sign_V_1_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_1265_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_14_fu_1095_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_15_fu_1105_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_91_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_31_fu_1272_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_32_fu_1280_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_72_fu_1208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_29_fu_1225_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_30_fu_1240_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_62_fu_1288_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_102_fu_1309_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_103_fu_1319_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_write_assign_in_fu_1337_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_write_assign_in_fu_1329_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_out_fu_1349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_out_fu_1345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1003_p00 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_fu_1003_p10 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_fu_446_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_446_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_711_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_711_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_723_p00 : STD_LOGIC_VECTOR (106 downto 0);
    signal grp_fu_735_p00 : STD_LOGIC_VECTOR (91 downto 0);
    signal grp_fu_747_p00 : STD_LOGIC_VECTOR (108 downto 0);
    signal grp_fu_789_p00 : STD_LOGIC_VECTOR (76 downto 0);
    signal grp_fu_801_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_833_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_845_p00 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_845_p10 : STD_LOGIC_VECTOR (57 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (12 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component houghTransform_muibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component houghTransform_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component houghTransform_muCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component houghTransform_muDeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (50 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;


    component houghTransform_muEe0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (91 downto 0) );
    end component;


    component houghTransform_muFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (108 downto 0) );
    end component;


    component houghTransform_muGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (76 downto 0) );
    end component;


    component houghTransform_muHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component houghTransform_muIfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component houghTransform_muJfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component houghTransform_muKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (61 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (124 downto 0) );
    end component;


    component houghTransform_muqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component houghTransform_mukbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component generic_sincos_hlsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component generic_sincos_hltde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component generic_sincos_hludo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component generic_sincos_hlvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component generic_sincos_hlwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component generic_sincos_hlxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component generic_sincos_hlyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component generic_sincos_hlzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component generic_sincos_hlAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component generic_sincos_hlBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_s_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_s_address0,
        ce0 => hls_ref_4oPi_table_s_ce0,
        q0 => hls_ref_4oPi_table_s_q0);

    hls_hotbm_fourth_o_22_U : component generic_sincos_hlsc4
    generic map (
        DataWidth => 58,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_22_address0,
        ce0 => hls_hotbm_fourth_o_22_ce0,
        q0 => hls_hotbm_fourth_o_22_q0);

    hls_hotbm_fourth_o_23_U : component generic_sincos_hltde
    generic map (
        DataWidth => 53,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_23_address0,
        ce0 => hls_hotbm_fourth_o_23_ce0,
        q0 => hls_hotbm_fourth_o_23_q0);

    hls_hotbm_fourth_o_24_U : component generic_sincos_hludo
    generic map (
        DataWidth => 44,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_24_address0,
        ce0 => hls_hotbm_fourth_o_24_ce0,
        q0 => hls_hotbm_fourth_o_24_q0);

    hls_hotbm_fourth_o_25_U : component generic_sincos_hlvdy
    generic map (
        DataWidth => 35,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_25_address0,
        ce0 => hls_hotbm_fourth_o_25_ce0,
        q0 => hls_hotbm_fourth_o_25_q0);

    hls_hotbm_fourth_o_26_U : component generic_sincos_hlwdI
    generic map (
        DataWidth => 27,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_26_address0,
        ce0 => hls_hotbm_fourth_o_26_ce0,
        q0 => hls_hotbm_fourth_o_26_q0);

    hls_hotbm_fourth_o_9_U : component generic_sincos_hlxdS
    generic map (
        DataWidth => 59,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_9_address0,
        ce0 => hls_hotbm_fourth_o_9_ce0,
        q0 => hls_hotbm_fourth_o_9_q0);

    hls_hotbm_fourth_o_15_U : component generic_sincos_hlyd2
    generic map (
        DataWidth => 51,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_15_address0,
        ce0 => hls_hotbm_fourth_o_15_ce0,
        q0 => hls_hotbm_fourth_o_15_q0);

    hls_hotbm_fourth_o_16_U : component generic_sincos_hlzec
    generic map (
        DataWidth => 43,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_16_address0,
        ce0 => hls_hotbm_fourth_o_16_ce0,
        q0 => hls_hotbm_fourth_o_16_q0);

    hls_hotbm_fourth_o_17_U : component generic_sincos_hlAem
    generic map (
        DataWidth => 33,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_17_address0,
        ce0 => hls_hotbm_fourth_o_17_ce0,
        q0 => hls_hotbm_fourth_o_17_q0);

    hls_hotbm_fourth_o_18_U : component generic_sincos_hlBew
    generic map (
        DataWidth => 23,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_hotbm_fourth_o_18_address0,
        ce0 => hls_hotbm_fourth_o_18_ce0,
        q0 => hls_hotbm_fourth_o_18_q0);

    grp_scaled_fixed2ieee_fu_338 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_338_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_338_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_338_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_338_ap_ready,
        in_V => cos_result_V_reg_1821,
        prescale => ap_const_lv13_0,
        ap_return => grp_scaled_fixed2ieee_fu_338_ap_return);

    grp_scaled_fixed2ieee_fu_345 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_345_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_345_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_345_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_345_ap_ready,
        in_V => sin_result_V_reg_1826,
        prescale => tmp_cast_reg_1831,
        ap_return => grp_scaled_fixed2ieee_fu_345_ap_return);

    houghTransform_muibs_x_U24 : component houghTransform_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_446_p0,
        din1 => grp_fu_446_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    houghTransform_mujbC_x_U25 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_669_p0,
        din1 => grp_fu_669_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);

    houghTransform_mujbC_x_U26 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_694_p0,
        din1 => grp_fu_694_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_694_p2);

    houghTransform_mujbC_x_U27 : component houghTransform_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_699_p0,
        din1 => grp_fu_699_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_699_p2);

    houghTransform_muCeG_U28 : component houghTransform_muCeG
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_711_p0,
        din1 => grp_fu_711_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_711_p2);

    houghTransform_muDeQ_U29 : component houghTransform_muDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 56,
        din1_WIDTH => 51,
        dout_WIDTH => 107)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_723_p0,
        din1 => hls_hotbm_fourth_o_46_reg_1574,
        ce => ap_const_logic_1,
        dout => grp_fu_723_p2);

    houghTransform_muEe0_U30 : component houghTransform_muEe0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 43,
        dout_WIDTH => 92)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_735_p0,
        din1 => hls_hotbm_fourth_o_48_reg_1579,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p2);

    houghTransform_muFfa_U31 : component houghTransform_muFfa
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 56,
        din1_WIDTH => 53,
        dout_WIDTH => 109)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_747_p0,
        din1 => hls_hotbm_fourth_o_37_reg_1619,
        ce => ap_const_logic_1,
        dout => grp_fu_747_p2);

    houghTransform_muGfk_U32 : component houghTransform_muGfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 35,
        dout_WIDTH => 77)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_789_p0,
        din1 => hls_hotbm_fourth_o_41_reg_1666,
        ce => ap_const_logic_1,
        dout => grp_fu_789_p2);

    houghTransform_muHfu_U33 : component houghTransform_muHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 27,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_801_p0,
        din1 => hls_hotbm_fourth_o_43_reg_1671,
        ce => ap_const_logic_1,
        dout => grp_fu_801_p2);

    houghTransform_muIfE_U34 : component houghTransform_muIfE
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_833_p0,
        din1 => hls_hotbm_fourth_o_50_reg_1681,
        ce => ap_const_logic_1,
        dout => grp_fu_833_p2);

    houghTransform_muJfO_U35 : component houghTransform_muJfO
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 23,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_845_p0,
        din1 => grp_fu_845_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_845_p2);

    houghTransform_muKfY_U36 : component houghTransform_muKfY
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 62,
        din1_WIDTH => 63,
        dout_WIDTH => 125)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1003_p0,
        din1 => grp_fu_1003_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1003_p2);

    houghTransform_muqcK_x_U37 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_99_fu_1051_p3,
        dout => tmp_fu_1109_p18);

    houghTransform_muqcK_x_U38 : component houghTransform_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_99_fu_1051_p3,
        dout => tmp_60_fu_1153_p18);

    houghTransform_mukbM_x_U39 : component houghTransform_mukbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_91_reg_1443,
        dout => tmp_62_fu_1288_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_scaled_fixed2ieee_fu_338_ap_ready)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_scaled_fixed2ieee_fu_345_ap_ready)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then 
                    ap_return_0_preg <= s_out_fu_1349_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then 
                    ap_return_1_preg <= c_out_fu_1345_p1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_V_reg_1506 <= p_Val2_64_fu_635_p3(62 downto 56);
                p_Val2_65_reg_1511 <= p_Val2_65_fu_652_p1;
                tmp_i2_reg_1517 <= p_Val2_64_fu_635_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Mx_V_reg_1470 <= p_Val2_63_fu_560_p2(123 downto 61);
                isNeg_reg_1482 <= Ex_V_fu_578_p2(10 downto 10);
                r_V_6_reg_1488 <= r_V_6_fu_596_p2;
                rhs_V_2_reg_1477 <= rhs_V_2_fu_584_p1;
                tmp_59_reg_1500 <= tmp_59_fu_607_p2;
                tmp_s_reg_1494 <= tmp_s_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Mx_zeros_V_reg_1464 <= Mx_zeros_V_fu_541_p1;
                p_Val2_61_reg_1459 <= p_Val2_61_fu_492_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    OP1_V_reg_1522(48 downto 0) <= OP1_V_fu_666_p1(48 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_1384 <= closepath_fu_377_p2;
                expv_op_reg_1391 <= expv_op_fu_383_p2;
                loc_V_11_reg_1378 <= loc_V_11_fu_373_p1;
                loc_V_reg_1371 <= p_Val2_s_fu_351_p1(62 downto 52);
                sin_results_sign_V_1_reg_1365 <= p_Val2_s_fu_351_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                cos_result_V_reg_1821 <= cos_result_V_fu_1022_p2;
                not_or_cond2_reg_1844 <= not_or_cond2_fu_1045_p2;
                or_cond_reg_1836 <= or_cond_fu_1037_p2;
                    sin_result_V_reg_1826(61 downto 0) <= sin_result_V_fu_1029_p1(61 downto 0);
                tmp_cast_reg_1831 <= tmp_cast_fu_1033_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                hls_hotbm_fourth_o_37_reg_1619 <= hls_hotbm_fourth_o_23_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                hls_hotbm_fourth_o_39_reg_1569 <= hls_hotbm_fourth_o_24_q0;
                hls_hotbm_fourth_o_46_reg_1574 <= hls_hotbm_fourth_o_15_q0;
                hls_hotbm_fourth_o_48_reg_1579 <= hls_hotbm_fourth_o_16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                hls_hotbm_fourth_o_41_reg_1666 <= hls_hotbm_fourth_o_25_q0;
                hls_hotbm_fourth_o_43_reg_1671 <= hls_hotbm_fourth_o_26_q0;
                hls_hotbm_fourth_o_50_reg_1681 <= hls_hotbm_fourth_o_17_q0;
                hls_hotbm_fourth_o_52_reg_1686 <= hls_hotbm_fourth_o_18_q0;
                tmp_77_i_reg_1654 <= grp_fu_694_p2(97 downto 56);
                tmp_79_i_reg_1660 <= grp_fu_699_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_Val2_20_i_reg_1801 <= p_Val2_20_i_fu_991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_59_reg_1432 <= grp_fu_446_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Val2_69_reg_1781 <= hls_hotbm_fourth_o_22_q0;
                r_V_reg_1796 <= r_V_fu_962_p2;
                tmp2_reg_1791 <= tmp2_fu_945_p2;
                tmp_6_i_reg_1786 <= grp_fu_747_p2(108 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Val2_71_reg_1716 <= hls_hotbm_fourth_o_9_q0;
                tmp_14_i_reg_1721 <= grp_fu_723_p2(106 downto 53);
                tmp_16_i_reg_1726 <= grp_fu_735_p2(91 downto 46);
                tmp_71_reg_1691 <= grp_fu_711_p2(92 downto 46);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                p_Val2_74_reg_1776 <= p_Val2_74_fu_910_p2;
                tmp_10_i_reg_1756 <= grp_fu_789_p2(76 downto 39);
                tmp_12_i_reg_1761 <= grp_fu_801_p2(61 downto 32);
                tmp_18_i_reg_1766 <= grp_fu_833_p2(74 downto 39);
                tmp_72_reg_1771 <= grp_fu_845_p2(57 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_91_reg_1443 <= p_Val2_91_fu_477_p3;
                p_Val2_i_reg_1454 <= p_Val2_i_fu_487_p2;
                tmp_80_reg_1449 <= tmp_80_fu_483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_1411 <= r_V_9_fu_417_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                table_256_V_reg_1406 <= hls_ref_4oPi_table_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_58_reg_1426 <= tmp_58_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (closepath_reg_1384 = ap_const_lv1_0))) then
                tmp_64_i_reg_1438 <= grp_fu_446_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_73_reg_1816 <= grp_fu_1003_p2(124 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_75_i_reg_1529 <= grp_fu_669_p2(97 downto 49);
                    tmp_80_i_reg_1536(6 downto 0) <= tmp_80_i_fu_685_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_79_reg_1401 <= tmp_79_fu_410_p1;
            end if;
        end if;
    end process;
    OP1_V_reg_1522(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_80_i_reg_1536(31 downto 7) <= "0000000000000000000000000";
    sin_result_V_reg_1826(62) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state33, ap_block_state33_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_578_p2 <= std_logic_vector(unsigned(storemerge_i_fu_550_p3) - unsigned(tmp_68_i_fu_575_p1));
    Mx_zeros_V_fu_541_p1 <= tmp_i4_i_fu_533_p3(6 - 1 downto 0);
    OP1_V_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_reg_1517),98));
    OP2_V_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_i_reg_1529),98));
    addr_V_fu_389_p3 <= 
        ap_const_lv11_4A when (closepath_reg_1384(0) = '1') else 
        expv_op_reg_1391;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state33_on_subcall_done_assign_proc : process(grp_scaled_fixed2ieee_fu_338_ap_done, grp_scaled_fixed2ieee_fu_345_ap_done)
    begin
                ap_block_state33_on_subcall_done <= ((ap_const_logic_0 = grp_scaled_fixed2ieee_fu_338_ap_done) or (ap_const_logic_0 = grp_scaled_fixed2ieee_fu_345_ap_done));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33, ap_block_state33_on_subcall_done)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33, ap_block_state33_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state33, s_out_fu_1349_p1, ap_return_0_preg, ap_block_state33_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then 
            ap_return_0 <= s_out_fu_1349_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state33, c_out_fu_1345_p1, ap_block_state33_on_subcall_done, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then 
            ap_return_1 <= c_out_fu_1345_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    c_out_fu_1345_p1 <= c_write_assign_in_fu_1337_p3;
    c_write_assign_in_fu_1337_p3 <= 
        p_Result_103_fu_1319_p4 when (tmp_62_fu_1288_p10(0) = '1') else 
        p_Result_102_fu_1309_p4;
    closepath_fu_377_p2 <= "1" when (unsigned(loc_V_fu_363_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_result_V_fu_1022_p2 <= std_logic_vector(signed(ap_const_lv63_4000000000000000) - signed(p_Val2_20_i_cast_fu_1019_p1));
    cos_results_sign_V_1_fu_1191_p2 <= (tmp_60_fu_1153_p18 or p_Result_101_fu_1087_p3);
    expv_op_fu_383_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_363_p4));
    grp_fu_1003_p0 <= grp_fu_1003_p00(62 - 1 downto 0);
    grp_fu_1003_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1796),125));
    grp_fu_1003_p1 <= grp_fu_1003_p10(63 - 1 downto 0);
    grp_fu_1003_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1470),125));
    grp_fu_446_p0 <= grp_fu_446_p00(170 - 1 downto 0);
    grp_fu_446_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1411),223));
    grp_fu_446_p1 <= grp_fu_446_p10(53 - 1 downto 0);
    grp_fu_446_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_95_fu_432_p3),223));
    grp_fu_669_p0 <= OP1_V_fu_666_p1(49 - 1 downto 0);
    grp_fu_669_p1 <= OP1_V_fu_666_p1(49 - 1 downto 0);
    grp_fu_694_p0 <= OP2_V_fu_691_p1(49 - 1 downto 0);
    grp_fu_694_p1 <= OP1_V_reg_1522(49 - 1 downto 0);
    grp_fu_699_p0 <= OP2_V_fu_691_p1(49 - 1 downto 0);
    grp_fu_699_p1 <= OP2_V_fu_691_p1(49 - 1 downto 0);
    grp_fu_711_p0 <= grp_fu_711_p00(49 - 1 downto 0);
    grp_fu_711_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_i_reg_1529),93));
    grp_fu_711_p1 <= grp_fu_711_p10(44 - 1 downto 0);
    grp_fu_711_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_39_reg_1569),93));
    grp_fu_723_p0 <= grp_fu_723_p00(56 - 1 downto 0);
    grp_fu_723_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_65_reg_1511),107));
    grp_fu_735_p0 <= grp_fu_735_p00(49 - 1 downto 0);
    grp_fu_735_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_i_reg_1529),92));
    grp_fu_747_p0 <= grp_fu_747_p00(56 - 1 downto 0);
    grp_fu_747_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_65_reg_1511),109));
    grp_fu_789_p0 <= grp_fu_789_p00(42 - 1 downto 0);
    grp_fu_789_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_i_reg_1654),77));
    grp_fu_801_p0 <= grp_fu_801_p00(35 - 1 downto 0);
    grp_fu_801_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_i_reg_1660),62));
    grp_fu_833_p0 <= grp_fu_833_p00(42 - 1 downto 0);
    grp_fu_833_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_i_reg_1654),75));
    grp_fu_845_p0 <= grp_fu_845_p00(35 - 1 downto 0);
    grp_fu_845_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_i_reg_1660),58));
    grp_fu_845_p1 <= grp_fu_845_p10(23 - 1 downto 0);
    grp_fu_845_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_52_reg_1686),58));
    grp_scaled_fixed2ieee_fu_338_ap_start <= ap_reg_grp_scaled_fixed2ieee_fu_338_ap_start;
    grp_scaled_fixed2ieee_fu_345_ap_start <= ap_reg_grp_scaled_fixed2ieee_fu_345_ap_start;
    hls_hotbm_fourth_o_15_address0 <= tmp_80_i_fu_685_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_15_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_15_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_16_address0 <= tmp_80_i_fu_685_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_16_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_16_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_17_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_17_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_17_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_18_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_18_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_18_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_22_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_22_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hls_hotbm_fourth_o_22_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_23_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_23_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            hls_hotbm_fourth_o_23_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_24_address0 <= tmp_80_i_fu_685_p1(7 - 1 downto 0);

    hls_hotbm_fourth_o_24_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hls_hotbm_fourth_o_24_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_25_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_25_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_25_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_26_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_26_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hls_hotbm_fourth_o_26_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_9_address0 <= tmp_80_i_reg_1536(7 - 1 downto 0);

    hls_hotbm_fourth_o_9_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            hls_hotbm_fourth_o_9_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_ref_4oPi_table_s_address0 <= tmp_i2_i_fu_405_p1(4 - 1 downto 0);

    hls_ref_4oPi_table_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_11_fu_373_p1 <= p_Val2_s_fu_351_p1(52 - 1 downto 0);
    loc_V_12_fu_1069_p4 <= p_Val2_77_fu_1057_p1(62 downto 52);
    loc_V_13_fu_1079_p1 <= p_Val2_77_fu_1057_p1(52 - 1 downto 0);
    loc_V_14_fu_1095_p4 <= p_Val2_78_fu_1083_p1(62 downto 52);
    loc_V_15_fu_1105_p1 <= p_Val2_78_fu_1083_p1(52 - 1 downto 0);
    loc_V_fu_363_p4 <= p_Val2_s_fu_351_p1(62 downto 52);
    not_or_cond2_demorga_fu_1041_p2 <= (tmp_s_reg_1494 and tmp_58_reg_1426);
    not_or_cond2_fu_1045_p2 <= (not_or_cond2_demorga_fu_1041_p2 xor ap_const_lv1_1);
    not_or_cond_fu_1248_p2 <= (or_cond_reg_1836 xor ap_const_lv1_1);
    not_tmp_s_fu_1197_p2 <= (tmp_59_reg_1500 xor ap_const_lv1_1);
    or_cond_fu_1037_p2 <= (tmp_s_reg_1494 and tmp_58_reg_1426);
    p_Result_100_fu_1061_p3 <= p_Val2_77_fu_1057_p1(63 downto 63);
    p_Result_101_fu_1087_p3 <= p_Val2_78_fu_1083_p1(63 downto 63);
    p_Result_102_fu_1309_p4 <= ((p_Result_91_fu_1259_p2 & ret_V_31_fu_1272_p3) & ret_V_32_fu_1280_p3);
    p_Result_103_fu_1319_p4 <= ((p_Result_s_72_fu_1208_p3 & ret_V_29_fu_1225_p3) & ret_V_30_fu_1240_p3);
    p_Result_4_cast_fu_1214_p3 <= 
        ap_const_lv11_7FF when (not_or_cond2_reg_1844(0) = '1') else 
        ap_const_lv11_0;
    p_Result_5_cast_fu_1233_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond2_reg_1844(0) = '1') else 
        ap_const_lv52_0;
    p_Result_6_fu_1265_p3 <= 
        ap_const_lv11_3FF when (or_cond_reg_1836(0) = '1') else 
        ap_const_lv11_7FF;
    p_Result_91_fu_1259_p2 <= (tmp4_fu_1253_p2 and cos_results_sign_V_1_fu_1191_p2);
    p_Result_95_fu_432_p3 <= (ap_const_lv1_1 & loc_V_11_reg_1378);
    p_Result_96_fu_507_p3 <= (p_Result_i3_i_fu_497_p4 & ap_const_lv1_1);
    
    p_Result_97_fu_515_p4_proc : process(p_Result_96_fu_507_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_97_fu_515_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_96_fu_507_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_97_fu_515_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_97_fu_515_p4_i) := p_Result_96_fu_507_p3(62-1-p_Result_97_fu_515_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_97_fu_515_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_98_fu_525_p3 <= (ap_const_lv2_3 & p_Result_97_fu_515_p4);
    p_Result_99_fu_1051_p3 <= (sin_results_sign_V_1_reg_1365 & p_Val2_91_reg_1443);
    p_Result_i3_i_fu_497_p4 <= p_Val2_61_fu_492_p3(123 downto 63);
    p_Result_i_i_fu_395_p4 <= addr_V_fu_389_p3(10 downto 7);
    p_Result_s_71_fu_1202_p2 <= (p_Result_s_fu_1147_p2 and not_tmp_s_fu_1197_p2);
    p_Result_s_72_fu_1208_p3 <= 
        sin_results_sign_V_1_reg_1365 when (or_cond_reg_1836(0) = '1') else 
        p_Result_s_71_fu_1202_p2;
    p_Result_s_fu_1147_p2 <= (tmp_fu_1109_p18 or p_Result_100_fu_1061_p3);
        p_Val2_20_i_cast_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_i_reg_1801),63));

    p_Val2_20_i_fu_991_p2 <= std_logic_vector(signed(tmp2_cast_fu_988_p1) + signed(tmp1_fu_982_p2));
    p_Val2_61_fu_492_p3 <= 
        p_Val2_i_reg_1454 when (tmp_80_reg_1449(0) = '1') else 
        p_Val2_59_reg_1432;
    p_Val2_63_fu_560_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_61_reg_1459),to_integer(unsigned('0' & tmp_65_i_fu_557_p1(31-1 downto 0)))));
    p_Val2_64_fu_635_p3 <= 
        tmp_72_i_fu_625_p2 when (isNeg_reg_1482(0) = '1') else 
        tmp_73_i_fu_630_p2;
    p_Val2_65_fu_652_p1 <= p_Val2_64_fu_635_p3(56 - 1 downto 0);
    p_Val2_70_fu_968_p3 <= (p_Val2_69_reg_1781 & ap_const_lv3_0);
    p_Val2_72_fu_871_p3 <= (p_Val2_71_reg_1716 & ap_const_lv3_0);
    p_Val2_73_fu_901_p2 <= std_logic_vector(unsigned(p_Val2_72_fu_871_p3) + unsigned(tmp_85_i_cast_fu_898_p1));
    p_Val2_74_fu_910_p2 <= std_logic_vector(unsigned(p_Val2_73_fu_901_p2) + unsigned(tmp_87_i_cast_fu_907_p1));
    p_Val2_75_fu_954_p2 <= std_logic_vector(unsigned(p_Val2_74_reg_1776) + unsigned(tmp_89_i_cast_fu_951_p1));
    p_Val2_77_fu_1057_p1 <= grp_scaled_fixed2ieee_fu_345_ap_return;
    p_Val2_78_fu_1083_p1 <= grp_scaled_fixed2ieee_fu_338_ap_return;
    p_Val2_91_fu_477_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1384(0) = '1') else 
        tmp_64_i_reg_1438;
    p_Val2_94_cast_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_70_fu_968_p3),62));
        p_Val2_95_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_i_reg_1786),62));

        p_Val2_97_cast_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_i_reg_1756),39));

    p_Val2_i_fu_487_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_59_reg_1432));
    p_Val2_s_fu_351_p1 <= t_in;
    r_V_6_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_2_fu_584_p1));
    r_V_9_fu_417_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_1406),to_integer(unsigned('0' & tmp_52_i_i_fu_414_p1(31-1 downto 0)))));
    r_V_fu_962_p2 <= std_logic_vector(unsigned(p_Val2_75_fu_954_p2) + unsigned(tmp_91_i_cast_fu_959_p1));
    ret_V_29_fu_1225_p3 <= 
        p_Result_4_cast_fu_1214_p3 when (tmp_61_fu_1221_p2(0) = '1') else 
        loc_V_12_fu_1069_p4;
    ret_V_30_fu_1240_p3 <= 
        p_Result_5_cast_fu_1233_p3 when (tmp_61_fu_1221_p2(0) = '1') else 
        loc_V_13_fu_1079_p1;
    ret_V_31_fu_1272_p3 <= 
        p_Result_6_fu_1265_p3 when (tmp_61_fu_1221_p2(0) = '1') else 
        loc_V_14_fu_1095_p4;
    ret_V_32_fu_1280_p3 <= 
        p_Result_5_cast_fu_1233_p3 when (tmp_61_fu_1221_p2(0) = '1') else 
        loc_V_15_fu_1105_p1;
        rhs_V_2_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_578_p2),12));

    s_out_fu_1349_p1 <= s_write_assign_in_fu_1329_p3;
    s_write_assign_in_fu_1329_p3 <= 
        p_Result_102_fu_1309_p4 when (tmp_62_fu_1288_p10(0) = '1') else 
        p_Result_103_fu_1319_p4;
        sh_assign_5_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_612_p3),32));

    sh_assign_fu_612_p3 <= 
        r_V_6_reg_1488 when (isNeg_reg_1482(0) = '1') else 
        rhs_V_2_reg_1477;
    sin_result_V_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_reg_1816),63));
    storemerge_i_fu_550_p3 <= 
        tmp_i_fu_545_p2 when (closepath_reg_1384(0) = '1') else 
        ap_const_lv11_0;
    tmp1_fu_982_p2 <= std_logic_vector(unsigned(p_Val2_94_cast_fu_975_p1) + unsigned(p_Val2_95_cast_fu_979_p1));
        tmp2_cast_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_1791),62));

    tmp2_fu_945_p2 <= std_logic_vector(signed(tmp3_cast_fu_941_p1) + signed(tmp_8_i_fu_926_p1));
        tmp3_cast_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_935_p2),48));

    tmp3_fu_935_p2 <= std_logic_vector(signed(p_Val2_97_cast_fu_929_p1) + signed(tmp_82_i_cast_fu_932_p1));
    tmp4_fu_1253_p2 <= (not_tmp_s_fu_1197_p2 and not_or_cond_fu_1248_p2);
    tmp_52_i_i_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_reg_1401),256));
    tmp_58_fu_452_p2 <= "1" when (loc_V_11_reg_1378 = ap_const_lv52_0) else "0";
    tmp_59_fu_607_p2 <= "1" when (loc_V_reg_1371 = ap_const_lv11_7FF) else "0";
    tmp_61_fu_1221_p2 <= (or_cond_reg_1836 or tmp_59_reg_1500);
    tmp_65_i_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1464),124));
    tmp_68_i_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1464),11));
    tmp_71_i_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_617_p1),63));
    tmp_72_i_fu_625_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1470),to_integer(unsigned('0' & tmp_71_i_fu_621_p1(31-1 downto 0)))));
    tmp_73_i_fu_630_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1470),to_integer(unsigned('0' & tmp_71_i_fu_621_p1(31-1 downto 0)))));
    tmp_79_fu_410_p1 <= addr_V_fu_389_p3(7 - 1 downto 0);
    tmp_80_fu_483_p1 <= p_Val2_91_fu_477_p3(1 - 1 downto 0);
    tmp_80_i_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_reg_1506),32));
        tmp_82_i_cast_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_i_reg_1761),39));

        tmp_85_i_cast_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i_reg_1721),62));

        tmp_87_i_cast_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_i_reg_1726),62));

        tmp_89_i_cast_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_i_reg_1766),62));

    tmp_8_i_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_1691),48));
    tmp_91_i_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_reg_1771),62));
        tmp_cast_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_reg_1488),13));

    tmp_i2_i_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_395_p4),32));
    
    tmp_i4_i_fu_533_p3_proc : process(p_Result_98_fu_525_p3)
    begin
        tmp_i4_i_fu_533_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_98_fu_525_p3(i) = '1' then
                tmp_i4_i_fu_533_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_fu_545_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1371));
    tmp_s_fu_602_p2 <= "1" when (loc_V_reg_1371 = ap_const_lv11_0) else "0";
end behav;
