-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity generic_sincos_hlAem_rom is 
    generic(
             dwidth     : integer := 33; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of generic_sincos_hlAem_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "111111111111111111111111111110000", 
    1 => "000000001010001100110101110011000", 
    2 => "000000010100011001101010100101011", 
    3 => "000000011110100110011101000110101", 
    4 => "000000101000110011001100001000111", 
    5 => "000000110010111111110110101000011", 
    6 => "000000111101001100011011101000111", 
    7 => "000001000111011000111001111011101", 
    8 => "000001010001100101010000010100011", 
    9 => "000001011011110001011101101011111", 
    10 => "000001100101111101100000111000011", 
    11 => "000001110000001001011000111110100", 
    12 => "000001111010010101000100100011100", 
    13 => "000010000100100000100010110110100", 
    14 => "000010001110101011110010011110110", 
    15 => "000010011000110110110010011011011", 
    16 => "000010100011000001100001011000010", 
    17 => "000010101101001011111110100010101", 
    18 => "000010110111010110001000100000111", 
    19 => "000011000001011111111110100000100", 
    20 => "000011001011101001011111000000111", 
    21 => "000011010101110010101001000101101", 
    22 => "000011011111111011011011100100000", 
    23 => "000011101010000011110101100100011", 
    24 => "000011110100001011110101100101100", 
    25 => "000011111110010011011010110100110", 
    26 => "000100001000011010100100000011100", 
    27 => "000100010010100001010000001000101", 
    28 => "000100011100100111011110001000111", 
    29 => "000100100110101101001100101000111", 
    30 => "000100110000110010011010101010101", 
    31 => "000100111010110111000111010001101", 
    32 => "000101000100111011010001000010000", 
    33 => "000101001110111110110111001100101", 
    34 => "000101011001000001111000010100100", 
    35 => "000101100011000100010011100110001", 
    36 => "000101101101000110000111101010011", 
    37 => "000101110111000111010011100111011", 
    38 => "000110000001000111110110001110000", 
    39 => "000110001011000111101110011110101", 
    40 => "000110010101000110111011001100000", 
    41 => "000110011111000101011011010010111", 
    42 => "000110101001000011001101110001100", 
    43 => "000110110011000000010001011001101", 
    44 => "000110111100111100100101001110010", 
    45 => "000111000110111000000111111101001", 
    46 => "000111010000110010111000101011101", 
    47 => "000111011010101100110110010001001", 
    48 => "000111100100100101111111101000101", 
    49 => "000111101110011110010011100110010", 
    50 => "000111111000010101110001010011110", 
    51 => "001000000010001100010111011100010", 
    52 => "001000001100000010000100110101001", 
    53 => "001000010101110110111000101101000", 
    54 => "001000011111101010110001110010101", 
    55 => "001000101001011101101111001001001", 
    56 => "001000110011001111101111100010101", 
    57 => "001000111101000000110010000101111", 
    58 => "001001000110110000110101011010011", 
    59 => "001001010000011111111000100111110", 
    60 => "001001011010001101111010110110100", 
    61 => "001001100011111010111010110100011", 
    62 => "001001101101100110110111001111001", 
    63 => "001001110111010001101111100000000", 
    64 => "001010000000111011100010010010010", 
    65 => "001010001010100100001110101100000", 
    66 => "001010010100001011110011011000000", 
    67 => "001010011101110010001111100010011", 
    68 => "001010100111010111100010001000001", 
    69 => "001010110000111011101001111111100", 
    70 => "001010111010011110100110001000010", 
    71 => "001011000100000000010101011010101", 
    72 => "001011001101100000110110110111110", 
    73 => "001011010111000000001001100000111", 
    74 => "001011100000011110001100010001111", 
    75 => "001011101001111010111110000010011", 
    76 => "001011110011010110011101101111111", 
    77 => "001011111100110000101010100111000", 
    78 => "001100000110001001100011001101101", 
    79 => "001100001111100001000110111011110", 
    80 => "001100011000110111010100100001110", 
    81 => "001100100010001100001010111110011", 
    82 => "001100101011011111101001010100110", 
    83 => "001100110100110001101110100000101", 
    84 => "001100111110000010011001100011010", 
    85 => "001101000111010001101001011110011", 
    86 => "001101010000011111011101001001000", 
    87 => "001101011001101011110011100111011", 
    88 => "001101100010110110101100000100001", 
    89 => "001101101100000000000101000101001", 
    90 => "001101110101000111111110001001101", 
    91 => "001101111110001110010101110011001", 
    92 => "001110000111010011001011011010001", 
    93 => "001110010000010110011110000001111", 
    94 => "001110011001011000001100010100010", 
    95 => "001110100010011000010101011111011", 
    96 => "001110101011010110111000100010100", 
    97 => "001110110100010011110100011111000", 
    98 => "001110111101001111001000011100001", 
    99 => "001111000110001000110011011000101", 
    100 => "001111001111000000110100001100100", 
    101 => "001111010111110111001010001111011", 
    102 => "001111100000101011110100010001111", 
    103 => "001111101001011110110001011010001", 
    104 => "001111110010010000000000101100111", 
    105 => "001111111010111111100001001100110", 
    106 => "010000000011101101010001111010010", 
    107 => "010000001100011001010001111100100", 
    108 => "010000010101000011100000011011101", 
    109 => "010000011101101011111100010000111", 
    110 => "010000100110010010100100110000011", 
    111 => "010000101110110111011000101001101", 
    112 => "010000110111011010010111010001111", 
    113 => "010000111111111011011111100011000", 
    114 => "010001001000011010110000101010110", 
    115 => "010001010000111000001001100110111", 
    116 => "010001011001010011101001100100000", 
    117 => "010001100001101101001111100001110", 
    118 => "010001101010000100111010100011000", 
    119 => "010001110010011010101001111100111", 
    120 => "010001111010101110011100100000101", 
    121 => "010010000011000000010001101010101", 
    122 => "010010001011010000001000010110101", 
    123 => "010010010011011101111111101001100", 
    124 => "010010011011101001110110101111001", 
    125 => "010010100011110011101100101000011", 
    126 => "010010101011111011100000011110001", 
    127 => "010010110100000001010001101000001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity generic_sincos_hlAem is
    generic (
        DataWidth : INTEGER := 33;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of generic_sincos_hlAem is
    component generic_sincos_hlAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    generic_sincos_hlAem_rom_U :  component generic_sincos_hlAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


