-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity generic_sincos_hlyd2_rom is 
    generic(
             dwidth     : integer := 51; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of generic_sincos_hlyd2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "111111111111111111111111111111111111111111111111011", 
    1 => "111111110101101010100010010000011001110001000111000", 
    2 => "111111101011010101000101011110000000100011111000111", 
    3 => "111111100000111111101010100110000001010011001100010", 
    4 => "111111010110101010010010100101101000101100011011111", 
    5 => "111111001100010100111110011010000011001000110100110", 
    6 => "111111000001111111101111000000011100100110100110010", 
    7 => "111110110111101010100101010110000000100010010001110", 
    8 => "111110101101010101100010010111111001101111111010111", 
    9 => "111110100011000000100111000011010010010100011011110", 
    10 => "111110011000101011110100010101010011011110110010110", 
    11 => "111110001110010111001011001011000101100001010110111", 
    12 => "111110000100000010101100100001101111101011000001100", 
    13 => "111101111001101110011001010110011000000000101100011", 
    14 => "111101101111011010010010100110000011010110010011001", 
    15 => "111101100101000110011001001101110101001000010010000", 
    16 => "111101011010110010101110001010101111010100101111000", 
    17 => "111101010000011111010010011001110010010100110101000", 
    18 => "111101000110001100000110110111111100110101111000110", 
    19 => "111100111011111001001100100010001011110010111001010", 
    20 => "111100110001100110100100010101011010001101100100001", 
    21 => "111100100111010100001111001110100001000111110101010", 
    22 => "111100011101000010001110001010010111011101000001101", 
    23 => "111100010010110000100010000101110001111011001111010", 
    24 => "111100001000011111001011111101100010111100100001001", 
    25 => "111011111110001110001100101110011010100000010101110", 
    26 => "111011110011111101100101010101000110000100110010011", 
    27 => "111011101001101101010110101110010000011111111010100", 
    28 => "111011011111011101100001110110100001111001000110111", 
    29 => "111011010101001110000111101010011111100010010010101", 
    30 => "111011001010111111001001000110101011110001011011110", 
    31 => "111011000000110000100111000111100101111001110001000", 
    32 => "111010110110100010100010101001101010000101000111010", 
    33 => "111010101100010100111100101001010001001101010111101", 
    34 => "111010100010000111110110000010110000110101101011001", 
    35 => "111010010111111011001111110010011011000011111110110", 
    36 => "111010001101101111001010110100011110011010001100001", 
    37 => "111010000011100011101000000101000101101111110000111", 
    38 => "111001111001011000101000100000011000001010111100000", 
    39 => "111001101111001110001101000010011000111010001011100", 
    40 => "111001100101000100010110100111000111001101100011111", 
    41 => "111001011010111011000110001010011110010000001100110", 
    42 => "111001010000110010011100101000010101000001101000100", 
    43 => "111001000110101010011010111100011110001111001111110", 
    44 => "111000111100100011000010000010101000001101101111101", 
    45 => "111000110010011100010010110110011100110010011100101", 
    46 => "111000101000010110001110010011100001001100111101100", 
    47 => "111000011110010000110101010101010110000000011010110", 
    48 => "111000010100001100001000110111010110111101000100101", 
    49 => "111000001010001000001001110100111010111001101011000", 
    50 => "111000000000000100111001001001010011101101000100011", 
    51 => "110111110110000010010111101111101110000111100001111", 
    52 => "110111101100000000100110100011010001101100011000010", 
    53 => "110111100001111111100110011111000000101011100001001", 
    54 => "110111010111111111011000011101110111111010110010111", 
    55 => "110111001101111111111101011010101110101111101100100", 
    56 => "110111000100000001010110010000010110111000110001000", 
    57 => "110110111010000011100011111001011100010111001111011", 
    58 => "110110110000000110100111010000100101011000100000110", 
    59 => "110110100110001010100001010000010010001111110101001", 
    60 => "110110011100001111010010110010111101001111110100001", 
    61 => "110110010010010100111100110010111010100011111111001", 
    62 => "110110001000011011100000001010011000001010011011000", 
    63 => "110101111110100010111101110011011101101101011111110", 
    64 => "110101110100101011010110101000001100011101010001111", 
    65 => "110101101010110100101011100010011111001001010110100", 
    66 => "110101100000111110111101011100001001111010010100111", 
    67 => "110101010111001010001101001110111010001011101100000", 
    68 => "110101001101010110011011110100010110100101010011100", 
    69 => "110101000011100011101010000101111110110101001010010", 
    70 => "110100111001110001111000111101001011101001000111111", 
    71 => "110100110000000001001001010011001110101000100100011", 
    72 => "110100100110010001011100000001010010001110001100011", 
    73 => "110100011100100010110010000000011001100001101101010", 
    74 => "110100010010110101001100001001100000010001100110110", 
    75 => "110100001001001000101011010101011010101100111001111", 
    76 => "110011111111011101010000011100110101011100111110111", 
    77 => "110011110101110010111100011000010101011111011000001", 
    78 => "110011101100001001110000000000010111111111011111101", 
    79 => "110011100010100001101100001101010010010000100111100", 
    80 => "110011011000111010110001110111010001100111100100100", 
    81 => "110011001111010101000001110110011011010100101010011", 
    82 => "110011000101110000011101000010101100011101100100111", 
    83 => "110010111100001101000100010011111001110111001101001", 
    84 => "110010110010101010111000100001101111111111100100111", 
    85 => "110010101001001001111010100011110010110111110011100", 
    86 => "110010011111101010001011010001011101111101111011100", 
    87 => "110010010110001011101011100010000100000110111111011", 
    88 => "110010001100101110011100001100101111011000111011011", 
    89 => "110010000011010010011110001000100001000100011111010", 
    90 => "110001111001110111110010001100010001011111011100101", 
    91 => "110001110000011110011001001110101111111110010101011", 
    92 => "110001100111000110010100000110100010101110101111001", 
    93 => "110001011101101111100011101010000110110001001100001", 
    94 => "110001010100011010001000101111101111110011001101010", 
    95 => "110001001011000110000100001101101000001001100011000", 
    96 => "110001000001110011010110111001110000101010001001100", 
    97 => "110000111000100010000001101010000000100110010101101", 
    98 => "110000101111010010000101010100000101100100111011100", 
    99 => "110000100110000011100010101101100011011100011000010", 
    100 => "110000011100110110011010101011110100001100111101100", 
    101 => "110000010011101010101110000100000111111011000010111", 
    102 => "110000001010100000011101101011100100101001000111101", 
    103 => "110000000001010111101010010111000110010010001100101", 
    104 => "101111111000010000010100111011011110100011111111111", 
    105 => "101111101111001010011110001101010100111001001101010", 
    106 => "101111100110000110000111000001000110010011110001011", 
    107 => "101111011101000011010000001011000101010111001101110", 
    108 => "101111010100000001111010011111011010000010111110011", 
    109 => "101111001011000010000110110010000001101100101011111", 
    110 => "101111000010000011110101110110101110111010101001000", 
    111 => "101110111001000111001000100001001001011110000011101", 
    112 => "101110110000001011111111100100101110001101101001001", 
    113 => "101110100111010010011011110100101110111111110100110", 
    114 => "101110011110011010011110000100010010100101011010011", 
    115 => "101110010101100100000111000110010100100011110110101", 
    116 => "101110001100101111010111101101100101001111111010001", 
    117 => "101110000011111100010000101100101001101000000000110", 
    118 => "101101111011001010110010110101111011001110111000111", 
    119 => "101101110010011010111110111011101000000110000111001", 
    120 => "101101101001101100110101101111110010101000100101000", 
    121 => "101101100001000000011000000100010001100101010001001", 
    122 => "101101011000010101100110101010101111111001101100001", 
    123 => "101101001111101100100010010100101100101100100111001", 
    124 => "101101000111000101001011110011011011001000101110111", 
    125 => "101100111110011111100011111000000010010111010100011", 
    126 => "101100110101111011101011010011011101011010111011000", 
    127 => "101100101101011001100010110110011011001010001100001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity generic_sincos_hlyd2 is
    generic (
        DataWidth : INTEGER := 51;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of generic_sincos_hlyd2 is
    component generic_sincos_hlyd2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    generic_sincos_hlyd2_rom_U :  component generic_sincos_hlyd2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


