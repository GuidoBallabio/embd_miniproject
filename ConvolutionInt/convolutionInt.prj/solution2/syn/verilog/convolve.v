// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=32498,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=9,HLS_SYN_FF=1318,HLS_SYN_LUT=930}" *)

module convolve (
        ap_clk,
        ap_rst_n,
        s_axi_conv_AWVALID,
        s_axi_conv_AWREADY,
        s_axi_conv_AWADDR,
        s_axi_conv_WVALID,
        s_axi_conv_WREADY,
        s_axi_conv_WDATA,
        s_axi_conv_WSTRB,
        s_axi_conv_ARVALID,
        s_axi_conv_ARREADY,
        s_axi_conv_ARADDR,
        s_axi_conv_RVALID,
        s_axi_conv_RREADY,
        s_axi_conv_RDATA,
        s_axi_conv_RRESP,
        s_axi_conv_BVALID,
        s_axi_conv_BREADY,
        s_axi_conv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;
parameter    C_S_AXI_CONV_DATA_WIDTH = 32;
parameter    C_S_AXI_CONV_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_conv_AWVALID;
output   s_axi_conv_AWREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_AWADDR;
input   s_axi_conv_WVALID;
output   s_axi_conv_WREADY;
input  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_WDATA;
input  [C_S_AXI_CONV_WSTRB_WIDTH - 1:0] s_axi_conv_WSTRB;
input   s_axi_conv_ARVALID;
output   s_axi_conv_ARREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_ARADDR;
output   s_axi_conv_RVALID;
input   s_axi_conv_RREADY;
output  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_RDATA;
output  [1:0] s_axi_conv_RRESP;
output   s_axi_conv_BVALID;
input   s_axi_conv_BREADY;
output  [1:0] s_axi_conv_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] in_r_address0;
reg    in_r_ce0;
wire   [15:0] in_r_q0;
reg    out_r_ce0;
reg    out_r_we0;
wire   [15:0] out_r_d0;
reg   [3:0] krnl_address0;
reg    krnl_ce0;
wire   [7:0] krnl_q0;
reg  signed [15:0] reg_250;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg  signed [7:0] reg_254;
reg  signed [15:0] reg_258;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state15;
reg  signed [7:0] reg_262;
wire    ap_CS_fsm_state2;
wire   [11:0] grp_fu_270_p2;
reg   [11:0] tmp_4_reg_585;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_1_fu_282_p2;
reg   [5:0] tmp_1_reg_595;
wire   [0:0] exitcond1_fu_276_p2;
wire   [5:0] r_fu_288_p2;
reg   [5:0] r_reg_600;
wire    ap_CS_fsm_state4;
wire   [11:0] grp_fu_297_p2;
reg   [11:0] tmp_5_reg_616;
wire    ap_CS_fsm_state5;
wire   [11:0] grp_fu_306_p2;
reg   [11:0] tmp_6_reg_623;
reg   [11:0] in_addr_3_reg_630;
wire    ap_CS_fsm_state6;
reg   [11:0] in_addr_4_reg_635;
reg   [11:0] in_addr_5_reg_640;
reg   [11:0] out_addr_reg_645;
wire   [5:0] tmp_s_fu_353_p2;
reg   [5:0] tmp_s_reg_653;
wire   [0:0] exitcond_fu_347_p2;
wire   [11:0] tmp_cast_cast_fu_359_p1;
reg   [11:0] tmp_cast_cast_reg_658;
wire    ap_CS_fsm_state7;
wire   [11:0] tmp_12_fu_381_p2;
reg   [11:0] tmp_12_reg_674;
wire   [5:0] c_1_fu_385_p2;
reg   [5:0] c_1_reg_679;
wire   [11:0] tmp_13_fu_395_p2;
reg   [11:0] tmp_13_reg_684;
wire   [11:0] tmp_14_fu_400_p2;
reg   [11:0] tmp_14_reg_689;
wire   [11:0] tmp_15_fu_405_p2;
reg   [11:0] tmp_15_reg_694;
wire  signed [15:0] tmp_3_fu_475_p2;
reg  signed [15:0] tmp_3_reg_704;
wire  signed [15:0] grp_fu_481_p3;
reg  signed [15:0] tmp1_reg_709;
wire  signed [15:0] tmp_22_1_fu_488_p2;
reg  signed [15:0] tmp_22_1_reg_714;
(* use_dsp48 = "no" *) wire   [15:0] tmp_fu_434_p2;
reg   [15:0] tmp_reg_724;
wire  signed [15:0] tmp_22_1_2_fu_502_p2;
reg  signed [15:0] tmp_22_1_2_reg_729;
wire  signed [15:0] grp_fu_508_p3;
reg  signed [15:0] tmp4_reg_744;
reg  signed [15:0] in_load_8_reg_749;
wire    ap_CS_fsm_state16;
reg  signed [7:0] krnl_load_8_reg_754;
wire  signed [15:0] tmp_22_2_2_fu_515_p2;
reg  signed [15:0] tmp_22_2_2_reg_759;
wire    ap_CS_fsm_state17;
wire  signed [15:0] grp_fu_520_p3;
reg  signed [15:0] tmp5_reg_764;
wire    ap_CS_fsm_state18;
reg   [5:0] r1_reg_226;
reg   [5:0] c_reg_238;
wire    ap_CS_fsm_state19;
wire   [31:0] tmp_7_cast_fu_321_p1;
wire   [31:0] tmp_8_cast_fu_331_p1;
wire   [31:0] tmp_9_cast_fu_342_p1;
wire   [31:0] tmp_10_cast_fu_367_p1;
wire   [31:0] tmp_11_cast_fu_376_p1;
wire   [31:0] tmp_12_cast_fu_410_p1;
wire   [31:0] tmp_13_cast_fu_430_p1;
wire   [31:0] tmp_14_cast_fu_442_p1;
wire   [31:0] tmp_15_cast_fu_450_p1;
wire   [5:0] grp_fu_270_p0;
wire   [6:0] grp_fu_270_p1;
wire   [5:0] grp_fu_297_p0;
wire   [6:0] grp_fu_297_p1;
wire   [5:0] grp_fu_306_p0;
wire   [6:0] grp_fu_306_p1;
wire   [11:0] c_cast7_cast_fu_312_p1;
wire   [11:0] tmp_7_fu_316_p2;
wire   [11:0] tmp_8_fu_326_p2;
wire   [11:0] tmp_9_fu_337_p2;
wire   [11:0] tmp_10_fu_362_p2;
wire   [11:0] tmp_11_fu_372_p2;
wire   [11:0] c_1_cast_cast_fu_391_p1;
wire  signed [15:0] grp_fu_494_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp3_fu_465_p2;
wire  signed [15:0] grp_fu_527_p3;
reg   [18:0] ap_NS_fsm;
wire   [11:0] grp_fu_270_p00;
wire   [11:0] grp_fu_297_p00;
wire   [11:0] grp_fu_306_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

convolve_conv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONV_DATA_WIDTH ))
convolve_conv_s_axi_U(
    .AWVALID(s_axi_conv_AWVALID),
    .AWREADY(s_axi_conv_AWREADY),
    .AWADDR(s_axi_conv_AWADDR),
    .WVALID(s_axi_conv_WVALID),
    .WREADY(s_axi_conv_WREADY),
    .WDATA(s_axi_conv_WDATA),
    .WSTRB(s_axi_conv_WSTRB),
    .ARVALID(s_axi_conv_ARVALID),
    .ARREADY(s_axi_conv_ARREADY),
    .ARADDR(s_axi_conv_ARADDR),
    .RVALID(s_axi_conv_RVALID),
    .RREADY(s_axi_conv_RREADY),
    .RDATA(s_axi_conv_RDATA),
    .RRESP(s_axi_conv_RRESP),
    .BVALID(s_axi_conv_BVALID),
    .BREADY(s_axi_conv_BREADY),
    .BRESP(s_axi_conv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_r_address0(in_r_address0),
    .in_r_ce0(in_r_ce0),
    .in_r_q0(in_r_q0),
    .out_r_address0(out_addr_reg_645),
    .out_r_ce0(out_r_ce0),
    .out_r_we0(out_r_we0),
    .out_r_d0(out_r_d0),
    .krnl_address0(krnl_address0),
    .krnl_ce0(krnl_ce0),
    .krnl_q0(krnl_q0)
);

convolve_mul_6ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
convolve_mul_6ns_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

convolve_mul_6ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
convolve_mul_6ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

convolve_mul_6ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
convolve_mul_6ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

convolve_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mul_mul_cud_U3(
    .din0(reg_254),
    .din1(reg_250),
    .dout(tmp_3_fu_475_p2)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U4(
    .din0(reg_254),
    .din1(reg_250),
    .din2(tmp_3_reg_704),
    .dout(grp_fu_481_p3)
);

convolve_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mul_mul_cud_U5(
    .din0(reg_262),
    .din1(reg_258),
    .dout(tmp_22_1_fu_488_p2)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U6(
    .din0(reg_254),
    .din1(reg_250),
    .din2(tmp_22_1_reg_714),
    .dout(grp_fu_494_p3)
);

convolve_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mul_mul_cud_U7(
    .din0(reg_254),
    .din1(reg_250),
    .dout(tmp_22_1_2_fu_502_p2)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U8(
    .din0(reg_262),
    .din1(reg_258),
    .din2(tmp_22_1_2_reg_729),
    .dout(grp_fu_508_p3)
);

convolve_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mul_mul_cud_U9(
    .din0(krnl_load_8_reg_754),
    .din1(in_load_8_reg_749),
    .dout(tmp_22_2_2_fu_515_p2)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U10(
    .din0(reg_254),
    .din1(reg_250),
    .din2(grp_fu_527_p3),
    .dout(grp_fu_520_p3)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U11(
    .din0(reg_262),
    .din1(reg_258),
    .din2(tmp_22_2_2_reg_759),
    .dout(grp_fu_527_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_reg_238 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        c_reg_238 <= c_1_reg_679;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_347_p2 == 1'd1))) begin
        r1_reg_226 <= r_reg_600;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r1_reg_226 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_1_reg_679 <= c_1_fu_385_p2;
        tmp_12_reg_674 <= tmp_12_fu_381_p2;
        tmp_13_reg_684 <= tmp_13_fu_395_p2;
        tmp_14_reg_689 <= tmp_14_fu_400_p2;
        tmp_15_reg_694 <= tmp_15_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_addr_3_reg_630 <= tmp_7_cast_fu_321_p1;
        in_addr_4_reg_635 <= tmp_8_cast_fu_331_p1;
        in_addr_5_reg_640 <= tmp_9_cast_fu_342_p1;
        out_addr_reg_645 <= tmp_8_cast_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        in_load_8_reg_749 <= in_r_q0;
        krnl_load_8_reg_754 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_276_p2 == 1'd0))) begin
        r_reg_600 <= r_fu_288_p2;
        tmp_1_reg_595 <= tmp_1_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_250 <= in_r_q0;
        reg_254 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_258 <= in_r_q0;
        reg_262 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp1_reg_709 <= grp_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp4_reg_744 <= grp_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp5_reg_764 <= grp_fu_520_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_22_1_2_reg_729 <= tmp_22_1_2_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_22_1_reg_714 <= tmp_22_1_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_22_2_2_reg_759 <= tmp_22_2_2_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_3_reg_704 <= tmp_3_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_4_reg_585 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_5_reg_616 <= grp_fu_297_p2;
        tmp_6_reg_623 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_cast_cast_reg_658[5 : 0] <= tmp_cast_cast_fu_359_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_reg_724 <= tmp_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_347_p2))) begin
        tmp_s_reg_653 <= tmp_s_fu_353_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_276_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_276_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        in_r_address0 = tmp_15_cast_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        in_r_address0 = tmp_14_cast_fu_442_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        in_r_address0 = tmp_13_cast_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        in_r_address0 = in_addr_5_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        in_r_address0 = in_addr_4_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        in_r_address0 = in_addr_3_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        in_r_address0 = tmp_12_cast_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        in_r_address0 = tmp_11_cast_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_address0 = tmp_10_cast_fu_367_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        krnl_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        krnl_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        krnl_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        krnl_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        krnl_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        krnl_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        krnl_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        krnl_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        krnl_address0 = 32'd0;
    end else begin
        krnl_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        krnl_ce0 = 1'b1;
    end else begin
        krnl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_276_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_cast_cast_fu_391_p1 = c_1_fu_385_p2;

assign c_1_fu_385_p2 = (c_reg_238 + 6'd1);

assign c_cast7_cast_fu_312_p1 = c_reg_238;

assign exitcond1_fu_276_p2 = ((r1_reg_226 == 6'd49) ? 1'b1 : 1'b0);

assign exitcond_fu_347_p2 = ((c_reg_238 == 6'd49) ? 1'b1 : 1'b0);

assign grp_fu_270_p0 = grp_fu_270_p00;

assign grp_fu_270_p00 = r1_reg_226;

assign grp_fu_270_p1 = 12'd50;

assign grp_fu_297_p0 = grp_fu_297_p00;

assign grp_fu_297_p00 = tmp_1_reg_595;

assign grp_fu_297_p1 = 12'd50;

assign grp_fu_306_p0 = grp_fu_306_p00;

assign grp_fu_306_p00 = r_reg_600;

assign grp_fu_306_p1 = 12'd50;

assign out_r_d0 = (tmp_reg_724 + tmp3_fu_465_p2);

assign r_fu_288_p2 = (r1_reg_226 + 6'd1);

assign tmp3_fu_465_p2 = ($signed(tmp4_reg_744) + $signed(tmp5_reg_764));

assign tmp_10_cast_fu_367_p1 = tmp_10_fu_362_p2;

assign tmp_10_fu_362_p2 = (tmp_5_reg_616 + tmp_cast_cast_fu_359_p1);

assign tmp_11_cast_fu_376_p1 = tmp_11_fu_372_p2;

assign tmp_11_fu_372_p2 = (tmp_4_reg_585 + tmp_cast_cast_reg_658);

assign tmp_12_cast_fu_410_p1 = tmp_12_reg_674;

assign tmp_12_fu_381_p2 = (tmp_6_reg_623 + tmp_cast_cast_reg_658);

assign tmp_13_cast_fu_430_p1 = tmp_13_reg_684;

assign tmp_13_fu_395_p2 = (tmp_5_reg_616 + c_1_cast_cast_fu_391_p1);

assign tmp_14_cast_fu_442_p1 = tmp_14_reg_689;

assign tmp_14_fu_400_p2 = (tmp_4_reg_585 + c_1_cast_cast_fu_391_p1);

assign tmp_15_cast_fu_450_p1 = tmp_15_reg_694;

assign tmp_15_fu_405_p2 = (tmp_6_reg_623 + c_1_cast_cast_fu_391_p1);

assign tmp_1_fu_282_p2 = ($signed(r1_reg_226) + $signed(6'd63));

assign tmp_7_cast_fu_321_p1 = tmp_7_fu_316_p2;

assign tmp_7_fu_316_p2 = (tmp_5_reg_616 + c_cast7_cast_fu_312_p1);

assign tmp_8_cast_fu_331_p1 = tmp_8_fu_326_p2;

assign tmp_8_fu_326_p2 = (tmp_4_reg_585 + c_cast7_cast_fu_312_p1);

assign tmp_9_cast_fu_342_p1 = tmp_9_fu_337_p2;

assign tmp_9_fu_337_p2 = (tmp_6_reg_623 + c_cast7_cast_fu_312_p1);

assign tmp_cast_cast_fu_359_p1 = tmp_s_reg_653;

assign tmp_fu_434_p2 = ($signed(tmp1_reg_709) + $signed(grp_fu_494_p3));

assign tmp_s_fu_353_p2 = ($signed(c_reg_238) + $signed(6'd63));

always @ (posedge ap_clk) begin
    tmp_cast_cast_reg_658[11:6] <= 6'b000000;
end

endmodule //convolve
