-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
generic (
    C_S_AXI_CONV_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_CONV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_conv_AWVALID : IN STD_LOGIC;
    s_axi_conv_AWREADY : OUT STD_LOGIC;
    s_axi_conv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_WVALID : IN STD_LOGIC;
    s_axi_conv_WREADY : OUT STD_LOGIC;
    s_axi_conv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_ARVALID : IN STD_LOGIC;
    s_axi_conv_ARREADY : OUT STD_LOGIC;
    s_axi_conv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_RVALID : OUT STD_LOGIC;
    s_axi_conv_RREADY : IN STD_LOGIC;
    s_axi_conv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_BVALID : OUT STD_LOGIC;
    s_axi_conv_BREADY : IN STD_LOGIC;
    s_axi_conv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=32498,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=9,HLS_SYN_FF=1318,HLS_SYN_LUT=930}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_585 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_282_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_595 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_288_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_reg_600 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_616 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_reg_623 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_addr_3_reg_630 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_addr_4_reg_635 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_addr_5_reg_640 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_addr_reg_645 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_353_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_653 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_cast_fu_359_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_cast_reg_658 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_12_fu_381_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_reg_674 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_1_fu_385_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_reg_679 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_395_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_reg_684 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_400_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_reg_689 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_405_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_694 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_481_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_434_p2 : signal is "no";
    signal tmp_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_fu_502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_reg_729 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_744 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_8_reg_749 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal krnl_load_8_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_2_fu_515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_2_reg_759 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r1_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_238 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_7_cast_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast7_cast_fu_312_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_316_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_326_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_337_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_1_cast_cast_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp3_fu_465_p2 : signal is "no";
    signal grp_fu_527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_270_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_297_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_306_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component convolve_mul_6ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_mul_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_mac_muladEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_conv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolve_conv_s_axi_U : component convolve_conv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_AWVALID,
        AWREADY => s_axi_conv_AWREADY,
        AWADDR => s_axi_conv_AWADDR,
        WVALID => s_axi_conv_WVALID,
        WREADY => s_axi_conv_WREADY,
        WDATA => s_axi_conv_WDATA,
        WSTRB => s_axi_conv_WSTRB,
        ARVALID => s_axi_conv_ARVALID,
        ARREADY => s_axi_conv_ARREADY,
        ARADDR => s_axi_conv_ARADDR,
        RVALID => s_axi_conv_RVALID,
        RREADY => s_axi_conv_RREADY,
        RDATA => s_axi_conv_RDATA,
        RRESP => s_axi_conv_RRESP,
        BVALID => s_axi_conv_BVALID,
        BREADY => s_axi_conv_BREADY,
        BRESP => s_axi_conv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_addr_reg_645,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => out_r_d0,
        krnl_address0 => krnl_address0,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolve_mul_6ns_bkb_U0 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    convolve_mul_6ns_bkb_U1 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    convolve_mul_6ns_bkb_U2 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_306_p2);

    convolve_mul_mul_cud_U3 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_254,
        din1 => reg_250,
        dout => tmp_3_fu_475_p2);

    convolve_mac_muladEe_U4 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_254,
        din1 => reg_250,
        din2 => tmp_3_reg_704,
        dout => grp_fu_481_p3);

    convolve_mul_mul_cud_U5 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_262,
        din1 => reg_258,
        dout => tmp_22_1_fu_488_p2);

    convolve_mac_muladEe_U6 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_254,
        din1 => reg_250,
        din2 => tmp_22_1_reg_714,
        dout => grp_fu_494_p3);

    convolve_mul_mul_cud_U7 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_254,
        din1 => reg_250,
        dout => tmp_22_1_2_fu_502_p2);

    convolve_mac_muladEe_U8 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_262,
        din1 => reg_258,
        din2 => tmp_22_1_2_reg_729,
        dout => grp_fu_508_p3);

    convolve_mul_mul_cud_U9 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_8_reg_754,
        din1 => in_load_8_reg_749,
        dout => tmp_22_2_2_fu_515_p2);

    convolve_mac_muladEe_U10 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_254,
        din1 => reg_250,
        din2 => grp_fu_527_p3,
        dout => grp_fu_520_p3);

    convolve_mac_muladEe_U11 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_262,
        din1 => reg_258,
        din2 => tmp_22_2_2_reg_759,
        dout => grp_fu_527_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_reg_238 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                c_reg_238 <= c_1_reg_679;
            end if; 
        end if;
    end process;

    r1_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_347_p2 = ap_const_lv1_1))) then 
                r1_reg_226 <= r_reg_600;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_226 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                c_1_reg_679 <= c_1_fu_385_p2;
                tmp_12_reg_674 <= tmp_12_fu_381_p2;
                tmp_13_reg_684 <= tmp_13_fu_395_p2;
                tmp_14_reg_689 <= tmp_14_fu_400_p2;
                tmp_15_reg_694 <= tmp_15_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_addr_3_reg_630 <= tmp_7_cast_fu_321_p1(12 - 1 downto 0);
                in_addr_4_reg_635 <= tmp_8_cast_fu_331_p1(12 - 1 downto 0);
                in_addr_5_reg_640 <= tmp_9_cast_fu_342_p1(12 - 1 downto 0);
                out_addr_reg_645 <= tmp_8_cast_fu_331_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                in_load_8_reg_749 <= in_r_q0;
                krnl_load_8_reg_754 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_276_p2 = ap_const_lv1_0))) then
                r_reg_600 <= r_fu_288_p2;
                tmp_1_reg_595 <= tmp_1_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_250 <= in_r_q0;
                reg_254 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_258 <= in_r_q0;
                reg_262 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp1_reg_709 <= grp_fu_481_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp4_reg_744 <= grp_fu_508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp5_reg_764 <= grp_fu_520_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_22_1_2_reg_729 <= tmp_22_1_2_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_22_1_reg_714 <= tmp_22_1_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_22_2_2_reg_759 <= tmp_22_2_2_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_3_reg_704 <= tmp_3_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_4_reg_585 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_5_reg_616 <= grp_fu_297_p2;
                tmp_6_reg_623 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_cast_cast_reg_658(5 downto 0) <= tmp_cast_cast_fu_359_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_reg_724 <= tmp_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_347_p2))) then
                tmp_s_reg_653 <= tmp_s_fu_353_p2;
            end if;
        end if;
    end process;
    tmp_cast_cast_reg_658(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond1_fu_276_p2, ap_CS_fsm_state6, exitcond_fu_347_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_276_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_276_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_1_cast_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_1_fu_385_p2),12));
    c_1_fu_385_p2 <= std_logic_vector(unsigned(c_reg_238) + unsigned(ap_const_lv6_1));
    c_cast7_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_238),12));
    exitcond1_fu_276_p2 <= "1" when (r1_reg_226 = ap_const_lv6_31) else "0";
    exitcond_fu_347_p2 <= "1" when (c_reg_238 = ap_const_lv6_31) else "0";
    grp_fu_270_p0 <= grp_fu_270_p00(6 - 1 downto 0);
    grp_fu_270_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_226),12));
    grp_fu_270_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_297_p0 <= grp_fu_297_p00(6 - 1 downto 0);
    grp_fu_297_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_595),12));
    grp_fu_297_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_306_p0 <= grp_fu_306_p00(6 - 1 downto 0);
    grp_fu_306_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_600),12));
    grp_fu_306_p1 <= ap_const_lv12_32(7 - 1 downto 0);

    in_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, in_addr_3_reg_630, in_addr_4_reg_635, in_addr_5_reg_640, ap_CS_fsm_state7, tmp_10_cast_fu_367_p1, tmp_11_cast_fu_376_p1, tmp_12_cast_fu_410_p1, tmp_13_cast_fu_430_p1, tmp_14_cast_fu_442_p1, tmp_15_cast_fu_450_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_r_address0 <= tmp_15_cast_fu_450_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_r_address0 <= tmp_14_cast_fu_442_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= tmp_13_cast_fu_430_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_r_address0 <= in_addr_5_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_address0 <= in_addr_4_reg_635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_r_address0 <= in_addr_3_reg_630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_r_address0 <= tmp_12_cast_fu_410_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= tmp_11_cast_fu_376_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= tmp_10_cast_fu_367_p1(12 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    krnl_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            krnl_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            krnl_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            krnl_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            krnl_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            krnl_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            krnl_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            krnl_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            krnl_address0 <= "XXXX";
        end if; 
    end process;


    krnl_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(unsigned(tmp_reg_724) + unsigned(tmp3_fu_465_p2));

    out_r_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_288_p2 <= std_logic_vector(unsigned(r1_reg_226) + unsigned(ap_const_lv6_1));
    tmp3_fu_465_p2 <= std_logic_vector(signed(tmp4_reg_744) + signed(tmp5_reg_764));
    tmp_10_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_362_p2),32));
    tmp_10_fu_362_p2 <= std_logic_vector(unsigned(tmp_5_reg_616) + unsigned(tmp_cast_cast_fu_359_p1));
    tmp_11_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_372_p2),32));
    tmp_11_fu_372_p2 <= std_logic_vector(unsigned(tmp_4_reg_585) + unsigned(tmp_cast_cast_reg_658));
    tmp_12_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_674),32));
    tmp_12_fu_381_p2 <= std_logic_vector(unsigned(tmp_6_reg_623) + unsigned(tmp_cast_cast_reg_658));
    tmp_13_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_684),32));
    tmp_13_fu_395_p2 <= std_logic_vector(unsigned(tmp_5_reg_616) + unsigned(c_1_cast_cast_fu_391_p1));
    tmp_14_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_689),32));
    tmp_14_fu_400_p2 <= std_logic_vector(unsigned(tmp_4_reg_585) + unsigned(c_1_cast_cast_fu_391_p1));
    tmp_15_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_694),32));
    tmp_15_fu_405_p2 <= std_logic_vector(unsigned(tmp_6_reg_623) + unsigned(c_1_cast_cast_fu_391_p1));
    tmp_1_fu_282_p2 <= std_logic_vector(unsigned(r1_reg_226) + unsigned(ap_const_lv6_3F));
    tmp_7_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_316_p2),32));
    tmp_7_fu_316_p2 <= std_logic_vector(unsigned(tmp_5_reg_616) + unsigned(c_cast7_cast_fu_312_p1));
    tmp_8_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_326_p2),32));
    tmp_8_fu_326_p2 <= std_logic_vector(unsigned(tmp_4_reg_585) + unsigned(c_cast7_cast_fu_312_p1));
    tmp_9_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_337_p2),32));
    tmp_9_fu_337_p2 <= std_logic_vector(unsigned(tmp_6_reg_623) + unsigned(c_cast7_cast_fu_312_p1));
    tmp_cast_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_653),12));
    tmp_fu_434_p2 <= std_logic_vector(signed(tmp1_reg_709) + signed(grp_fu_494_p3));
    tmp_s_fu_353_p2 <= std_logic_vector(unsigned(c_reg_238) + unsigned(ap_const_lv6_3F));
end behav;
