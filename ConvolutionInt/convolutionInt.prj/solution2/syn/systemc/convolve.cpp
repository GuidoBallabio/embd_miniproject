// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolve.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolve::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> convolve::ap_ST_fsm_state1 = "1";
const sc_lv<19> convolve::ap_ST_fsm_state2 = "10";
const sc_lv<19> convolve::ap_ST_fsm_state3 = "100";
const sc_lv<19> convolve::ap_ST_fsm_state4 = "1000";
const sc_lv<19> convolve::ap_ST_fsm_state5 = "10000";
const sc_lv<19> convolve::ap_ST_fsm_state6 = "100000";
const sc_lv<19> convolve::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> convolve::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> convolve::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> convolve::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> convolve::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> convolve::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> convolve::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<19> convolve::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> convolve::ap_const_lv32_0 = "00000000000000000000000000000000";
const int convolve::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> convolve::ap_const_lv32_7 = "111";
const sc_lv<32> convolve::ap_const_lv32_8 = "1000";
const sc_lv<32> convolve::ap_const_lv32_9 = "1001";
const sc_lv<32> convolve::ap_const_lv32_C = "1100";
const sc_lv<32> convolve::ap_const_lv32_D = "1101";
const sc_lv<32> convolve::ap_const_lv32_A = "1010";
const sc_lv<32> convolve::ap_const_lv32_B = "1011";
const sc_lv<32> convolve::ap_const_lv32_E = "1110";
const sc_lv<32> convolve::ap_const_lv32_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_2 = "10";
const sc_lv<1> convolve::ap_const_lv1_0 = "0";
const sc_lv<32> convolve::ap_const_lv32_3 = "11";
const sc_lv<32> convolve::ap_const_lv32_4 = "100";
const sc_lv<32> convolve::ap_const_lv32_5 = "101";
const sc_lv<32> convolve::ap_const_lv32_6 = "110";
const sc_lv<32> convolve::ap_const_lv32_F = "1111";
const sc_lv<32> convolve::ap_const_lv32_10 = "10000";
const sc_lv<32> convolve::ap_const_lv32_11 = "10001";
const sc_lv<6> convolve::ap_const_lv6_1 = "1";
const sc_lv<1> convolve::ap_const_lv1_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_12 = "10010";
const sc_lv<12> convolve::ap_const_lv12_32 = "110010";
const sc_lv<6> convolve::ap_const_lv6_31 = "110001";
const sc_lv<6> convolve::ap_const_lv6_3F = "111111";
const bool convolve::ap_const_boolean_1 = true;

convolve::convolve(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolve_conv_s_axi_U = new convolve_conv_s_axi<C_S_AXI_CONV_ADDR_WIDTH,C_S_AXI_CONV_DATA_WIDTH>("convolve_conv_s_axi_U");
    convolve_conv_s_axi_U->AWVALID(s_axi_conv_AWVALID);
    convolve_conv_s_axi_U->AWREADY(s_axi_conv_AWREADY);
    convolve_conv_s_axi_U->AWADDR(s_axi_conv_AWADDR);
    convolve_conv_s_axi_U->WVALID(s_axi_conv_WVALID);
    convolve_conv_s_axi_U->WREADY(s_axi_conv_WREADY);
    convolve_conv_s_axi_U->WDATA(s_axi_conv_WDATA);
    convolve_conv_s_axi_U->WSTRB(s_axi_conv_WSTRB);
    convolve_conv_s_axi_U->ARVALID(s_axi_conv_ARVALID);
    convolve_conv_s_axi_U->ARREADY(s_axi_conv_ARREADY);
    convolve_conv_s_axi_U->ARADDR(s_axi_conv_ARADDR);
    convolve_conv_s_axi_U->RVALID(s_axi_conv_RVALID);
    convolve_conv_s_axi_U->RREADY(s_axi_conv_RREADY);
    convolve_conv_s_axi_U->RDATA(s_axi_conv_RDATA);
    convolve_conv_s_axi_U->RRESP(s_axi_conv_RRESP);
    convolve_conv_s_axi_U->BVALID(s_axi_conv_BVALID);
    convolve_conv_s_axi_U->BREADY(s_axi_conv_BREADY);
    convolve_conv_s_axi_U->BRESP(s_axi_conv_BRESP);
    convolve_conv_s_axi_U->ACLK(ap_clk);
    convolve_conv_s_axi_U->ARESET(ap_rst_n_inv);
    convolve_conv_s_axi_U->ACLK_EN(ap_var_for_const0);
    convolve_conv_s_axi_U->ap_start(ap_start);
    convolve_conv_s_axi_U->interrupt(interrupt);
    convolve_conv_s_axi_U->ap_ready(ap_ready);
    convolve_conv_s_axi_U->ap_done(ap_done);
    convolve_conv_s_axi_U->ap_idle(ap_idle);
    convolve_conv_s_axi_U->in_r_address0(in_r_address0);
    convolve_conv_s_axi_U->in_r_ce0(in_r_ce0);
    convolve_conv_s_axi_U->in_r_q0(in_r_q0);
    convolve_conv_s_axi_U->out_r_address0(out_addr_reg_645);
    convolve_conv_s_axi_U->out_r_ce0(out_r_ce0);
    convolve_conv_s_axi_U->out_r_we0(out_r_we0);
    convolve_conv_s_axi_U->out_r_d0(out_r_d0);
    convolve_conv_s_axi_U->krnl_address0(krnl_address0);
    convolve_conv_s_axi_U->krnl_ce0(krnl_ce0);
    convolve_conv_s_axi_U->krnl_q0(krnl_q0);
    convolve_mul_6ns_bkb_U0 = new convolve_mul_6ns_bkb<1,2,6,7,12>("convolve_mul_6ns_bkb_U0");
    convolve_mul_6ns_bkb_U0->clk(ap_clk);
    convolve_mul_6ns_bkb_U0->reset(ap_rst_n_inv);
    convolve_mul_6ns_bkb_U0->din0(grp_fu_270_p0);
    convolve_mul_6ns_bkb_U0->din1(grp_fu_270_p1);
    convolve_mul_6ns_bkb_U0->ce(ap_var_for_const0);
    convolve_mul_6ns_bkb_U0->dout(grp_fu_270_p2);
    convolve_mul_6ns_bkb_U1 = new convolve_mul_6ns_bkb<1,2,6,7,12>("convolve_mul_6ns_bkb_U1");
    convolve_mul_6ns_bkb_U1->clk(ap_clk);
    convolve_mul_6ns_bkb_U1->reset(ap_rst_n_inv);
    convolve_mul_6ns_bkb_U1->din0(grp_fu_297_p0);
    convolve_mul_6ns_bkb_U1->din1(grp_fu_297_p1);
    convolve_mul_6ns_bkb_U1->ce(ap_var_for_const0);
    convolve_mul_6ns_bkb_U1->dout(grp_fu_297_p2);
    convolve_mul_6ns_bkb_U2 = new convolve_mul_6ns_bkb<1,2,6,7,12>("convolve_mul_6ns_bkb_U2");
    convolve_mul_6ns_bkb_U2->clk(ap_clk);
    convolve_mul_6ns_bkb_U2->reset(ap_rst_n_inv);
    convolve_mul_6ns_bkb_U2->din0(grp_fu_306_p0);
    convolve_mul_6ns_bkb_U2->din1(grp_fu_306_p1);
    convolve_mul_6ns_bkb_U2->ce(ap_var_for_const0);
    convolve_mul_6ns_bkb_U2->dout(grp_fu_306_p2);
    convolve_mul_mul_cud_U3 = new convolve_mul_mul_cud<1,1,8,16,16>("convolve_mul_mul_cud_U3");
    convolve_mul_mul_cud_U3->din0(reg_254);
    convolve_mul_mul_cud_U3->din1(reg_250);
    convolve_mul_mul_cud_U3->dout(tmp_3_fu_475_p2);
    convolve_mac_muladEe_U4 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U4");
    convolve_mac_muladEe_U4->din0(reg_254);
    convolve_mac_muladEe_U4->din1(reg_250);
    convolve_mac_muladEe_U4->din2(tmp_3_reg_704);
    convolve_mac_muladEe_U4->dout(grp_fu_481_p3);
    convolve_mul_mul_cud_U5 = new convolve_mul_mul_cud<1,1,8,16,16>("convolve_mul_mul_cud_U5");
    convolve_mul_mul_cud_U5->din0(reg_262);
    convolve_mul_mul_cud_U5->din1(reg_258);
    convolve_mul_mul_cud_U5->dout(tmp_22_1_fu_488_p2);
    convolve_mac_muladEe_U6 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U6");
    convolve_mac_muladEe_U6->din0(reg_254);
    convolve_mac_muladEe_U6->din1(reg_250);
    convolve_mac_muladEe_U6->din2(tmp_22_1_reg_714);
    convolve_mac_muladEe_U6->dout(grp_fu_494_p3);
    convolve_mul_mul_cud_U7 = new convolve_mul_mul_cud<1,1,8,16,16>("convolve_mul_mul_cud_U7");
    convolve_mul_mul_cud_U7->din0(reg_254);
    convolve_mul_mul_cud_U7->din1(reg_250);
    convolve_mul_mul_cud_U7->dout(tmp_22_1_2_fu_502_p2);
    convolve_mac_muladEe_U8 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U8");
    convolve_mac_muladEe_U8->din0(reg_262);
    convolve_mac_muladEe_U8->din1(reg_258);
    convolve_mac_muladEe_U8->din2(tmp_22_1_2_reg_729);
    convolve_mac_muladEe_U8->dout(grp_fu_508_p3);
    convolve_mul_mul_cud_U9 = new convolve_mul_mul_cud<1,1,8,16,16>("convolve_mul_mul_cud_U9");
    convolve_mul_mul_cud_U9->din0(krnl_load_8_reg_754);
    convolve_mul_mul_cud_U9->din1(in_load_8_reg_749);
    convolve_mul_mul_cud_U9->dout(tmp_22_2_2_fu_515_p2);
    convolve_mac_muladEe_U10 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U10");
    convolve_mac_muladEe_U10->din0(reg_254);
    convolve_mac_muladEe_U10->din1(reg_250);
    convolve_mac_muladEe_U10->din2(grp_fu_527_p3);
    convolve_mac_muladEe_U10->dout(grp_fu_520_p3);
    convolve_mac_muladEe_U11 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U11");
    convolve_mac_muladEe_U11->din0(reg_262);
    convolve_mac_muladEe_U11->din1(reg_258);
    convolve_mac_muladEe_U11->din2(tmp_22_2_2_reg_759);
    convolve_mac_muladEe_U11->dout(grp_fu_527_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_276_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_276_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_1_cast_cast_fu_391_p1);
    sensitive << ( c_1_fu_385_p2 );

    SC_METHOD(thread_c_1_fu_385_p2);
    sensitive << ( c_reg_238 );

    SC_METHOD(thread_c_cast7_cast_fu_312_p1);
    sensitive << ( c_reg_238 );

    SC_METHOD(thread_exitcond1_fu_276_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r1_reg_226 );

    SC_METHOD(thread_exitcond_fu_347_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( c_reg_238 );

    SC_METHOD(thread_grp_fu_270_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_270_p00 );

    SC_METHOD(thread_grp_fu_270_p00);
    sensitive << ( r1_reg_226 );

    SC_METHOD(thread_grp_fu_270_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_297_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_fu_297_p00 );

    SC_METHOD(thread_grp_fu_297_p00);
    sensitive << ( tmp_1_reg_595 );

    SC_METHOD(thread_grp_fu_297_p1);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_306_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_fu_306_p00 );

    SC_METHOD(thread_grp_fu_306_p00);
    sensitive << ( r_reg_600 );

    SC_METHOD(thread_grp_fu_306_p1);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( in_addr_3_reg_630 );
    sensitive << ( in_addr_4_reg_635 );
    sensitive << ( in_addr_5_reg_640 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_10_cast_fu_367_p1 );
    sensitive << ( tmp_11_cast_fu_376_p1 );
    sensitive << ( tmp_12_cast_fu_410_p1 );
    sensitive << ( tmp_13_cast_fu_430_p1 );
    sensitive << ( tmp_14_cast_fu_442_p1 );
    sensitive << ( tmp_15_cast_fu_450_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_krnl_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_krnl_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( tmp_reg_724 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp3_fu_465_p2 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_r_fu_288_p2);
    sensitive << ( r1_reg_226 );

    SC_METHOD(thread_tmp3_fu_465_p2);
    sensitive << ( tmp4_reg_744 );
    sensitive << ( tmp5_reg_764 );

    SC_METHOD(thread_tmp_10_cast_fu_367_p1);
    sensitive << ( tmp_10_fu_362_p2 );

    SC_METHOD(thread_tmp_10_fu_362_p2);
    sensitive << ( tmp_5_reg_616 );
    sensitive << ( tmp_cast_cast_fu_359_p1 );

    SC_METHOD(thread_tmp_11_cast_fu_376_p1);
    sensitive << ( tmp_11_fu_372_p2 );

    SC_METHOD(thread_tmp_11_fu_372_p2);
    sensitive << ( tmp_4_reg_585 );
    sensitive << ( tmp_cast_cast_reg_658 );

    SC_METHOD(thread_tmp_12_cast_fu_410_p1);
    sensitive << ( tmp_12_reg_674 );

    SC_METHOD(thread_tmp_12_fu_381_p2);
    sensitive << ( tmp_6_reg_623 );
    sensitive << ( tmp_cast_cast_reg_658 );

    SC_METHOD(thread_tmp_13_cast_fu_430_p1);
    sensitive << ( tmp_13_reg_684 );

    SC_METHOD(thread_tmp_13_fu_395_p2);
    sensitive << ( tmp_5_reg_616 );
    sensitive << ( c_1_cast_cast_fu_391_p1 );

    SC_METHOD(thread_tmp_14_cast_fu_442_p1);
    sensitive << ( tmp_14_reg_689 );

    SC_METHOD(thread_tmp_14_fu_400_p2);
    sensitive << ( tmp_4_reg_585 );
    sensitive << ( c_1_cast_cast_fu_391_p1 );

    SC_METHOD(thread_tmp_15_cast_fu_450_p1);
    sensitive << ( tmp_15_reg_694 );

    SC_METHOD(thread_tmp_15_fu_405_p2);
    sensitive << ( tmp_6_reg_623 );
    sensitive << ( c_1_cast_cast_fu_391_p1 );

    SC_METHOD(thread_tmp_1_fu_282_p2);
    sensitive << ( r1_reg_226 );

    SC_METHOD(thread_tmp_7_cast_fu_321_p1);
    sensitive << ( tmp_7_fu_316_p2 );

    SC_METHOD(thread_tmp_7_fu_316_p2);
    sensitive << ( tmp_5_reg_616 );
    sensitive << ( c_cast7_cast_fu_312_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_331_p1);
    sensitive << ( tmp_8_fu_326_p2 );

    SC_METHOD(thread_tmp_8_fu_326_p2);
    sensitive << ( tmp_4_reg_585 );
    sensitive << ( c_cast7_cast_fu_312_p1 );

    SC_METHOD(thread_tmp_9_cast_fu_342_p1);
    sensitive << ( tmp_9_fu_337_p2 );

    SC_METHOD(thread_tmp_9_fu_337_p2);
    sensitive << ( tmp_6_reg_623 );
    sensitive << ( c_cast7_cast_fu_312_p1 );

    SC_METHOD(thread_tmp_cast_cast_fu_359_p1);
    sensitive << ( tmp_s_reg_653 );

    SC_METHOD(thread_tmp_fu_434_p2);
    sensitive << ( tmp1_reg_709 );
    sensitive << ( grp_fu_494_p3 );

    SC_METHOD(thread_tmp_s_fu_353_p2);
    sensitive << ( c_reg_238 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_276_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_347_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_conv_AWVALID, "(port)s_axi_conv_AWVALID");
    sc_trace(mVcdFile, s_axi_conv_AWREADY, "(port)s_axi_conv_AWREADY");
    sc_trace(mVcdFile, s_axi_conv_AWADDR, "(port)s_axi_conv_AWADDR");
    sc_trace(mVcdFile, s_axi_conv_WVALID, "(port)s_axi_conv_WVALID");
    sc_trace(mVcdFile, s_axi_conv_WREADY, "(port)s_axi_conv_WREADY");
    sc_trace(mVcdFile, s_axi_conv_WDATA, "(port)s_axi_conv_WDATA");
    sc_trace(mVcdFile, s_axi_conv_WSTRB, "(port)s_axi_conv_WSTRB");
    sc_trace(mVcdFile, s_axi_conv_ARVALID, "(port)s_axi_conv_ARVALID");
    sc_trace(mVcdFile, s_axi_conv_ARREADY, "(port)s_axi_conv_ARREADY");
    sc_trace(mVcdFile, s_axi_conv_ARADDR, "(port)s_axi_conv_ARADDR");
    sc_trace(mVcdFile, s_axi_conv_RVALID, "(port)s_axi_conv_RVALID");
    sc_trace(mVcdFile, s_axi_conv_RREADY, "(port)s_axi_conv_RREADY");
    sc_trace(mVcdFile, s_axi_conv_RDATA, "(port)s_axi_conv_RDATA");
    sc_trace(mVcdFile, s_axi_conv_RRESP, "(port)s_axi_conv_RRESP");
    sc_trace(mVcdFile, s_axi_conv_BVALID, "(port)s_axi_conv_BVALID");
    sc_trace(mVcdFile, s_axi_conv_BREADY, "(port)s_axi_conv_BREADY");
    sc_trace(mVcdFile, s_axi_conv_BRESP, "(port)s_axi_conv_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_r_address0, "in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "in_r_q0");
    sc_trace(mVcdFile, out_r_ce0, "out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "out_r_d0");
    sc_trace(mVcdFile, krnl_address0, "krnl_address0");
    sc_trace(mVcdFile, krnl_ce0, "krnl_ce0");
    sc_trace(mVcdFile, krnl_q0, "krnl_q0");
    sc_trace(mVcdFile, reg_250, "reg_250");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, reg_254, "reg_254");
    sc_trace(mVcdFile, reg_258, "reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, reg_262, "reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_270_p2, "grp_fu_270_p2");
    sc_trace(mVcdFile, tmp_4_reg_585, "tmp_4_reg_585");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_282_p2, "tmp_1_fu_282_p2");
    sc_trace(mVcdFile, tmp_1_reg_595, "tmp_1_reg_595");
    sc_trace(mVcdFile, exitcond1_fu_276_p2, "exitcond1_fu_276_p2");
    sc_trace(mVcdFile, r_fu_288_p2, "r_fu_288_p2");
    sc_trace(mVcdFile, r_reg_600, "r_reg_600");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_297_p2, "grp_fu_297_p2");
    sc_trace(mVcdFile, tmp_5_reg_616, "tmp_5_reg_616");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_306_p2, "grp_fu_306_p2");
    sc_trace(mVcdFile, tmp_6_reg_623, "tmp_6_reg_623");
    sc_trace(mVcdFile, in_addr_3_reg_630, "in_addr_3_reg_630");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, in_addr_4_reg_635, "in_addr_4_reg_635");
    sc_trace(mVcdFile, in_addr_5_reg_640, "in_addr_5_reg_640");
    sc_trace(mVcdFile, out_addr_reg_645, "out_addr_reg_645");
    sc_trace(mVcdFile, tmp_s_fu_353_p2, "tmp_s_fu_353_p2");
    sc_trace(mVcdFile, tmp_s_reg_653, "tmp_s_reg_653");
    sc_trace(mVcdFile, exitcond_fu_347_p2, "exitcond_fu_347_p2");
    sc_trace(mVcdFile, tmp_cast_cast_fu_359_p1, "tmp_cast_cast_fu_359_p1");
    sc_trace(mVcdFile, tmp_cast_cast_reg_658, "tmp_cast_cast_reg_658");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_12_fu_381_p2, "tmp_12_fu_381_p2");
    sc_trace(mVcdFile, tmp_12_reg_674, "tmp_12_reg_674");
    sc_trace(mVcdFile, c_1_fu_385_p2, "c_1_fu_385_p2");
    sc_trace(mVcdFile, c_1_reg_679, "c_1_reg_679");
    sc_trace(mVcdFile, tmp_13_fu_395_p2, "tmp_13_fu_395_p2");
    sc_trace(mVcdFile, tmp_13_reg_684, "tmp_13_reg_684");
    sc_trace(mVcdFile, tmp_14_fu_400_p2, "tmp_14_fu_400_p2");
    sc_trace(mVcdFile, tmp_14_reg_689, "tmp_14_reg_689");
    sc_trace(mVcdFile, tmp_15_fu_405_p2, "tmp_15_fu_405_p2");
    sc_trace(mVcdFile, tmp_15_reg_694, "tmp_15_reg_694");
    sc_trace(mVcdFile, tmp_3_fu_475_p2, "tmp_3_fu_475_p2");
    sc_trace(mVcdFile, tmp_3_reg_704, "tmp_3_reg_704");
    sc_trace(mVcdFile, grp_fu_481_p3, "grp_fu_481_p3");
    sc_trace(mVcdFile, tmp1_reg_709, "tmp1_reg_709");
    sc_trace(mVcdFile, tmp_22_1_fu_488_p2, "tmp_22_1_fu_488_p2");
    sc_trace(mVcdFile, tmp_22_1_reg_714, "tmp_22_1_reg_714");
    sc_trace(mVcdFile, tmp_fu_434_p2, "tmp_fu_434_p2");
    sc_trace(mVcdFile, tmp_reg_724, "tmp_reg_724");
    sc_trace(mVcdFile, tmp_22_1_2_fu_502_p2, "tmp_22_1_2_fu_502_p2");
    sc_trace(mVcdFile, tmp_22_1_2_reg_729, "tmp_22_1_2_reg_729");
    sc_trace(mVcdFile, grp_fu_508_p3, "grp_fu_508_p3");
    sc_trace(mVcdFile, tmp4_reg_744, "tmp4_reg_744");
    sc_trace(mVcdFile, in_load_8_reg_749, "in_load_8_reg_749");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, krnl_load_8_reg_754, "krnl_load_8_reg_754");
    sc_trace(mVcdFile, tmp_22_2_2_fu_515_p2, "tmp_22_2_2_fu_515_p2");
    sc_trace(mVcdFile, tmp_22_2_2_reg_759, "tmp_22_2_2_reg_759");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_520_p3, "grp_fu_520_p3");
    sc_trace(mVcdFile, tmp5_reg_764, "tmp5_reg_764");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, r1_reg_226, "r1_reg_226");
    sc_trace(mVcdFile, c_reg_238, "c_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_7_cast_fu_321_p1, "tmp_7_cast_fu_321_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_331_p1, "tmp_8_cast_fu_331_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_342_p1, "tmp_9_cast_fu_342_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_367_p1, "tmp_10_cast_fu_367_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_376_p1, "tmp_11_cast_fu_376_p1");
    sc_trace(mVcdFile, tmp_12_cast_fu_410_p1, "tmp_12_cast_fu_410_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_430_p1, "tmp_13_cast_fu_430_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_442_p1, "tmp_14_cast_fu_442_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_450_p1, "tmp_15_cast_fu_450_p1");
    sc_trace(mVcdFile, grp_fu_270_p0, "grp_fu_270_p0");
    sc_trace(mVcdFile, grp_fu_270_p1, "grp_fu_270_p1");
    sc_trace(mVcdFile, grp_fu_297_p0, "grp_fu_297_p0");
    sc_trace(mVcdFile, grp_fu_297_p1, "grp_fu_297_p1");
    sc_trace(mVcdFile, grp_fu_306_p0, "grp_fu_306_p0");
    sc_trace(mVcdFile, grp_fu_306_p1, "grp_fu_306_p1");
    sc_trace(mVcdFile, c_cast7_cast_fu_312_p1, "c_cast7_cast_fu_312_p1");
    sc_trace(mVcdFile, tmp_7_fu_316_p2, "tmp_7_fu_316_p2");
    sc_trace(mVcdFile, tmp_8_fu_326_p2, "tmp_8_fu_326_p2");
    sc_trace(mVcdFile, tmp_9_fu_337_p2, "tmp_9_fu_337_p2");
    sc_trace(mVcdFile, tmp_10_fu_362_p2, "tmp_10_fu_362_p2");
    sc_trace(mVcdFile, tmp_11_fu_372_p2, "tmp_11_fu_372_p2");
    sc_trace(mVcdFile, c_1_cast_cast_fu_391_p1, "c_1_cast_cast_fu_391_p1");
    sc_trace(mVcdFile, grp_fu_494_p3, "grp_fu_494_p3");
    sc_trace(mVcdFile, tmp3_fu_465_p2, "tmp3_fu_465_p2");
    sc_trace(mVcdFile, grp_fu_527_p3, "grp_fu_527_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_270_p00, "grp_fu_270_p00");
    sc_trace(mVcdFile, grp_fu_297_p00, "grp_fu_297_p00");
    sc_trace(mVcdFile, grp_fu_306_p00, "grp_fu_306_p00");
#endif

    }
    mHdltvinHandle.open("convolve.hdltvin.dat");
    mHdltvoutHandle.open("convolve.hdltvout.dat");
}

convolve::~convolve() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolve_conv_s_axi_U;
    delete convolve_mul_6ns_bkb_U0;
    delete convolve_mul_6ns_bkb_U1;
    delete convolve_mul_6ns_bkb_U2;
    delete convolve_mul_mul_cud_U3;
    delete convolve_mac_muladEe_U4;
    delete convolve_mul_mul_cud_U5;
    delete convolve_mac_muladEe_U6;
    delete convolve_mul_mul_cud_U7;
    delete convolve_mac_muladEe_U8;
    delete convolve_mul_mul_cud_U9;
    delete convolve_mac_muladEe_U10;
    delete convolve_mac_muladEe_U11;
}

void convolve::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolve::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        c_reg_238 = ap_const_lv6_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        c_reg_238 = c_1_reg_679.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_347_p2.read(), ap_const_lv1_1))) {
        r1_reg_226 = r_reg_600.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r1_reg_226 = ap_const_lv6_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        c_1_reg_679 = c_1_fu_385_p2.read();
        tmp_12_reg_674 = tmp_12_fu_381_p2.read();
        tmp_13_reg_684 = tmp_13_fu_395_p2.read();
        tmp_14_reg_689 = tmp_14_fu_400_p2.read();
        tmp_15_reg_694 = tmp_15_fu_405_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        in_addr_3_reg_630 =  (sc_lv<12>) (tmp_7_cast_fu_321_p1.read());
        in_addr_4_reg_635 =  (sc_lv<12>) (tmp_8_cast_fu_331_p1.read());
        in_addr_5_reg_640 =  (sc_lv<12>) (tmp_9_cast_fu_342_p1.read());
        out_addr_reg_645 =  (sc_lv<12>) (tmp_8_cast_fu_331_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        in_load_8_reg_749 = in_r_q0.read();
        krnl_load_8_reg_754 = krnl_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_276_p2.read(), ap_const_lv1_0))) {
        r_reg_600 = r_fu_288_p2.read();
        tmp_1_reg_595 = tmp_1_fu_282_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        reg_250 = in_r_q0.read();
        reg_254 = krnl_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_258 = in_r_q0.read();
        reg_262 = krnl_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp1_reg_709 = grp_fu_481_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp4_reg_744 = grp_fu_508_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tmp5_reg_764 = grp_fu_520_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        tmp_22_1_2_reg_729 = tmp_22_1_2_fu_502_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_22_1_reg_714 = tmp_22_1_fu_488_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        tmp_22_2_2_reg_759 = tmp_22_2_2_fu_515_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_3_reg_704 = tmp_3_fu_475_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_4_reg_585 = grp_fu_270_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_5_reg_616 = grp_fu_297_p2.read();
        tmp_6_reg_623 = grp_fu_306_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_cast_cast_reg_658 = tmp_cast_cast_fu_359_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_reg_724 = tmp_fu_434_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_347_p2.read()))) {
        tmp_s_reg_653 = tmp_s_fu_353_p2.read();
    }
}

void convolve::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolve::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void convolve::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void convolve::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void convolve::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void convolve::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void convolve::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void convolve::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void convolve::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void convolve::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void convolve::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void convolve::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolve::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolve::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolve::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolve::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolve::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolve::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void convolve::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void convolve::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_276_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolve::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_276_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolve::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void convolve::thread_c_1_cast_cast_fu_391_p1() {
    c_1_cast_cast_fu_391_p1 = esl_zext<12,6>(c_1_fu_385_p2.read());
}

void convolve::thread_c_1_fu_385_p2() {
    c_1_fu_385_p2 = (!c_reg_238.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_238.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_c_cast7_cast_fu_312_p1() {
    c_cast7_cast_fu_312_p1 = esl_zext<12,6>(c_reg_238.read());
}

void convolve::thread_exitcond1_fu_276_p2() {
    exitcond1_fu_276_p2 = (!r1_reg_226.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(r1_reg_226.read() == ap_const_lv6_31);
}

void convolve::thread_exitcond_fu_347_p2() {
    exitcond_fu_347_p2 = (!c_reg_238.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_238.read() == ap_const_lv6_31);
}

void convolve::thread_grp_fu_270_p0() {
    grp_fu_270_p0 =  (sc_lv<6>) (grp_fu_270_p00.read());
}

void convolve::thread_grp_fu_270_p00() {
    grp_fu_270_p00 = esl_zext<12,6>(r1_reg_226.read());
}

void convolve::thread_grp_fu_270_p1() {
    grp_fu_270_p1 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_297_p0() {
    grp_fu_297_p0 =  (sc_lv<6>) (grp_fu_297_p00.read());
}

void convolve::thread_grp_fu_297_p00() {
    grp_fu_297_p00 = esl_zext<12,6>(tmp_1_reg_595.read());
}

void convolve::thread_grp_fu_297_p1() {
    grp_fu_297_p1 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_306_p0() {
    grp_fu_306_p0 =  (sc_lv<6>) (grp_fu_306_p00.read());
}

void convolve::thread_grp_fu_306_p00() {
    grp_fu_306_p00 = esl_zext<12,6>(r_reg_600.read());
}

void convolve::thread_grp_fu_306_p1() {
    grp_fu_306_p1 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_in_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_15_cast_fu_450_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_14_cast_fu_442_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_13_cast_fu_430_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        in_r_address0 = in_addr_5_reg_640.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        in_r_address0 = in_addr_4_reg_635.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        in_r_address0 = in_addr_3_reg_630.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_12_cast_fu_410_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_11_cast_fu_376_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        in_r_address0 =  (sc_lv<12>) (tmp_10_cast_fu_367_p1.read());
    } else {
        in_r_address0 = "XXXXXXXXXXXX";
    }
}

void convolve::thread_in_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_krnl_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        krnl_address0 =  (sc_lv<4>) (ap_const_lv32_0);
    } else {
        krnl_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void convolve::thread_krnl_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        krnl_ce0 = ap_const_logic_1;
    } else {
        krnl_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_out_r_d0() {
    out_r_d0 = (!tmp_reg_724.read().is_01() || !tmp3_fu_465_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_reg_724.read()) + sc_biguint<16>(tmp3_fu_465_p2.read()));
}

void convolve::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void convolve::thread_r_fu_288_p2() {
    r_fu_288_p2 = (!r1_reg_226.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(r1_reg_226.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_tmp3_fu_465_p2() {
    tmp3_fu_465_p2 = (!tmp4_reg_744.read().is_01() || !tmp5_reg_764.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp4_reg_744.read()) + sc_bigint<16>(tmp5_reg_764.read()));
}

void convolve::thread_tmp_10_cast_fu_367_p1() {
    tmp_10_cast_fu_367_p1 = esl_zext<32,12>(tmp_10_fu_362_p2.read());
}

void convolve::thread_tmp_10_fu_362_p2() {
    tmp_10_fu_362_p2 = (!tmp_5_reg_616.read().is_01() || !tmp_cast_cast_fu_359_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_5_reg_616.read()) + sc_biguint<12>(tmp_cast_cast_fu_359_p1.read()));
}

void convolve::thread_tmp_11_cast_fu_376_p1() {
    tmp_11_cast_fu_376_p1 = esl_zext<32,12>(tmp_11_fu_372_p2.read());
}

void convolve::thread_tmp_11_fu_372_p2() {
    tmp_11_fu_372_p2 = (!tmp_4_reg_585.read().is_01() || !tmp_cast_cast_reg_658.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_4_reg_585.read()) + sc_biguint<12>(tmp_cast_cast_reg_658.read()));
}

void convolve::thread_tmp_12_cast_fu_410_p1() {
    tmp_12_cast_fu_410_p1 = esl_zext<32,12>(tmp_12_reg_674.read());
}

void convolve::thread_tmp_12_fu_381_p2() {
    tmp_12_fu_381_p2 = (!tmp_6_reg_623.read().is_01() || !tmp_cast_cast_reg_658.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_6_reg_623.read()) + sc_biguint<12>(tmp_cast_cast_reg_658.read()));
}

void convolve::thread_tmp_13_cast_fu_430_p1() {
    tmp_13_cast_fu_430_p1 = esl_zext<32,12>(tmp_13_reg_684.read());
}

void convolve::thread_tmp_13_fu_395_p2() {
    tmp_13_fu_395_p2 = (!tmp_5_reg_616.read().is_01() || !c_1_cast_cast_fu_391_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_5_reg_616.read()) + sc_biguint<12>(c_1_cast_cast_fu_391_p1.read()));
}

void convolve::thread_tmp_14_cast_fu_442_p1() {
    tmp_14_cast_fu_442_p1 = esl_zext<32,12>(tmp_14_reg_689.read());
}

void convolve::thread_tmp_14_fu_400_p2() {
    tmp_14_fu_400_p2 = (!tmp_4_reg_585.read().is_01() || !c_1_cast_cast_fu_391_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_4_reg_585.read()) + sc_biguint<12>(c_1_cast_cast_fu_391_p1.read()));
}

void convolve::thread_tmp_15_cast_fu_450_p1() {
    tmp_15_cast_fu_450_p1 = esl_zext<32,12>(tmp_15_reg_694.read());
}

void convolve::thread_tmp_15_fu_405_p2() {
    tmp_15_fu_405_p2 = (!tmp_6_reg_623.read().is_01() || !c_1_cast_cast_fu_391_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_6_reg_623.read()) + sc_biguint<12>(c_1_cast_cast_fu_391_p1.read()));
}

void convolve::thread_tmp_1_fu_282_p2() {
    tmp_1_fu_282_p2 = (!r1_reg_226.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_biguint<6>(r1_reg_226.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void convolve::thread_tmp_7_cast_fu_321_p1() {
    tmp_7_cast_fu_321_p1 = esl_zext<32,12>(tmp_7_fu_316_p2.read());
}

void convolve::thread_tmp_7_fu_316_p2() {
    tmp_7_fu_316_p2 = (!tmp_5_reg_616.read().is_01() || !c_cast7_cast_fu_312_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_5_reg_616.read()) + sc_biguint<12>(c_cast7_cast_fu_312_p1.read()));
}

void convolve::thread_tmp_8_cast_fu_331_p1() {
    tmp_8_cast_fu_331_p1 = esl_zext<32,12>(tmp_8_fu_326_p2.read());
}

void convolve::thread_tmp_8_fu_326_p2() {
    tmp_8_fu_326_p2 = (!tmp_4_reg_585.read().is_01() || !c_cast7_cast_fu_312_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_4_reg_585.read()) + sc_biguint<12>(c_cast7_cast_fu_312_p1.read()));
}

void convolve::thread_tmp_9_cast_fu_342_p1() {
    tmp_9_cast_fu_342_p1 = esl_zext<32,12>(tmp_9_fu_337_p2.read());
}

void convolve::thread_tmp_9_fu_337_p2() {
    tmp_9_fu_337_p2 = (!tmp_6_reg_623.read().is_01() || !c_cast7_cast_fu_312_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_6_reg_623.read()) + sc_biguint<12>(c_cast7_cast_fu_312_p1.read()));
}

void convolve::thread_tmp_cast_cast_fu_359_p1() {
    tmp_cast_cast_fu_359_p1 = esl_zext<12,6>(tmp_s_reg_653.read());
}

void convolve::thread_tmp_fu_434_p2() {
    tmp_fu_434_p2 = (!tmp1_reg_709.read().is_01() || !grp_fu_494_p3.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp1_reg_709.read()) + sc_bigint<16>(grp_fu_494_p3.read()));
}

void convolve::thread_tmp_s_fu_353_p2() {
    tmp_s_fu_353_p2 = (!c_reg_238.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_238.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void convolve::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_276_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_347_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void convolve::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWVALID\" :  \"" << s_axi_conv_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_conv_AWREADY\" :  \"" << s_axi_conv_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWADDR\" :  \"" << s_axi_conv_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WVALID\" :  \"" << s_axi_conv_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_WREADY\" :  \"" << s_axi_conv_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WDATA\" :  \"" << s_axi_conv_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WSTRB\" :  \"" << s_axi_conv_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARVALID\" :  \"" << s_axi_conv_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_ARREADY\" :  \"" << s_axi_conv_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARADDR\" :  \"" << s_axi_conv_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RVALID\" :  \"" << s_axi_conv_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_RREADY\" :  \"" << s_axi_conv_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RDATA\" :  \"" << s_axi_conv_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RRESP\" :  \"" << s_axi_conv_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BVALID\" :  \"" << s_axi_conv_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_BREADY\" :  \"" << s_axi_conv_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BRESP\" :  \"" << s_axi_conv_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

