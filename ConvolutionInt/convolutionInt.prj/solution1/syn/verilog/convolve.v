// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.946000,HLS_SYN_LAT=101522,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=2,HLS_SYN_FF=598,HLS_SYN_LUT=530}" *)

module convolve (
        ap_clk,
        ap_rst_n,
        s_axi_conv_AWVALID,
        s_axi_conv_AWREADY,
        s_axi_conv_AWADDR,
        s_axi_conv_WVALID,
        s_axi_conv_WREADY,
        s_axi_conv_WDATA,
        s_axi_conv_WSTRB,
        s_axi_conv_ARVALID,
        s_axi_conv_ARREADY,
        s_axi_conv_ARADDR,
        s_axi_conv_RVALID,
        s_axi_conv_RREADY,
        s_axi_conv_RDATA,
        s_axi_conv_RRESP,
        s_axi_conv_BVALID,
        s_axi_conv_BREADY,
        s_axi_conv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;
parameter    C_S_AXI_CONV_DATA_WIDTH = 32;
parameter    C_S_AXI_CONV_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_conv_AWVALID;
output   s_axi_conv_AWREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_AWADDR;
input   s_axi_conv_WVALID;
output   s_axi_conv_WREADY;
input  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_WDATA;
input  [C_S_AXI_CONV_WSTRB_WIDTH - 1:0] s_axi_conv_WSTRB;
input   s_axi_conv_ARVALID;
output   s_axi_conv_ARREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_ARADDR;
output   s_axi_conv_RVALID;
input   s_axi_conv_RREADY;
output  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_RDATA;
output  [1:0] s_axi_conv_RRESP;
output   s_axi_conv_BVALID;
input   s_axi_conv_BREADY;
output  [1:0] s_axi_conv_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [11:0] in_r_address0;
reg    in_r_ce0;
wire   [15:0] in_r_q0;
reg    out_r_ce0;
reg    out_r_we0;
reg    krnl_ce0;
wire   [7:0] krnl_q0;
wire    ap_CS_fsm_state2;
wire   [11:0] grp_fu_177_p2;
reg   [11:0] tmp_4_reg_339;
wire    ap_CS_fsm_state3;
reg   [11:0] out_addr_reg_347;
wire    ap_CS_fsm_state4;
wire   [5:0] r_fu_209_p2;
wire   [0:0] exitcond_fu_203_p2;
wire   [4:0] kc_cast3_cast_fu_215_p1;
reg   [4:0] kc_cast3_cast_reg_360;
wire    ap_CS_fsm_state5;
wire   [1:0] kc_1_fu_225_p2;
reg   [1:0] kc_1_reg_368;
wire   [11:0] col_offset_cast_cast_fu_247_p1;
reg   [11:0] col_offset_cast_cast_reg_373;
wire   [0:0] tmp_2_fu_219_p2;
wire   [5:0] c_1_fu_251_p2;
reg   [3:0] krnl_addr_reg_383;
wire    ap_CS_fsm_state6;
wire   [1:0] kr_1_fu_295_p2;
reg   [1:0] kr_1_reg_391;
wire   [1:0] tmp1_fu_301_p2;
reg  signed [1:0] tmp1_reg_396;
wire   [0:0] tmp_5_fu_289_p2;
wire    ap_CS_fsm_state7;
reg  signed [15:0] in_load_reg_406;
wire    ap_CS_fsm_state8;
reg  signed [7:0] krnl_load_reg_411;
wire  signed [15:0] grp_fu_327_p3;
wire    ap_CS_fsm_state9;
reg   [5:0] r1_reg_102;
reg   [5:0] c_reg_114;
wire   [0:0] exitcond9_fu_183_p2;
reg   [15:0] sum_reg_126;
reg   [1:0] kc_reg_139;
reg   [15:0] sum_1_reg_150;
reg   [1:0] kr_reg_162;
wire   [31:0] tmp_6_cast_fu_198_p1;
wire  signed [31:0] tmp_11_cast_fu_284_p1;
wire   [31:0] tmp_13_cast_fu_310_p1;
wire   [5:0] grp_fu_177_p0;
wire   [6:0] grp_fu_177_p1;
wire   [11:0] c_cast4_cast_fu_189_p1;
wire   [11:0] tmp_6_fu_193_p2;
wire   [1:0] tmp_fu_231_p2;
wire  signed [5:0] tmp_cast_fu_237_p1;
wire   [5:0] col_offset_fu_241_p2;
wire   [3:0] tmp_9_fu_261_p3;
wire   [4:0] p_shl_cast_fu_269_p1;
wire   [4:0] kr_cast2_cast_fu_257_p1;
wire   [4:0] tmp_s_fu_273_p2;
wire   [4:0] tmp_10_fu_279_p2;
wire   [11:0] grp_fu_317_p4;
wire   [6:0] grp_fu_317_p2;
wire   [5:0] grp_fu_317_p3;
reg   [8:0] ap_NS_fsm;
wire   [11:0] grp_fu_177_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

convolve_conv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONV_DATA_WIDTH ))
convolve_conv_s_axi_U(
    .AWVALID(s_axi_conv_AWVALID),
    .AWREADY(s_axi_conv_AWREADY),
    .AWADDR(s_axi_conv_AWADDR),
    .WVALID(s_axi_conv_WVALID),
    .WREADY(s_axi_conv_WREADY),
    .WDATA(s_axi_conv_WDATA),
    .WSTRB(s_axi_conv_WSTRB),
    .ARVALID(s_axi_conv_ARVALID),
    .ARREADY(s_axi_conv_ARREADY),
    .ARADDR(s_axi_conv_ARADDR),
    .RVALID(s_axi_conv_RVALID),
    .RREADY(s_axi_conv_RREADY),
    .RDATA(s_axi_conv_RDATA),
    .RRESP(s_axi_conv_RRESP),
    .BVALID(s_axi_conv_BVALID),
    .BREADY(s_axi_conv_BREADY),
    .BRESP(s_axi_conv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_r_address0(in_r_address0),
    .in_r_ce0(in_r_ce0),
    .in_r_q0(in_r_q0),
    .out_r_address0(out_addr_reg_347),
    .out_r_ce0(out_r_ce0),
    .out_r_we0(out_r_we0),
    .out_r_d0(sum_reg_126),
    .krnl_address0(krnl_addr_reg_383),
    .krnl_ce0(krnl_ce0),
    .krnl_q0(krnl_q0)
);

convolve_mul_6ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
convolve_mul_6ns_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

convolve_ama_addmcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
convolve_ama_addmcud_U1(
    .din0(r1_reg_102),
    .din1(tmp1_reg_396),
    .din2(grp_fu_317_p2),
    .din3(grp_fu_317_p3),
    .dout(grp_fu_317_p4)
);

convolve_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolve_mac_muladEe_U2(
    .din0(krnl_load_reg_411),
    .din1(in_load_reg_406),
    .din2(sum_1_reg_150),
    .dout(grp_fu_327_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_183_p2))) begin
        c_reg_114 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_219_p2))) begin
        c_reg_114 <= c_1_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_5_fu_289_p2))) begin
        kc_reg_139 <= kc_1_reg_368;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_203_p2 == 1'd0))) begin
        kc_reg_139 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kr_reg_162 <= kr_1_reg_391;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_219_p2 == 1'd0))) begin
        kr_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_203_p2 == 1'd1))) begin
        r1_reg_102 <= r_fu_209_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r1_reg_102 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_1_reg_150 <= grp_fu_327_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_219_p2 == 1'd0))) begin
        sum_1_reg_150 <= sum_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_5_fu_289_p2))) begin
        sum_reg_126 <= sum_1_reg_150;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_203_p2 == 1'd0))) begin
        sum_reg_126 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_219_p2 == 1'd0))) begin
        col_offset_cast_cast_reg_373[5 : 0] <= col_offset_cast_cast_fu_247_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_load_reg_406 <= in_r_q0;
        krnl_load_reg_411 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kc_1_reg_368 <= kc_1_fu_225_p2;
        kc_cast3_cast_reg_360[1 : 0] <= kc_cast3_cast_fu_215_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kr_1_reg_391 <= kr_1_fu_295_p2;
        krnl_addr_reg_383 <= tmp_11_cast_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_addr_reg_347 <= tmp_6_cast_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_5_fu_289_p2))) begin
        tmp1_reg_396 <= tmp1_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_4_reg_339 <= grp_fu_177_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_183_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_183_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        krnl_ce0 = 1'b1;
    end else begin
        krnl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_219_p2))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_183_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_203_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_219_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_5_fu_289_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_251_p2 = (c_reg_114 + 6'd1);

assign c_cast4_cast_fu_189_p1 = c_reg_114;

assign col_offset_cast_cast_fu_247_p1 = col_offset_fu_241_p2;

assign col_offset_fu_241_p2 = ($signed(c_reg_114) + $signed(tmp_cast_fu_237_p1));

assign exitcond9_fu_183_p2 = ((r1_reg_102 == 6'd49) ? 1'b1 : 1'b0);

assign exitcond_fu_203_p2 = ((c_reg_114 == 6'd49) ? 1'b1 : 1'b0);

assign grp_fu_177_p0 = grp_fu_177_p00;

assign grp_fu_177_p00 = r1_reg_102;

assign grp_fu_177_p1 = 12'd50;

assign grp_fu_317_p2 = 12'd50;

assign grp_fu_317_p3 = col_offset_cast_cast_reg_373;

assign in_r_address0 = tmp_13_cast_fu_310_p1;

assign kc_1_fu_225_p2 = (kc_reg_139 + 2'd1);

assign kc_cast3_cast_fu_215_p1 = kc_reg_139;

assign kr_1_fu_295_p2 = (kr_reg_162 + 2'd1);

assign kr_cast2_cast_fu_257_p1 = kr_reg_162;

assign p_shl_cast_fu_269_p1 = tmp_9_fu_261_p3;

assign r_fu_209_p2 = (r1_reg_102 + 6'd1);

assign tmp1_fu_301_p2 = ($signed(kr_reg_162) + $signed(2'd3));

assign tmp_10_fu_279_p2 = (tmp_s_fu_273_p2 + kc_cast3_cast_reg_360);

assign tmp_11_cast_fu_284_p1 = $signed(tmp_10_fu_279_p2);

assign tmp_13_cast_fu_310_p1 = grp_fu_317_p4;

assign tmp_2_fu_219_p2 = ((kc_reg_139 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_5_fu_289_p2 = ((kr_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_198_p1 = tmp_6_fu_193_p2;

assign tmp_6_fu_193_p2 = (tmp_4_reg_339 + c_cast4_cast_fu_189_p1);

assign tmp_9_fu_261_p3 = {{kr_reg_162}, {2'd0}};

assign tmp_cast_fu_237_p1 = $signed(tmp_fu_231_p2);

assign tmp_fu_231_p2 = ($signed(kc_reg_139) + $signed(2'd3));

assign tmp_s_fu_273_p2 = (p_shl_cast_fu_269_p1 - kr_cast2_cast_fu_257_p1);

always @ (posedge ap_clk) begin
    kc_cast3_cast_reg_360[4:2] <= 3'b000;
    col_offset_cast_cast_reg_373[11:6] <= 6'b000000;
end

endmodule //convolve
