-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
generic (
    C_S_AXI_CONV_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_CONV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_conv_AWVALID : IN STD_LOGIC;
    s_axi_conv_AWREADY : OUT STD_LOGIC;
    s_axi_conv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_WVALID : IN STD_LOGIC;
    s_axi_conv_WREADY : OUT STD_LOGIC;
    s_axi_conv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_ARVALID : IN STD_LOGIC;
    s_axi_conv_ARREADY : OUT STD_LOGIC;
    s_axi_conv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_RVALID : OUT STD_LOGIC;
    s_axi_conv_RREADY : IN STD_LOGIC;
    s_axi_conv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_BVALID : OUT STD_LOGIC;
    s_axi_conv_BREADY : IN STD_LOGIC;
    s_axi_conv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.946000,HLS_SYN_LAT=101522,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=2,HLS_SYN_FF=598,HLS_SYN_LUT=530}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_339 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_addr_reg_347 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_fu_209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_cast3_cast_fu_215_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_cast3_cast_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kc_1_fu_225_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_1_reg_368 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_cast_cast_fu_247_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_cast_cast_reg_373 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal krnl_addr_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kr_1_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kr_1_reg_391 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_reg_396 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_load_reg_406 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal krnl_load_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r1_reg_102 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_114 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond9_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal kc_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal kr_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_cast_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast4_cast_fu_189_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_193_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_231_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_cast_fu_237_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_261_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_269_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kr_cast2_cast_fu_257_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_273_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_317_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_317_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_177_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component convolve_mul_6ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_ama_addmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_mac_muladEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_conv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolve_conv_s_axi_U : component convolve_conv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_AWVALID,
        AWREADY => s_axi_conv_AWREADY,
        AWADDR => s_axi_conv_AWADDR,
        WVALID => s_axi_conv_WVALID,
        WREADY => s_axi_conv_WREADY,
        WDATA => s_axi_conv_WDATA,
        WSTRB => s_axi_conv_WSTRB,
        ARVALID => s_axi_conv_ARVALID,
        ARREADY => s_axi_conv_ARREADY,
        ARADDR => s_axi_conv_ARADDR,
        RVALID => s_axi_conv_RVALID,
        RREADY => s_axi_conv_RREADY,
        RDATA => s_axi_conv_RDATA,
        RRESP => s_axi_conv_RRESP,
        BVALID => s_axi_conv_BVALID,
        BREADY => s_axi_conv_BREADY,
        BRESP => s_axi_conv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_addr_reg_347,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => sum_reg_126,
        krnl_address0 => krnl_addr_reg_383,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolve_mul_6ns_bkb_U0 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    convolve_ama_addmcud_U1 : component convolve_ama_addmcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 2,
        din2_WIDTH => 7,
        din3_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => r1_reg_102,
        din1 => tmp1_reg_396,
        din2 => grp_fu_317_p2,
        din3 => grp_fu_317_p3,
        dout => grp_fu_317_p4);

    convolve_mac_muladEe_U2 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_reg_411,
        din1 => in_load_reg_406,
        din2 => sum_1_reg_150,
        dout => grp_fu_327_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_183_p2))) then 
                c_reg_114 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_219_p2))) then 
                c_reg_114 <= c_1_fu_251_p2;
            end if; 
        end if;
    end process;

    kc_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_5_fu_289_p2))) then 
                kc_reg_139 <= kc_1_reg_368;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_203_p2 = ap_const_lv1_0))) then 
                kc_reg_139 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    kr_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                kr_reg_162 <= kr_1_reg_391;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_219_p2 = ap_const_lv1_0))) then 
                kr_reg_162 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r1_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_203_p2 = ap_const_lv1_1))) then 
                r1_reg_102 <= r_fu_209_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_102 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    sum_1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sum_1_reg_150 <= grp_fu_327_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_219_p2 = ap_const_lv1_0))) then 
                sum_1_reg_150 <= sum_reg_126;
            end if; 
        end if;
    end process;

    sum_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_5_fu_289_p2))) then 
                sum_reg_126 <= sum_1_reg_150;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_203_p2 = ap_const_lv1_0))) then 
                sum_reg_126 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_219_p2 = ap_const_lv1_0))) then
                    col_offset_cast_cast_reg_373(5 downto 0) <= col_offset_cast_cast_fu_247_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                in_load_reg_406 <= in_r_q0;
                krnl_load_reg_411 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_1_reg_368 <= kc_1_fu_225_p2;
                    kc_cast3_cast_reg_360(1 downto 0) <= kc_cast3_cast_fu_215_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kr_1_reg_391 <= kr_1_fu_295_p2;
                krnl_addr_reg_383 <= tmp_11_cast_fu_284_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_addr_reg_347 <= tmp_6_cast_fu_198_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_5_fu_289_p2))) then
                tmp1_reg_396 <= tmp1_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_4_reg_339 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    kc_cast3_cast_reg_360(4 downto 2) <= "000";
    col_offset_cast_cast_reg_373(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_fu_203_p2, ap_CS_fsm_state5, tmp_2_fu_219_p2, ap_CS_fsm_state6, tmp_5_fu_289_p2, exitcond9_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_183_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_203_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_219_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_5_fu_289_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_183_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_183_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_183_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_183_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_1_fu_251_p2 <= std_logic_vector(unsigned(c_reg_114) + unsigned(ap_const_lv6_1));
    c_cast4_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_114),12));
    col_offset_cast_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_fu_241_p2),12));
    col_offset_fu_241_p2 <= std_logic_vector(unsigned(c_reg_114) + unsigned(tmp_cast_fu_237_p1));
    exitcond9_fu_183_p2 <= "1" when (r1_reg_102 = ap_const_lv6_31) else "0";
    exitcond_fu_203_p2 <= "1" when (c_reg_114 = ap_const_lv6_31) else "0";
    grp_fu_177_p0 <= grp_fu_177_p00(6 - 1 downto 0);
    grp_fu_177_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_102),12));
    grp_fu_177_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_317_p2 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_317_p3 <= col_offset_cast_cast_reg_373(6 - 1 downto 0);
    in_r_address0 <= tmp_13_cast_fu_310_p1(12 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kc_1_fu_225_p2 <= std_logic_vector(unsigned(kc_reg_139) + unsigned(ap_const_lv2_1));
    kc_cast3_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_139),5));
    kr_1_fu_295_p2 <= std_logic_vector(unsigned(kr_reg_162) + unsigned(ap_const_lv2_1));
    kr_cast2_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_162),5));

    krnl_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state5, tmp_2_fu_219_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_219_p2))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_261_p3),5));
    r_fu_209_p2 <= std_logic_vector(unsigned(r1_reg_102) + unsigned(ap_const_lv6_1));
    tmp1_fu_301_p2 <= std_logic_vector(unsigned(kr_reg_162) + unsigned(ap_const_lv2_3));
    tmp_10_fu_279_p2 <= std_logic_vector(unsigned(tmp_s_fu_273_p2) + unsigned(kc_cast3_cast_reg_360));
        tmp_11_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_279_p2),32));

    tmp_13_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_317_p4),32));
    tmp_2_fu_219_p2 <= "1" when (kc_reg_139 = ap_const_lv2_3) else "0";
    tmp_5_fu_289_p2 <= "1" when (kr_reg_162 = ap_const_lv2_3) else "0";
    tmp_6_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_193_p2),32));
    tmp_6_fu_193_p2 <= std_logic_vector(unsigned(tmp_4_reg_339) + unsigned(c_cast4_cast_fu_189_p1));
    tmp_9_fu_261_p3 <= (kr_reg_162 & ap_const_lv2_0);
        tmp_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_231_p2),6));

    tmp_fu_231_p2 <= std_logic_vector(unsigned(kc_reg_139) + unsigned(ap_const_lv2_3));
    tmp_s_fu_273_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_269_p1) - unsigned(kr_cast2_cast_fu_257_p1));
end behav;
