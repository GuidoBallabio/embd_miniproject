// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolve.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolve::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> convolve::ap_ST_fsm_state1 = "1";
const sc_lv<9> convolve::ap_ST_fsm_state2 = "10";
const sc_lv<9> convolve::ap_ST_fsm_state3 = "100";
const sc_lv<9> convolve::ap_ST_fsm_state4 = "1000";
const sc_lv<9> convolve::ap_ST_fsm_state5 = "10000";
const sc_lv<9> convolve::ap_ST_fsm_state6 = "100000";
const sc_lv<9> convolve::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> convolve::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> convolve::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> convolve::ap_const_lv32_0 = "00000000000000000000000000000000";
const int convolve::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> convolve::ap_const_lv32_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_2 = "10";
const sc_lv<32> convolve::ap_const_lv32_3 = "11";
const sc_lv<1> convolve::ap_const_lv1_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_4 = "100";
const sc_lv<1> convolve::ap_const_lv1_0 = "0";
const sc_lv<32> convolve::ap_const_lv32_5 = "101";
const sc_lv<32> convolve::ap_const_lv32_6 = "110";
const sc_lv<32> convolve::ap_const_lv32_7 = "111";
const sc_lv<32> convolve::ap_const_lv32_8 = "1000";
const sc_lv<6> convolve::ap_const_lv6_1 = "1";
const sc_lv<16> convolve::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> convolve::ap_const_lv2_0 = "00";
const sc_lv<12> convolve::ap_const_lv12_32 = "110010";
const sc_lv<6> convolve::ap_const_lv6_31 = "110001";
const sc_lv<2> convolve::ap_const_lv2_3 = "11";
const sc_lv<2> convolve::ap_const_lv2_1 = "1";
const bool convolve::ap_const_boolean_1 = true;

convolve::convolve(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolve_conv_s_axi_U = new convolve_conv_s_axi<C_S_AXI_CONV_ADDR_WIDTH,C_S_AXI_CONV_DATA_WIDTH>("convolve_conv_s_axi_U");
    convolve_conv_s_axi_U->AWVALID(s_axi_conv_AWVALID);
    convolve_conv_s_axi_U->AWREADY(s_axi_conv_AWREADY);
    convolve_conv_s_axi_U->AWADDR(s_axi_conv_AWADDR);
    convolve_conv_s_axi_U->WVALID(s_axi_conv_WVALID);
    convolve_conv_s_axi_U->WREADY(s_axi_conv_WREADY);
    convolve_conv_s_axi_U->WDATA(s_axi_conv_WDATA);
    convolve_conv_s_axi_U->WSTRB(s_axi_conv_WSTRB);
    convolve_conv_s_axi_U->ARVALID(s_axi_conv_ARVALID);
    convolve_conv_s_axi_U->ARREADY(s_axi_conv_ARREADY);
    convolve_conv_s_axi_U->ARADDR(s_axi_conv_ARADDR);
    convolve_conv_s_axi_U->RVALID(s_axi_conv_RVALID);
    convolve_conv_s_axi_U->RREADY(s_axi_conv_RREADY);
    convolve_conv_s_axi_U->RDATA(s_axi_conv_RDATA);
    convolve_conv_s_axi_U->RRESP(s_axi_conv_RRESP);
    convolve_conv_s_axi_U->BVALID(s_axi_conv_BVALID);
    convolve_conv_s_axi_U->BREADY(s_axi_conv_BREADY);
    convolve_conv_s_axi_U->BRESP(s_axi_conv_BRESP);
    convolve_conv_s_axi_U->ACLK(ap_clk);
    convolve_conv_s_axi_U->ARESET(ap_rst_n_inv);
    convolve_conv_s_axi_U->ACLK_EN(ap_var_for_const0);
    convolve_conv_s_axi_U->ap_start(ap_start);
    convolve_conv_s_axi_U->interrupt(interrupt);
    convolve_conv_s_axi_U->ap_ready(ap_ready);
    convolve_conv_s_axi_U->ap_done(ap_done);
    convolve_conv_s_axi_U->ap_idle(ap_idle);
    convolve_conv_s_axi_U->in_r_address0(in_r_address0);
    convolve_conv_s_axi_U->in_r_ce0(in_r_ce0);
    convolve_conv_s_axi_U->in_r_q0(in_r_q0);
    convolve_conv_s_axi_U->out_r_address0(out_addr_reg_347);
    convolve_conv_s_axi_U->out_r_ce0(out_r_ce0);
    convolve_conv_s_axi_U->out_r_we0(out_r_we0);
    convolve_conv_s_axi_U->out_r_d0(sum_reg_126);
    convolve_conv_s_axi_U->krnl_address0(krnl_addr_reg_383);
    convolve_conv_s_axi_U->krnl_ce0(krnl_ce0);
    convolve_conv_s_axi_U->krnl_q0(krnl_q0);
    convolve_mul_6ns_bkb_U0 = new convolve_mul_6ns_bkb<1,2,6,7,12>("convolve_mul_6ns_bkb_U0");
    convolve_mul_6ns_bkb_U0->clk(ap_clk);
    convolve_mul_6ns_bkb_U0->reset(ap_rst_n_inv);
    convolve_mul_6ns_bkb_U0->din0(grp_fu_177_p0);
    convolve_mul_6ns_bkb_U0->din1(grp_fu_177_p1);
    convolve_mul_6ns_bkb_U0->ce(ap_var_for_const0);
    convolve_mul_6ns_bkb_U0->dout(grp_fu_177_p2);
    convolve_ama_addmcud_U1 = new convolve_ama_addmcud<1,1,6,2,7,6,12>("convolve_ama_addmcud_U1");
    convolve_ama_addmcud_U1->din0(r1_reg_102);
    convolve_ama_addmcud_U1->din1(tmp1_reg_396);
    convolve_ama_addmcud_U1->din2(grp_fu_317_p2);
    convolve_ama_addmcud_U1->din3(grp_fu_317_p3);
    convolve_ama_addmcud_U1->dout(grp_fu_317_p4);
    convolve_mac_muladEe_U2 = new convolve_mac_muladEe<1,1,8,16,16,16>("convolve_mac_muladEe_U2");
    convolve_mac_muladEe_U2->din0(krnl_load_reg_411);
    convolve_mac_muladEe_U2->din1(in_load_reg_406);
    convolve_mac_muladEe_U2->din2(sum_1_reg_150);
    convolve_mac_muladEe_U2->dout(grp_fu_327_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_183_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_183_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_1_fu_251_p2);
    sensitive << ( c_reg_114 );

    SC_METHOD(thread_c_cast4_cast_fu_189_p1);
    sensitive << ( c_reg_114 );

    SC_METHOD(thread_col_offset_cast_cast_fu_247_p1);
    sensitive << ( col_offset_fu_241_p2 );

    SC_METHOD(thread_col_offset_fu_241_p2);
    sensitive << ( c_reg_114 );
    sensitive << ( tmp_cast_fu_237_p1 );

    SC_METHOD(thread_exitcond9_fu_183_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r1_reg_102 );

    SC_METHOD(thread_exitcond_fu_203_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( c_reg_114 );

    SC_METHOD(thread_grp_fu_177_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_177_p00 );

    SC_METHOD(thread_grp_fu_177_p00);
    sensitive << ( r1_reg_102 );

    SC_METHOD(thread_grp_fu_177_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_317_p2);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_317_p3);
    sensitive << ( col_offset_cast_cast_reg_373 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_13_cast_fu_310_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_kc_1_fu_225_p2);
    sensitive << ( kc_reg_139 );

    SC_METHOD(thread_kc_cast3_cast_fu_215_p1);
    sensitive << ( kc_reg_139 );

    SC_METHOD(thread_kr_1_fu_295_p2);
    sensitive << ( kr_reg_162 );

    SC_METHOD(thread_kr_cast2_cast_fu_257_p1);
    sensitive << ( kr_reg_162 );

    SC_METHOD(thread_krnl_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_fu_219_p2 );

    SC_METHOD(thread_p_shl_cast_fu_269_p1);
    sensitive << ( tmp_9_fu_261_p3 );

    SC_METHOD(thread_r_fu_209_p2);
    sensitive << ( r1_reg_102 );

    SC_METHOD(thread_tmp1_fu_301_p2);
    sensitive << ( kr_reg_162 );

    SC_METHOD(thread_tmp_10_fu_279_p2);
    sensitive << ( kc_cast3_cast_reg_360 );
    sensitive << ( tmp_s_fu_273_p2 );

    SC_METHOD(thread_tmp_11_cast_fu_284_p1);
    sensitive << ( tmp_10_fu_279_p2 );

    SC_METHOD(thread_tmp_13_cast_fu_310_p1);
    sensitive << ( grp_fu_317_p4 );

    SC_METHOD(thread_tmp_2_fu_219_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( kc_reg_139 );

    SC_METHOD(thread_tmp_5_fu_289_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( kr_reg_162 );

    SC_METHOD(thread_tmp_6_cast_fu_198_p1);
    sensitive << ( tmp_6_fu_193_p2 );

    SC_METHOD(thread_tmp_6_fu_193_p2);
    sensitive << ( tmp_4_reg_339 );
    sensitive << ( c_cast4_cast_fu_189_p1 );

    SC_METHOD(thread_tmp_9_fu_261_p3);
    sensitive << ( kr_reg_162 );

    SC_METHOD(thread_tmp_cast_fu_237_p1);
    sensitive << ( tmp_fu_231_p2 );

    SC_METHOD(thread_tmp_fu_231_p2);
    sensitive << ( kc_reg_139 );

    SC_METHOD(thread_tmp_s_fu_273_p2);
    sensitive << ( p_shl_cast_fu_269_p1 );
    sensitive << ( kr_cast2_cast_fu_257_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_203_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_fu_219_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_289_p2 );
    sensitive << ( exitcond9_fu_183_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_conv_AWVALID, "(port)s_axi_conv_AWVALID");
    sc_trace(mVcdFile, s_axi_conv_AWREADY, "(port)s_axi_conv_AWREADY");
    sc_trace(mVcdFile, s_axi_conv_AWADDR, "(port)s_axi_conv_AWADDR");
    sc_trace(mVcdFile, s_axi_conv_WVALID, "(port)s_axi_conv_WVALID");
    sc_trace(mVcdFile, s_axi_conv_WREADY, "(port)s_axi_conv_WREADY");
    sc_trace(mVcdFile, s_axi_conv_WDATA, "(port)s_axi_conv_WDATA");
    sc_trace(mVcdFile, s_axi_conv_WSTRB, "(port)s_axi_conv_WSTRB");
    sc_trace(mVcdFile, s_axi_conv_ARVALID, "(port)s_axi_conv_ARVALID");
    sc_trace(mVcdFile, s_axi_conv_ARREADY, "(port)s_axi_conv_ARREADY");
    sc_trace(mVcdFile, s_axi_conv_ARADDR, "(port)s_axi_conv_ARADDR");
    sc_trace(mVcdFile, s_axi_conv_RVALID, "(port)s_axi_conv_RVALID");
    sc_trace(mVcdFile, s_axi_conv_RREADY, "(port)s_axi_conv_RREADY");
    sc_trace(mVcdFile, s_axi_conv_RDATA, "(port)s_axi_conv_RDATA");
    sc_trace(mVcdFile, s_axi_conv_RRESP, "(port)s_axi_conv_RRESP");
    sc_trace(mVcdFile, s_axi_conv_BVALID, "(port)s_axi_conv_BVALID");
    sc_trace(mVcdFile, s_axi_conv_BREADY, "(port)s_axi_conv_BREADY");
    sc_trace(mVcdFile, s_axi_conv_BRESP, "(port)s_axi_conv_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_r_address0, "in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "in_r_q0");
    sc_trace(mVcdFile, out_r_ce0, "out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "out_r_we0");
    sc_trace(mVcdFile, krnl_ce0, "krnl_ce0");
    sc_trace(mVcdFile, krnl_q0, "krnl_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_177_p2, "grp_fu_177_p2");
    sc_trace(mVcdFile, tmp_4_reg_339, "tmp_4_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, out_addr_reg_347, "out_addr_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, r_fu_209_p2, "r_fu_209_p2");
    sc_trace(mVcdFile, exitcond_fu_203_p2, "exitcond_fu_203_p2");
    sc_trace(mVcdFile, kc_cast3_cast_fu_215_p1, "kc_cast3_cast_fu_215_p1");
    sc_trace(mVcdFile, kc_cast3_cast_reg_360, "kc_cast3_cast_reg_360");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, kc_1_fu_225_p2, "kc_1_fu_225_p2");
    sc_trace(mVcdFile, kc_1_reg_368, "kc_1_reg_368");
    sc_trace(mVcdFile, col_offset_cast_cast_fu_247_p1, "col_offset_cast_cast_fu_247_p1");
    sc_trace(mVcdFile, col_offset_cast_cast_reg_373, "col_offset_cast_cast_reg_373");
    sc_trace(mVcdFile, tmp_2_fu_219_p2, "tmp_2_fu_219_p2");
    sc_trace(mVcdFile, c_1_fu_251_p2, "c_1_fu_251_p2");
    sc_trace(mVcdFile, krnl_addr_reg_383, "krnl_addr_reg_383");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, kr_1_fu_295_p2, "kr_1_fu_295_p2");
    sc_trace(mVcdFile, kr_1_reg_391, "kr_1_reg_391");
    sc_trace(mVcdFile, tmp1_fu_301_p2, "tmp1_fu_301_p2");
    sc_trace(mVcdFile, tmp1_reg_396, "tmp1_reg_396");
    sc_trace(mVcdFile, tmp_5_fu_289_p2, "tmp_5_fu_289_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, in_load_reg_406, "in_load_reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, krnl_load_reg_411, "krnl_load_reg_411");
    sc_trace(mVcdFile, grp_fu_327_p3, "grp_fu_327_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, r1_reg_102, "r1_reg_102");
    sc_trace(mVcdFile, c_reg_114, "c_reg_114");
    sc_trace(mVcdFile, exitcond9_fu_183_p2, "exitcond9_fu_183_p2");
    sc_trace(mVcdFile, sum_reg_126, "sum_reg_126");
    sc_trace(mVcdFile, kc_reg_139, "kc_reg_139");
    sc_trace(mVcdFile, sum_1_reg_150, "sum_1_reg_150");
    sc_trace(mVcdFile, kr_reg_162, "kr_reg_162");
    sc_trace(mVcdFile, tmp_6_cast_fu_198_p1, "tmp_6_cast_fu_198_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_284_p1, "tmp_11_cast_fu_284_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_310_p1, "tmp_13_cast_fu_310_p1");
    sc_trace(mVcdFile, grp_fu_177_p0, "grp_fu_177_p0");
    sc_trace(mVcdFile, grp_fu_177_p1, "grp_fu_177_p1");
    sc_trace(mVcdFile, c_cast4_cast_fu_189_p1, "c_cast4_cast_fu_189_p1");
    sc_trace(mVcdFile, tmp_6_fu_193_p2, "tmp_6_fu_193_p2");
    sc_trace(mVcdFile, tmp_fu_231_p2, "tmp_fu_231_p2");
    sc_trace(mVcdFile, tmp_cast_fu_237_p1, "tmp_cast_fu_237_p1");
    sc_trace(mVcdFile, col_offset_fu_241_p2, "col_offset_fu_241_p2");
    sc_trace(mVcdFile, tmp_9_fu_261_p3, "tmp_9_fu_261_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_269_p1, "p_shl_cast_fu_269_p1");
    sc_trace(mVcdFile, kr_cast2_cast_fu_257_p1, "kr_cast2_cast_fu_257_p1");
    sc_trace(mVcdFile, tmp_s_fu_273_p2, "tmp_s_fu_273_p2");
    sc_trace(mVcdFile, tmp_10_fu_279_p2, "tmp_10_fu_279_p2");
    sc_trace(mVcdFile, grp_fu_317_p4, "grp_fu_317_p4");
    sc_trace(mVcdFile, grp_fu_317_p2, "grp_fu_317_p2");
    sc_trace(mVcdFile, grp_fu_317_p3, "grp_fu_317_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_177_p00, "grp_fu_177_p00");
#endif

    }
    mHdltvinHandle.open("convolve.hdltvin.dat");
    mHdltvoutHandle.open("convolve.hdltvout.dat");
}

convolve::~convolve() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolve_conv_s_axi_U;
    delete convolve_mul_6ns_bkb_U0;
    delete convolve_ama_addmcud_U1;
    delete convolve_mac_muladEe_U2;
}

void convolve::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolve::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_183_p2.read()))) {
        c_reg_114 = ap_const_lv6_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_219_p2.read()))) {
        c_reg_114 = c_1_fu_251_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_289_p2.read()))) {
        kc_reg_139 = kc_1_reg_368.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_0))) {
        kc_reg_139 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        kr_reg_162 = kr_1_reg_391.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_219_p2.read(), ap_const_lv1_0))) {
        kr_reg_162 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
        r1_reg_102 = r_fu_209_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r1_reg_102 = ap_const_lv6_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sum_1_reg_150 = grp_fu_327_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_219_p2.read(), ap_const_lv1_0))) {
        sum_1_reg_150 = sum_reg_126.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_289_p2.read()))) {
        sum_reg_126 = sum_1_reg_150.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_0))) {
        sum_reg_126 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_2_fu_219_p2.read(), ap_const_lv1_0))) {
        col_offset_cast_cast_reg_373 = col_offset_cast_cast_fu_247_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        in_load_reg_406 = in_r_q0.read();
        krnl_load_reg_411 = krnl_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        kc_1_reg_368 = kc_1_fu_225_p2.read();
        kc_cast3_cast_reg_360 = kc_cast3_cast_fu_215_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        kr_1_reg_391 = kr_1_fu_295_p2.read();
        krnl_addr_reg_383 =  (sc_lv<4>) (tmp_11_cast_fu_284_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_addr_reg_347 =  (sc_lv<12>) (tmp_6_cast_fu_198_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_289_p2.read()))) {
        tmp1_reg_396 = tmp1_fu_301_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_4_reg_339 = grp_fu_177_p2.read();
    }
}

void convolve::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolve::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolve::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolve::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolve::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolve::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolve::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolve::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void convolve::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void convolve::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_183_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolve::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_183_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolve::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void convolve::thread_c_1_fu_251_p2() {
    c_1_fu_251_p2 = (!c_reg_114.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_114.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_c_cast4_cast_fu_189_p1() {
    c_cast4_cast_fu_189_p1 = esl_zext<12,6>(c_reg_114.read());
}

void convolve::thread_col_offset_cast_cast_fu_247_p1() {
    col_offset_cast_cast_fu_247_p1 = esl_zext<12,6>(col_offset_fu_241_p2.read());
}

void convolve::thread_col_offset_fu_241_p2() {
    col_offset_fu_241_p2 = (!c_reg_114.read().is_01() || !tmp_cast_fu_237_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_114.read()) + sc_bigint<6>(tmp_cast_fu_237_p1.read()));
}

void convolve::thread_exitcond9_fu_183_p2() {
    exitcond9_fu_183_p2 = (!r1_reg_102.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(r1_reg_102.read() == ap_const_lv6_31);
}

void convolve::thread_exitcond_fu_203_p2() {
    exitcond_fu_203_p2 = (!c_reg_114.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_114.read() == ap_const_lv6_31);
}

void convolve::thread_grp_fu_177_p0() {
    grp_fu_177_p0 =  (sc_lv<6>) (grp_fu_177_p00.read());
}

void convolve::thread_grp_fu_177_p00() {
    grp_fu_177_p00 = esl_zext<12,6>(r1_reg_102.read());
}

void convolve::thread_grp_fu_177_p1() {
    grp_fu_177_p1 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_317_p2() {
    grp_fu_317_p2 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_317_p3() {
    grp_fu_317_p3 =  (sc_lv<6>) (col_offset_cast_cast_reg_373.read());
}

void convolve::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<12>) (tmp_13_cast_fu_310_p1.read());
}

void convolve::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_kc_1_fu_225_p2() {
    kc_1_fu_225_p2 = (!kc_reg_139.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kc_reg_139.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve::thread_kc_cast3_cast_fu_215_p1() {
    kc_cast3_cast_fu_215_p1 = esl_zext<5,2>(kc_reg_139.read());
}

void convolve::thread_kr_1_fu_295_p2() {
    kr_1_fu_295_p2 = (!kr_reg_162.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kr_reg_162.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve::thread_kr_cast2_cast_fu_257_p1() {
    kr_cast2_cast_fu_257_p1 = esl_zext<5,2>(kr_reg_162.read());
}

void convolve::thread_krnl_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        krnl_ce0 = ap_const_logic_1;
    } else {
        krnl_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_219_p2.read()))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void convolve::thread_p_shl_cast_fu_269_p1() {
    p_shl_cast_fu_269_p1 = esl_zext<5,4>(tmp_9_fu_261_p3.read());
}

void convolve::thread_r_fu_209_p2() {
    r_fu_209_p2 = (!r1_reg_102.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(r1_reg_102.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_tmp1_fu_301_p2() {
    tmp1_fu_301_p2 = (!kr_reg_162.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<2>(): (sc_biguint<2>(kr_reg_162.read()) + sc_bigint<2>(ap_const_lv2_3));
}

void convolve::thread_tmp_10_fu_279_p2() {
    tmp_10_fu_279_p2 = (!tmp_s_fu_273_p2.read().is_01() || !kc_cast3_cast_reg_360.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_s_fu_273_p2.read()) + sc_biguint<5>(kc_cast3_cast_reg_360.read()));
}

void convolve::thread_tmp_11_cast_fu_284_p1() {
    tmp_11_cast_fu_284_p1 = esl_sext<32,5>(tmp_10_fu_279_p2.read());
}

void convolve::thread_tmp_13_cast_fu_310_p1() {
    tmp_13_cast_fu_310_p1 = esl_zext<32,12>(grp_fu_317_p4.read());
}

void convolve::thread_tmp_2_fu_219_p2() {
    tmp_2_fu_219_p2 = (!kc_reg_139.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kc_reg_139.read() == ap_const_lv2_3);
}

void convolve::thread_tmp_5_fu_289_p2() {
    tmp_5_fu_289_p2 = (!kr_reg_162.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kr_reg_162.read() == ap_const_lv2_3);
}

void convolve::thread_tmp_6_cast_fu_198_p1() {
    tmp_6_cast_fu_198_p1 = esl_zext<32,12>(tmp_6_fu_193_p2.read());
}

void convolve::thread_tmp_6_fu_193_p2() {
    tmp_6_fu_193_p2 = (!tmp_4_reg_339.read().is_01() || !c_cast4_cast_fu_189_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_4_reg_339.read()) + sc_biguint<12>(c_cast4_cast_fu_189_p1.read()));
}

void convolve::thread_tmp_9_fu_261_p3() {
    tmp_9_fu_261_p3 = esl_concat<2,2>(kr_reg_162.read(), ap_const_lv2_0);
}

void convolve::thread_tmp_cast_fu_237_p1() {
    tmp_cast_fu_237_p1 = esl_sext<6,2>(tmp_fu_231_p2.read());
}

void convolve::thread_tmp_fu_231_p2() {
    tmp_fu_231_p2 = (!kc_reg_139.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<2>(): (sc_biguint<2>(kc_reg_139.read()) + sc_bigint<2>(ap_const_lv2_3));
}

void convolve::thread_tmp_s_fu_273_p2() {
    tmp_s_fu_273_p2 = (!p_shl_cast_fu_269_p1.read().is_01() || !kr_cast2_cast_fu_257_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_269_p1.read()) - sc_biguint<5>(kr_cast2_cast_fu_257_p1.read()));
}

void convolve::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_183_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_219_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_289_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void convolve::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWVALID\" :  \"" << s_axi_conv_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_conv_AWREADY\" :  \"" << s_axi_conv_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWADDR\" :  \"" << s_axi_conv_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WVALID\" :  \"" << s_axi_conv_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_WREADY\" :  \"" << s_axi_conv_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WDATA\" :  \"" << s_axi_conv_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WSTRB\" :  \"" << s_axi_conv_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARVALID\" :  \"" << s_axi_conv_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_ARREADY\" :  \"" << s_axi_conv_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARADDR\" :  \"" << s_axi_conv_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RVALID\" :  \"" << s_axi_conv_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_RREADY\" :  \"" << s_axi_conv_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RDATA\" :  \"" << s_axi_conv_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RRESP\" :  \"" << s_axi_conv_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BVALID\" :  \"" << s_axi_conv_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_BREADY\" :  \"" << s_axi_conv_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BRESP\" :  \"" << s_axi_conv_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

