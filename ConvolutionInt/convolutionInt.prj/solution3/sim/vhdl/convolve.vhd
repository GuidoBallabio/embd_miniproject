-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
generic (
    C_S_AXI_CONV_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_CONV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_conv_AWVALID : IN STD_LOGIC;
    s_axi_conv_AWREADY : OUT STD_LOGIC;
    s_axi_conv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_WVALID : IN STD_LOGIC;
    s_axi_conv_WREADY : OUT STD_LOGIC;
    s_axi_conv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_ARVALID : IN STD_LOGIC;
    s_axi_conv_ARREADY : OUT STD_LOGIC;
    s_axi_conv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_RVALID : OUT STD_LOGIC;
    s_axi_conv_RREADY : IN STD_LOGIC;
    s_axi_conv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_BVALID : OUT STD_LOGIC;
    s_axi_conv_BREADY : IN STD_LOGIC;
    s_axi_conv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=11282,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=45,HLS_SYN_FF=3047,HLS_SYN_LUT=1634}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_388 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal reg_392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1124 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_416_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_1138 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_422_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_reg_1143 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_1159 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1170 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_addr_3_reg_1181 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_addr_4_reg_1186 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_addr_5_reg_1191 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_addr_reg_1196 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_1205 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_cast_cast_fu_493_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_cast_cast_reg_1210 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal krnl_load_reg_1226 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_1_reg_1236 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_2_reg_1241 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_3_reg_1246 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal krnl_load_3_reg_1252 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_4_reg_1257 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal krnl_load_4_reg_1263 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_0_2_fu_524_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_0_2_reg_1268 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_load_5_reg_1274 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal krnl_load_5_reg_1280 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_0_2_cast_s_fu_530_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_0_2_cast_s_reg_1285 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_6_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_6_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_addr_1_reg_1305 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_load_6_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_load_6_reg_1317 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal in_load_7_reg_1327 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_load_7_reg_1334 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_8_reg_1339 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal krnl_load_8_reg_1346 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_13_fu_830_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_1359 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_reg_1364 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_fu_836_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_reg_1372 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_reg_1377 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_2_fu_841_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_2_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_fu_576_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_2_fu_846_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_2_reg_1398 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_reg_1403 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_21_0_0_2_fu_582_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_2_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_fu_585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_reg_1427 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_fu_591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_reg_1435 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_594_p2 : signal is "no";
    signal tmp_reg_1443 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_867_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1448 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_873_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_1453 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_fu_886_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_reg_1458 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_22_1_1_fu_890_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_reg_1463 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_1_2_fu_608_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_1_2_reg_1468 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_1_2_cast_s_fu_614_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_1_2_cast_s_reg_1474 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp7_fu_627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp7_fu_627_p2 : signal is "no";
    signal tmp7_reg_1485 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_7_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_7_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_2_reg_1499 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_1_1_2_fu_906_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_2_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_22_1_2_2_fu_910_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_2_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_915_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_920_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_22_2_1_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_2_2_fu_665_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_2_2_reg_1539 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_2_2_cast_s_fu_671_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_2_2_cast_s_reg_1545 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp14_fu_684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp14_fu_684_p2 : signal is "no";
    signal tmp14_reg_1556 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_8_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_8_reg_1561 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal out_addr_3_reg_1570 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_load_12_reg_1575 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal in_load_13_reg_1587 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_14_reg_1594 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_22_2_1_2_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_2_reg_1601 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_22_2_2_2_fu_959_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_2_2_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_963_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_reg_1611 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_969_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_reg_1621 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_22_3_1_fu_985_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_reg_1626 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_3_2_fu_722_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_3_2_reg_1631 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_3_2_cast_s_fu_728_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_3_2_cast_s_reg_1637 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp21_fu_741_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp21_fu_741_p2 : signal is "no";
    signal tmp21_reg_1648 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_9_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_9_reg_1653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal out_addr_4_reg_1662 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_load_15_reg_1667 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal in_load_16_reg_1678 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_17_reg_1684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_22_3_1_2_fu_1003_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_2_reg_1690 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_22_3_2_2_fu_1007_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_2_2_reg_1695 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1011_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp25_reg_1700 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_1016_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp26_reg_1705 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_fu_1027_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_reg_1710 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_22_4_1_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_1_reg_1715 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_1_2_fu_1035_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_1_2_reg_1720 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_4_2_fu_779_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_4_2_reg_1725 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_789_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_reg_1730 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_794_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_reg_1735 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_799_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_reg_1740 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp28_fu_808_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp28_fu_808_p2 : signal is "no";
    signal tmp28_reg_1750 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1051_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp32_reg_1755 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_2_2_fu_1056_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_4_2_2_reg_1770 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_1061_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp33_reg_1775 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal r1_reg_364 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_376 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_6_cast_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast1_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_2_2_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_1_2_2_fu_659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_2_2_2_fu_716_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_3_2_2_fu_773_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_4_2_2_fu_824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_404_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast_cast_fu_446_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_450_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_460_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_471_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_496_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_506_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_533_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_548_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_558_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_859_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_598_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp3_fu_598_p2 : signal is "no";
    signal tmp_17_fu_617_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_894_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_900_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_636_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_646_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp10_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp10_fu_655_p2 : signal is "no";
    signal tmp_20_fu_674_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_948_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_703_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp17_fu_712_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp17_fu_712_p2 : signal is "no";
    signal tmp_23_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_989_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_996_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_750_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_fu_760_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp24_fu_769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp24_fu_769_p2 : signal is "no";
    signal col_offset_4_2_cast_s_fu_785_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1039_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1045_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp31_fu_820_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp31_fu_820_p2 : signal is "no";
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_fu_886_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_fu_890_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_900_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_2_fu_906_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_2_2_fu_910_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_915_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_920_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_926_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_926_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_fu_933_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_fu_937_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_948_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_2_fu_954_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_2_2_fu_959_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_963_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_969_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_974_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_974_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_fu_980_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_fu_985_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_989_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_996_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_2_fu_1003_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_2_2_fu_1007_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1011_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1016_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1021_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1021_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_4_fu_1027_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_4_1_fu_1031_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_4_1_2_fu_1035_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1039_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1045_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1051_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_4_2_2_fu_1056_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1061_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1067_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1067_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_404_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_431_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_440_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component convolve_mul_6ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_mul_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_mac_muladEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_conv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolve_conv_s_axi_U : component convolve_conv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_AWVALID,
        AWREADY => s_axi_conv_AWREADY,
        AWADDR => s_axi_conv_AWADDR,
        WVALID => s_axi_conv_WVALID,
        WREADY => s_axi_conv_WREADY,
        WDATA => s_axi_conv_WDATA,
        WSTRB => s_axi_conv_WSTRB,
        ARVALID => s_axi_conv_ARVALID,
        ARREADY => s_axi_conv_ARREADY,
        ARADDR => s_axi_conv_ARADDR,
        RVALID => s_axi_conv_RVALID,
        RREADY => s_axi_conv_RREADY,
        RDATA => s_axi_conv_RDATA,
        RRESP => s_axi_conv_RRESP,
        BVALID => s_axi_conv_BVALID,
        BREADY => s_axi_conv_BREADY,
        BRESP => s_axi_conv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_r_address0,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => out_r_d0,
        krnl_address0 => krnl_address0,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolve_mul_6ns_bkb_U0 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_404_p0,
        din1 => grp_fu_404_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_404_p2);

    convolve_mul_6ns_bkb_U1 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    convolve_mul_6ns_bkb_U2 : component convolve_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    convolve_mul_mul_cud_U3 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_reg_1226,
        din1 => reg_388,
        dout => tmp_13_fu_830_p2);

    convolve_mul_mul_cud_U4 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_3_reg_1252,
        din1 => in_load_3_reg_1246,
        dout => tmp_22_0_1_fu_836_p2);

    convolve_mul_mul_cud_U5 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_5_reg_1280,
        din1 => in_load_5_reg_1274,
        dout => tmp_22_0_1_2_fu_841_p2);

    convolve_mul_mul_cud_U6 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_8_reg_1346,
        din1 => in_load_8_reg_1339,
        dout => tmp_22_0_2_2_fu_846_p2);

    convolve_mac_muladEe_U7 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_1_reg_1236,
        din1 => reg_392,
        din2 => tmp_13_reg_1359,
        dout => grp_fu_851_p3);

    convolve_mac_muladEe_U8 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_2_reg_1241,
        din1 => reg_396,
        din2 => tmp_22_0_1_reg_1372,
        dout => grp_fu_859_p3);

    convolve_mac_muladEe_U9 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_4_reg_1263,
        din1 => in_load_4_reg_1257,
        din2 => tmp_22_0_1_2_reg_1385,
        dout => grp_fu_867_p3);

    convolve_mac_muladEe_U10 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_6_reg_1317,
        din1 => in_load_6_reg_1310,
        din2 => grp_fu_879_p3,
        dout => grp_fu_873_p3);

    convolve_mac_muladEe_U11 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => krnl_load_7_reg_1334,
        din1 => in_load_7_reg_1327,
        din2 => tmp_22_0_2_2_reg_1398,
        dout => grp_fu_879_p3);

    convolve_mul_mul_cud_U12 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_fu_886_p0,
        din1 => in_load_3_reg_1246,
        dout => tmp_22_1_fu_886_p2);

    convolve_mul_mul_cud_U13 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_fu_890_p0,
        din1 => in_load_6_reg_1310,
        dout => tmp_22_1_1_fu_890_p2);

    convolve_mac_muladEe_U14 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_894_p0,
        din1 => in_load_4_reg_1257,
        din2 => tmp_22_1_reg_1458,
        dout => grp_fu_894_p3);

    convolve_mac_muladEe_U15 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_900_p0,
        din1 => in_load_5_reg_1274,
        din2 => tmp_22_1_1_reg_1463,
        dout => grp_fu_900_p3);

    convolve_mul_mul_cud_U16 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_2_fu_906_p0,
        din1 => in_load_8_reg_1339,
        dout => tmp_22_1_1_2_fu_906_p2);

    convolve_mul_mul_cud_U17 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_2_2_fu_910_p0,
        din1 => reg_396,
        dout => tmp_22_1_2_2_fu_910_p2);

    convolve_mac_muladEe_U18 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_915_p0,
        din1 => in_load_7_reg_1327,
        din2 => tmp_22_1_1_2_reg_1509,
        dout => grp_fu_915_p3);

    convolve_mac_muladEe_U19 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_920_p0,
        din1 => reg_388,
        din2 => grp_fu_926_p3,
        dout => grp_fu_920_p3);

    convolve_mac_muladEe_U20 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_926_p0,
        din1 => reg_392,
        din2 => tmp_22_1_2_2_reg_1514,
        dout => grp_fu_926_p3);

    convolve_mul_mul_cud_U21 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_fu_933_p0,
        din1 => in_load_6_reg_1310,
        dout => tmp_22_2_fu_933_p2);

    convolve_mul_mul_cud_U22 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_fu_937_p0,
        din1 => reg_388,
        dout => tmp_22_2_1_fu_937_p2);

    convolve_mac_muladEe_U23 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_942_p0,
        din1 => in_load_7_reg_1327,
        din2 => tmp_22_2_reg_1529,
        dout => grp_fu_942_p3);

    convolve_mac_muladEe_U24 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_948_p0,
        din1 => in_load_8_reg_1339,
        din2 => tmp_22_2_1_reg_1534,
        dout => grp_fu_948_p3);

    convolve_mul_mul_cud_U25 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_2_fu_954_p0,
        din1 => reg_396,
        dout => tmp_22_2_1_2_fu_954_p2);

    convolve_mul_mul_cud_U26 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_2_2_fu_959_p0,
        din1 => in_load_14_reg_1594,
        dout => tmp_22_2_2_2_fu_959_p2);

    convolve_mac_muladEe_U27 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_963_p0,
        din1 => reg_392,
        din2 => tmp_22_2_1_2_reg_1601,
        dout => grp_fu_963_p3);

    convolve_mac_muladEe_U28 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_969_p0,
        din1 => in_load_12_reg_1575,
        din2 => grp_fu_974_p3,
        dout => grp_fu_969_p3);

    convolve_mac_muladEe_U29 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_974_p0,
        din1 => in_load_13_reg_1587,
        din2 => tmp_22_2_2_2_reg_1606,
        dout => grp_fu_974_p3);

    convolve_mul_mul_cud_U30 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_fu_980_p0,
        din1 => reg_388,
        dout => tmp_22_3_fu_980_p2);

    convolve_mul_mul_cud_U31 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_fu_985_p0,
        din1 => in_load_12_reg_1575,
        dout => tmp_22_3_1_fu_985_p2);

    convolve_mac_muladEe_U32 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_989_p0,
        din1 => reg_392,
        din2 => tmp_22_3_reg_1621,
        dout => grp_fu_989_p3);

    convolve_mac_muladEe_U33 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_996_p0,
        din1 => reg_396,
        din2 => tmp_22_3_1_reg_1626,
        dout => grp_fu_996_p3);

    convolve_mul_mul_cud_U34 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_2_fu_1003_p0,
        din1 => in_load_14_reg_1594,
        dout => tmp_22_3_1_2_fu_1003_p2);

    convolve_mul_mul_cud_U35 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_2_2_fu_1007_p0,
        din1 => in_load_17_reg_1684,
        dout => tmp_22_3_2_2_fu_1007_p2);

    convolve_mac_muladEe_U36 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1011_p0,
        din1 => in_load_13_reg_1587,
        din2 => tmp_22_3_1_2_reg_1690,
        dout => grp_fu_1011_p3);

    convolve_mac_muladEe_U37 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1016_p0,
        din1 => in_load_15_reg_1667,
        din2 => grp_fu_1021_p3,
        dout => grp_fu_1016_p3);

    convolve_mac_muladEe_U38 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1021_p0,
        din1 => in_load_16_reg_1678,
        din2 => tmp_22_3_2_2_reg_1695,
        dout => grp_fu_1021_p3);

    convolve_mul_mul_cud_U39 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_4_fu_1027_p0,
        din1 => in_load_12_reg_1575,
        dout => tmp_22_4_fu_1027_p2);

    convolve_mul_mul_cud_U40 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_4_1_fu_1031_p0,
        din1 => in_load_15_reg_1667,
        dout => tmp_22_4_1_fu_1031_p2);

    convolve_mul_mul_cud_U41 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_4_1_2_fu_1035_p0,
        din1 => in_load_17_reg_1684,
        dout => tmp_22_4_1_2_fu_1035_p2);

    convolve_mac_muladEe_U42 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1039_p0,
        din1 => in_load_13_reg_1587,
        din2 => tmp_22_4_reg_1710,
        dout => grp_fu_1039_p3);

    convolve_mac_muladEe_U43 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1045_p0,
        din1 => in_load_14_reg_1594,
        din2 => tmp_22_4_1_reg_1715,
        dout => grp_fu_1045_p3);

    convolve_mac_muladEe_U44 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1051_p0,
        din1 => in_load_16_reg_1678,
        din2 => tmp_22_4_1_2_reg_1720,
        dout => grp_fu_1051_p3);

    convolve_mul_mul_cud_U45 : component convolve_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_4_2_2_fu_1056_p0,
        din1 => reg_396,
        dout => tmp_22_4_2_2_fu_1056_p2);

    convolve_mac_muladEe_U46 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1061_p0,
        din1 => reg_388,
        din2 => grp_fu_1067_p3,
        dout => grp_fu_1061_p3);

    convolve_mac_muladEe_U47 : component convolve_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1067_p0,
        din1 => reg_392,
        din2 => tmp_22_4_2_2_reg_1770,
        dout => grp_fu_1067_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_reg_376 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                c_reg_376 <= col_offset_4_2_reg_1725;
            end if; 
        end if;
    end process;

    r1_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and ((ap_const_lv1_0 = tmp_s_reg_1201) or (ap_const_lv1_0 = tmp_1_6_reg_1296) or (ap_const_lv1_0 = tmp_2_7_reg_1490) or (ap_const_lv1_0 = tmp_3_8_reg_1561) or (ap_const_lv1_0 = tmp_4_9_reg_1653)))) then 
                r1_reg_364 <= r_reg_1143;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_364 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    col_offset_0_2_cast_s_reg_1285(5 downto 0) <= col_offset_0_2_cast_s_fu_530_p1(5 downto 0);
                in_load_5_reg_1274 <= in_r_q0;
                krnl_load_5_reg_1280 <= krnl_q0;
                tmp_1_6_reg_1296 <= tmp_1_6_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                col_offset_0_2_reg_1268 <= col_offset_0_2_fu_524_p2;
                in_load_4_reg_1257 <= in_r_q0;
                krnl_load_4_reg_1263 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    col_offset_1_2_cast_s_reg_1474(5 downto 0) <= col_offset_1_2_cast_s_fu_614_p1(5 downto 0);
                tmp7_reg_1485 <= tmp7_fu_627_p2;
                tmp_2_7_reg_1490 <= tmp_2_7_fu_631_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = tmp_1_6_reg_1296))) then
                col_offset_1_2_reg_1468 <= col_offset_1_2_fu_608_p2;
                tmp_22_1_1_reg_1463 <= tmp_22_1_1_fu_890_p2;
                tmp_22_1_reg_1458 <= tmp_22_1_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    col_offset_2_2_cast_s_reg_1545(5 downto 0) <= col_offset_2_2_cast_s_fu_671_p1(5 downto 0);
                tmp14_reg_1556 <= tmp14_fu_684_p2;
                tmp_3_8_reg_1561 <= tmp_3_8_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = tmp_2_7_reg_1490))) then
                col_offset_2_2_reg_1539 <= col_offset_2_2_fu_665_p2;
                tmp_22_2_1_reg_1534 <= tmp_22_2_1_fu_937_p2;
                tmp_22_2_reg_1529 <= tmp_22_2_fu_933_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    col_offset_3_2_cast_s_reg_1637(5 downto 0) <= col_offset_3_2_cast_s_fu_728_p1(5 downto 0);
                tmp21_reg_1648 <= tmp21_fu_741_p2;
                tmp_4_9_reg_1653 <= tmp_4_9_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_3_8_reg_1561))) then
                col_offset_3_2_reg_1631 <= col_offset_3_2_fu_722_p2;
                tmp_22_3_1_reg_1626 <= tmp_22_3_1_fu_985_p2;
                tmp_22_3_reg_1621 <= tmp_22_3_fu_980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_1_6_reg_1296) and (ap_const_lv1_1 = tmp_2_7_reg_1490) and (ap_const_lv1_1 = tmp_3_8_reg_1561) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_s_reg_1201 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_4_9_reg_1653))) then
                col_offset_4_2_reg_1725 <= col_offset_4_2_fu_779_p2;
                tmp_22_4_1_2_reg_1720 <= tmp_22_4_1_2_fu_1035_p2;
                tmp_22_4_1_reg_1715 <= tmp_22_4_1_fu_1031_p2;
                tmp_22_4_reg_1710 <= tmp_22_4_fu_1027_p2;
                tmp_26_reg_1730 <= tmp_26_fu_789_p2;
                tmp_27_reg_1735 <= tmp_27_fu_794_p2;
                tmp_28_reg_1740 <= tmp_28_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_addr_3_reg_1181 <= tmp_6_cast_fu_455_p1(12 - 1 downto 0);
                in_addr_4_reg_1186 <= tmp_7_cast_fu_465_p1(12 - 1 downto 0);
                in_addr_5_reg_1191 <= tmp_8_cast_fu_476_p1(12 - 1 downto 0);
                out_addr_reg_1196 <= tmp_7_cast_fu_465_p1(12 - 1 downto 0);
                tmp_s_reg_1201 <= tmp_s_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                in_load_12_reg_1575 <= in_r_q0;
                out_addr_3_reg_1570 <= tmp_21_cast_fu_697_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                in_load_13_reg_1587 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                in_load_14_reg_1594 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                in_load_15_reg_1667 <= in_r_q0;
                out_addr_4_reg_1662 <= tmp_24_cast_fu_754_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                in_load_16_reg_1678 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                in_load_17_reg_1684 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                in_load_3_reg_1246 <= in_r_q0;
                krnl_load_3_reg_1252 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                in_load_6_reg_1310 <= in_r_q0;
                krnl_load_6_reg_1317 <= krnl_q0;
                out_addr_1_reg_1305 <= tmp_15_cast_fu_552_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                in_load_7_reg_1327 <= in_r_q0;
                krnl_load_7_reg_1334 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                in_load_8_reg_1339 <= in_r_q0;
                krnl_load_8_reg_1346 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                krnl_load_1_reg_1236 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                krnl_load_2_reg_1241 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                krnl_load_reg_1226 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                out_addr_2_reg_1499 <= tmp_18_cast1_fu_640_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_410_p2 = ap_const_lv1_0))) then
                r_reg_1143 <= r_fu_422_p2;
                tmp_3_reg_1138 <= tmp_3_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_388 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_392 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_396 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp11_reg_1519 <= grp_fu_915_p3;
                tmp12_reg_1524 <= grp_fu_920_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp18_reg_1611 <= grp_fu_963_p3;
                tmp19_reg_1616 <= grp_fu_969_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp25_reg_1700 <= grp_fu_1011_p3;
                tmp26_reg_1705 <= grp_fu_1016_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp28_reg_1750 <= tmp28_fu_808_p2;
                tmp32_reg_1755 <= grp_fu_1051_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tmp33_reg_1775 <= grp_fu_1061_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp4_reg_1448 <= grp_fu_867_p3;
                tmp5_reg_1453 <= grp_fu_873_p3;
                tmp_21_0_0_1_reg_1403 <= tmp_21_0_0_1_fu_579_p1;
                tmp_21_0_0_2_reg_1411 <= tmp_21_0_0_2_fu_582_p1;
                tmp_21_0_1_1_reg_1419 <= tmp_21_0_1_1_fu_585_p1;
                tmp_21_0_2_1_reg_1435 <= tmp_21_0_2_1_fu_591_p1;
                tmp_21_0_2_reg_1427 <= tmp_21_0_2_fu_588_p1;
                tmp_reg_1443 <= tmp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_12_reg_1351 <= tmp_12_fu_567_p1;
                tmp_13_reg_1359 <= tmp_13_fu_830_p2;
                tmp_21_0_1_2_reg_1377 <= tmp_21_0_1_2_fu_573_p1;
                tmp_21_0_1_reg_1364 <= tmp_21_0_1_fu_570_p1;
                tmp_21_0_2_2_reg_1390 <= tmp_21_0_2_2_fu_576_p1;
                tmp_22_0_1_2_reg_1385 <= tmp_22_0_1_2_fu_841_p2;
                tmp_22_0_1_reg_1372 <= tmp_22_0_1_fu_836_p2;
                tmp_22_0_2_2_reg_1398 <= tmp_22_0_2_2_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_18_cast_cast_reg_1210(5 downto 0) <= tmp_18_cast_cast_fu_493_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_s_fu_481_p2 = ap_const_lv1_1))) then
                tmp_1_reg_1205 <= tmp_1_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_22_1_1_2_reg_1509 <= tmp_22_1_1_2_fu_906_p2;
                tmp_22_1_2_2_reg_1514 <= tmp_22_1_2_2_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_22_2_1_2_reg_1601 <= tmp_22_2_1_2_fu_954_p2;
                tmp_22_2_2_2_reg_1606 <= tmp_22_2_2_2_fu_959_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_22_3_1_2_reg_1690 <= tmp_22_3_1_2_fu_1003_p2;
                tmp_22_3_2_2_reg_1695 <= tmp_22_3_2_2_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp_22_4_2_2_reg_1770 <= tmp_22_4_2_2_fu_1056_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_2_reg_1124 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_4_reg_1159 <= grp_fu_431_p2;
                tmp_5_reg_1170 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    tmp_18_cast_cast_reg_1210(11 downto 6) <= "000000";
    col_offset_0_2_cast_s_reg_1285(11 downto 6) <= "000000";
    col_offset_1_2_cast_s_reg_1474(11 downto 6) <= "000000";
    col_offset_2_2_cast_s_reg_1545(11 downto 6) <= "000000";
    col_offset_3_2_cast_s_reg_1637(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_410_p2, ap_CS_fsm_state6, tmp_s_fu_481_p2, tmp_s_reg_1201, tmp_1_6_reg_1296, ap_CS_fsm_state19, tmp_2_7_reg_1490, ap_CS_fsm_state26, tmp_3_8_reg_1561, ap_CS_fsm_state33, tmp_4_9_reg_1653, ap_CS_fsm_state40)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_s_fu_481_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_1_6_reg_1296))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_2_7_reg_1490))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_3_8_reg_1561))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and ((ap_const_lv1_0 = tmp_s_reg_1201) or (ap_const_lv1_0 = tmp_1_6_reg_1296) or (ap_const_lv1_0 = tmp_2_7_reg_1490) or (ap_const_lv1_0 = tmp_3_8_reg_1561) or (ap_const_lv1_0 = tmp_4_9_reg_1653)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_410_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_410_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_cast_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_376),12));
    col_offset_0_2_cast_s_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_0_2_reg_1268),12));
    col_offset_0_2_fu_524_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_1));
    col_offset_1_2_cast_s_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_1_2_reg_1468),12));
    col_offset_1_2_fu_608_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_2));
    col_offset_2_2_cast_s_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_2_2_reg_1539),12));
    col_offset_2_2_fu_665_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_3));
    col_offset_3_2_cast_s_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_3_2_reg_1631),12));
    col_offset_3_2_fu_722_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_4));
    col_offset_4_2_cast_s_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_4_2_fu_779_p2),12));
    col_offset_4_2_fu_779_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_5));
    exitcond_fu_410_p2 <= "1" when (r1_reg_364 = ap_const_lv6_31) else "0";
    grp_fu_1011_p0 <= tmp_21_0_1_1_reg_1419(8 - 1 downto 0);
    grp_fu_1016_p0 <= tmp_21_0_2_reg_1427(8 - 1 downto 0);
    grp_fu_1021_p0 <= tmp_21_0_2_1_reg_1435(8 - 1 downto 0);
    grp_fu_1039_p0 <= tmp_21_0_0_1_reg_1403(8 - 1 downto 0);
    grp_fu_1045_p0 <= tmp_21_0_0_2_reg_1411(8 - 1 downto 0);
    grp_fu_1051_p0 <= tmp_21_0_1_1_reg_1419(8 - 1 downto 0);
    grp_fu_1061_p0 <= tmp_21_0_2_reg_1427(8 - 1 downto 0);
    grp_fu_1067_p0 <= tmp_21_0_2_1_reg_1435(8 - 1 downto 0);
    grp_fu_404_p0 <= grp_fu_404_p00(6 - 1 downto 0);
    grp_fu_404_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_364),12));
    grp_fu_404_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_431_p0 <= grp_fu_431_p00(6 - 1 downto 0);
    grp_fu_431_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1138),12));
    grp_fu_431_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_440_p0 <= grp_fu_440_p00(6 - 1 downto 0);
    grp_fu_440_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_1143),12));
    grp_fu_440_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_894_p0 <= tmp_21_0_0_1_reg_1403(8 - 1 downto 0);
    grp_fu_900_p0 <= tmp_21_0_0_2_reg_1411(8 - 1 downto 0);
    grp_fu_915_p0 <= tmp_21_0_1_1_reg_1419(8 - 1 downto 0);
    grp_fu_920_p0 <= tmp_21_0_2_reg_1427(8 - 1 downto 0);
    grp_fu_926_p0 <= tmp_21_0_2_1_reg_1435(8 - 1 downto 0);
    grp_fu_942_p0 <= tmp_21_0_0_1_reg_1403(8 - 1 downto 0);
    grp_fu_948_p0 <= tmp_21_0_0_2_reg_1411(8 - 1 downto 0);
    grp_fu_963_p0 <= tmp_21_0_1_1_reg_1419(8 - 1 downto 0);
    grp_fu_969_p0 <= tmp_21_0_2_reg_1427(8 - 1 downto 0);
    grp_fu_974_p0 <= tmp_21_0_2_1_reg_1435(8 - 1 downto 0);
    grp_fu_989_p0 <= tmp_21_0_0_1_reg_1403(8 - 1 downto 0);
    grp_fu_996_p0 <= tmp_21_0_0_2_reg_1411(8 - 1 downto 0);

    in_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state9, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state10, in_addr_3_reg_1181, in_addr_4_reg_1186, in_addr_5_reg_1191, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state41, tmp_9_cast_fu_501_p1, tmp_10_cast_fu_510_p1, tmp_11_cast_fu_519_p1, tmp_14_cast_fu_538_p1, tmp_15_cast_fu_552_p1, tmp_16_cast_fu_562_p1, tmp_17_cast_fu_622_p1, tmp_18_cast1_fu_640_p1, tmp_19_cast_fu_650_p1, tmp_20_cast_fu_679_p1, tmp_21_cast_fu_697_p1, tmp_22_cast_fu_707_p1, tmp_23_cast_fu_736_p1, tmp_24_cast_fu_754_p1, tmp_25_cast_fu_764_p1, tmp_28_cast_fu_804_p1, tmp_29_cast_fu_812_p1, tmp_30_cast_fu_816_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            in_r_address0 <= tmp_30_cast_fu_816_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            in_r_address0 <= tmp_29_cast_fu_812_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            in_r_address0 <= tmp_28_cast_fu_804_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            in_r_address0 <= tmp_25_cast_fu_764_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            in_r_address0 <= tmp_24_cast_fu_754_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            in_r_address0 <= tmp_23_cast_fu_736_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            in_r_address0 <= tmp_22_cast_fu_707_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            in_r_address0 <= tmp_21_cast_fu_697_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            in_r_address0 <= tmp_20_cast_fu_679_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_r_address0 <= tmp_19_cast_fu_650_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            in_r_address0 <= tmp_18_cast1_fu_640_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            in_r_address0 <= tmp_17_cast_fu_622_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_r_address0 <= tmp_16_cast_fu_562_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_r_address0 <= tmp_15_cast_fu_552_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= tmp_14_cast_fu_538_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_r_address0 <= in_addr_5_reg_1191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_address0 <= in_addr_4_reg_1186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_r_address0 <= in_addr_3_reg_1181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_r_address0 <= tmp_11_cast_fu_519_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= tmp_10_cast_fu_510_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= tmp_9_cast_fu_501_p1(12 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state9, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    krnl_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            krnl_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            krnl_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            krnl_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            krnl_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            krnl_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            krnl_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            krnl_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            krnl_address0 <= "XXXX";
        end if; 
    end process;


    krnl_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_address0_assign_proc : process(out_addr_reg_1196, out_addr_1_reg_1305, ap_CS_fsm_state19, out_addr_2_reg_1499, ap_CS_fsm_state26, out_addr_3_reg_1570, ap_CS_fsm_state33, out_addr_4_reg_1662, ap_CS_fsm_state40, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_r_address0 <= out_addr_4_reg_1662;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            out_r_address0 <= out_addr_3_reg_1570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_address0 <= out_addr_2_reg_1499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_address0 <= out_addr_1_reg_1305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address0 <= out_addr_reg_1196;
        else 
            out_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state47, sum_2_0_2_2_fu_602_p2, sum_2_1_2_2_fu_659_p2, sum_2_2_2_2_fu_716_p2, sum_2_3_2_2_fu_773_p2, sum_2_4_2_2_fu_824_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_r_d0 <= sum_2_4_2_2_fu_824_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            out_r_d0 <= sum_2_3_2_2_fu_773_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_d0 <= sum_2_2_2_2_fu_716_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_d0 <= sum_2_1_2_2_fu_659_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_d0 <= sum_2_0_2_2_fu_602_p2;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(tmp_s_reg_1201, tmp_1_6_reg_1296, ap_CS_fsm_state19, tmp_2_7_reg_1490, ap_CS_fsm_state26, tmp_3_8_reg_1561, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_const_lv1_1 = tmp_1_6_reg_1296) and (ap_const_lv1_1 = tmp_2_7_reg_1490) and (ap_const_lv1_1 = tmp_3_8_reg_1561) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_s_reg_1201 = ap_const_lv1_1)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_422_p2 <= std_logic_vector(unsigned(r1_reg_364) + unsigned(ap_const_lv6_1));
    sum_2_0_2_2_fu_602_p2 <= std_logic_vector(unsigned(tmp_reg_1443) + unsigned(tmp3_fu_598_p2));
    sum_2_1_2_2_fu_659_p2 <= std_logic_vector(unsigned(tmp7_reg_1485) + unsigned(tmp10_fu_655_p2));
    sum_2_2_2_2_fu_716_p2 <= std_logic_vector(unsigned(tmp14_reg_1556) + unsigned(tmp17_fu_712_p2));
    sum_2_3_2_2_fu_773_p2 <= std_logic_vector(unsigned(tmp21_reg_1648) + unsigned(tmp24_fu_769_p2));
    sum_2_4_2_2_fu_824_p2 <= std_logic_vector(unsigned(tmp28_reg_1750) + unsigned(tmp31_fu_820_p2));
    tmp10_fu_655_p2 <= std_logic_vector(signed(tmp11_reg_1519) + signed(tmp12_reg_1524));
    tmp14_fu_684_p2 <= std_logic_vector(signed(grp_fu_942_p3) + signed(grp_fu_948_p3));
    tmp17_fu_712_p2 <= std_logic_vector(signed(tmp18_reg_1611) + signed(tmp19_reg_1616));
    tmp21_fu_741_p2 <= std_logic_vector(signed(grp_fu_989_p3) + signed(grp_fu_996_p3));
    tmp24_fu_769_p2 <= std_logic_vector(signed(tmp25_reg_1700) + signed(tmp26_reg_1705));
    tmp28_fu_808_p2 <= std_logic_vector(signed(grp_fu_1039_p3) + signed(grp_fu_1045_p3));
    tmp31_fu_820_p2 <= std_logic_vector(signed(tmp32_reg_1755) + signed(tmp33_reg_1775));
    tmp3_fu_598_p2 <= std_logic_vector(signed(tmp4_reg_1448) + signed(tmp5_reg_1453));
    tmp7_fu_627_p2 <= std_logic_vector(signed(grp_fu_894_p3) + signed(grp_fu_900_p3));
    tmp_10_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_506_p2),32));
    tmp_10_fu_506_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(tmp_18_cast_cast_reg_1210));
    tmp_11_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_515_p2),32));
    tmp_11_fu_515_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(tmp_18_cast_cast_reg_1210));
        tmp_12_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_reg_1226),16));

    tmp_14_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_533_p2),32));
    tmp_14_fu_533_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(col_offset_0_2_cast_s_fu_530_p1));
    tmp_15_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_548_p2),32));
    tmp_15_fu_548_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(col_offset_0_2_cast_s_reg_1285));
    tmp_16_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_558_p2),32));
    tmp_16_fu_558_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(col_offset_0_2_cast_s_reg_1285));
    tmp_17_cast_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_617_p2),32));
    tmp_17_fu_617_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(col_offset_1_2_cast_s_fu_614_p1));
    tmp_18_cast1_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_636_p2),32));
    tmp_18_cast_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1205),12));
    tmp_18_fu_636_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(col_offset_1_2_cast_s_reg_1474));
    tmp_19_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_646_p2),32));
    tmp_19_fu_646_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(col_offset_1_2_cast_s_reg_1474));
    tmp_1_6_fu_543_p2 <= "1" when (unsigned(col_offset_0_2_reg_1268) < unsigned(ap_const_lv6_31)) else "0";
    tmp_1_fu_487_p2 <= std_logic_vector(unsigned(c_reg_376) + unsigned(ap_const_lv6_3F));
    tmp_20_cast_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_674_p2),32));
    tmp_20_fu_674_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(col_offset_2_2_cast_s_fu_671_p1));
        tmp_21_0_0_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_1_reg_1236),16));

        tmp_21_0_0_2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_2_reg_1241),16));

        tmp_21_0_1_1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_4_reg_1263),16));

        tmp_21_0_1_2_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_5_reg_1280),16));

        tmp_21_0_1_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_3_reg_1252),16));

        tmp_21_0_2_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_7_reg_1334),16));

        tmp_21_0_2_2_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_8_reg_1346),16));

        tmp_21_0_2_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_6_reg_1317),16));

    tmp_21_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_693_p2),32));
    tmp_21_fu_693_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(col_offset_2_2_cast_s_reg_1545));
    tmp_22_1_1_2_fu_906_p0 <= tmp_21_0_1_2_reg_1377(8 - 1 downto 0);
    tmp_22_1_1_fu_890_p0 <= tmp_21_0_1_reg_1364(8 - 1 downto 0);
    tmp_22_1_2_2_fu_910_p0 <= tmp_21_0_2_2_reg_1390(8 - 1 downto 0);
    tmp_22_1_fu_886_p0 <= tmp_12_reg_1351(8 - 1 downto 0);
    tmp_22_2_1_2_fu_954_p0 <= tmp_21_0_1_2_reg_1377(8 - 1 downto 0);
    tmp_22_2_1_fu_937_p0 <= tmp_21_0_1_reg_1364(8 - 1 downto 0);
    tmp_22_2_2_2_fu_959_p0 <= tmp_21_0_2_2_reg_1390(8 - 1 downto 0);
    tmp_22_2_fu_933_p0 <= tmp_12_reg_1351(8 - 1 downto 0);
    tmp_22_3_1_2_fu_1003_p0 <= tmp_21_0_1_2_reg_1377(8 - 1 downto 0);
    tmp_22_3_1_fu_985_p0 <= tmp_21_0_1_reg_1364(8 - 1 downto 0);
    tmp_22_3_2_2_fu_1007_p0 <= tmp_21_0_2_2_reg_1390(8 - 1 downto 0);
    tmp_22_3_fu_980_p0 <= tmp_12_reg_1351(8 - 1 downto 0);
    tmp_22_4_1_2_fu_1035_p0 <= tmp_21_0_1_2_reg_1377(8 - 1 downto 0);
    tmp_22_4_1_fu_1031_p0 <= tmp_21_0_1_reg_1364(8 - 1 downto 0);
    tmp_22_4_2_2_fu_1056_p0 <= tmp_21_0_2_2_reg_1390(8 - 1 downto 0);
    tmp_22_4_fu_1027_p0 <= tmp_12_reg_1351(8 - 1 downto 0);
    tmp_22_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_703_p2),32));
    tmp_22_fu_703_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(col_offset_2_2_cast_s_reg_1545));
    tmp_23_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_731_p2),32));
    tmp_23_fu_731_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(col_offset_3_2_cast_s_fu_728_p1));
    tmp_24_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_750_p2),32));
    tmp_24_fu_750_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(col_offset_3_2_cast_s_reg_1637));
    tmp_25_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_760_p2),32));
    tmp_25_fu_760_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(col_offset_3_2_cast_s_reg_1637));
    tmp_26_fu_789_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(col_offset_4_2_cast_s_fu_785_p1));
    tmp_27_fu_794_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(col_offset_4_2_cast_s_fu_785_p1));
    tmp_28_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1730),32));
    tmp_28_fu_799_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(col_offset_4_2_cast_s_fu_785_p1));
    tmp_29_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_1735),32));
    tmp_2_7_fu_631_p2 <= "1" when (unsigned(col_offset_1_2_reg_1468) < unsigned(ap_const_lv6_31)) else "0";
    tmp_30_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_1740),32));
    tmp_3_8_fu_688_p2 <= "1" when (unsigned(col_offset_2_2_reg_1539) < unsigned(ap_const_lv6_31)) else "0";
    tmp_3_fu_416_p2 <= std_logic_vector(unsigned(r1_reg_364) + unsigned(ap_const_lv6_3F));
    tmp_4_9_fu_745_p2 <= "1" when (unsigned(col_offset_3_2_reg_1631) < unsigned(ap_const_lv6_31)) else "0";
    tmp_6_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_450_p2),32));
    tmp_6_fu_450_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(c_cast_cast_fu_446_p1));
    tmp_7_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_460_p2),32));
    tmp_7_fu_460_p2 <= std_logic_vector(unsigned(tmp_2_reg_1124) + unsigned(c_cast_cast_fu_446_p1));
    tmp_8_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_471_p2),32));
    tmp_8_fu_471_p2 <= std_logic_vector(unsigned(tmp_5_reg_1170) + unsigned(c_cast_cast_fu_446_p1));
    tmp_9_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_496_p2),32));
    tmp_9_fu_496_p2 <= std_logic_vector(unsigned(tmp_4_reg_1159) + unsigned(tmp_18_cast_cast_fu_493_p1));
    tmp_fu_594_p2 <= std_logic_vector(signed(grp_fu_851_p3) + signed(grp_fu_859_p3));
    tmp_s_fu_481_p2 <= "1" when (unsigned(c_reg_376) < unsigned(ap_const_lv6_31)) else "0";
end behav;
