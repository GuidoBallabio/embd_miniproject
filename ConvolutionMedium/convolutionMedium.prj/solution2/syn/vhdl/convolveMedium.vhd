-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolveMedium is
generic (
    C_S_AXI_CONVM_ADDR_WIDTH : INTEGER := 18;
    C_S_AXI_CONVM_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_convm_AWVALID : IN STD_LOGIC;
    s_axi_convm_AWREADY : OUT STD_LOGIC;
    s_axi_convm_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_WVALID : IN STD_LOGIC;
    s_axi_convm_WREADY : OUT STD_LOGIC;
    s_axi_convm_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH/8-1 downto 0);
    s_axi_convm_ARVALID : IN STD_LOGIC;
    s_axi_convm_ARREADY : OUT STD_LOGIC;
    s_axi_convm_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_RVALID : OUT STD_LOGIC;
    s_axi_convm_RREADY : IN STD_LOGIC;
    s_axi_convm_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_convm_BVALID : OUT STD_LOGIC;
    s_axi_convm_BREADY : IN STD_LOGIC;
    s_axi_convm_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolveMedium is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolveMedium,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=256033,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=20,HLS_SYN_FF=2324,HLS_SYN_LUT=2182}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_365 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_369 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_2_6_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_390_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_reg_962 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_cast_fu_414_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_cast_reg_975 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_985 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_fu_432_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_cast_reg_990 : STD_LOGIC_VECTOR (16 downto 0);
    signal in_addr_3_reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_addr_4_reg_1005 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_addr_5_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_addr_reg_1015 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1024 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_cast_cast_fu_483_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_cast_cast_reg_1029 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal krnl_load_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_1_reg_1057 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_0_1_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_0_1_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_2_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_3_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_reg_1086 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_4_reg_1091 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_0_2_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_0_2_reg_1099 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_0_0_2_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_0_2_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_5_reg_1109 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_0_2_cast_s_fu_530_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_0_2_cast_s_reg_1117 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_cast_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_load_6_reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_800_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_1_1_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_1_1_reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_7_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_1_1_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_1_1_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_1_2_fu_571_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_1_2_reg_1174 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_reg_1180 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_2_1_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_0_2_1_reg_1185 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_load_8_reg_1190 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_813_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_reg_1198 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_1_2_cast_s_fu_582_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_1_2_cast_s_reg_1203 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_fu_595_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp7_fu_595_p2 : signal is "no";
    signal tmp7_reg_1214 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_6_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_826_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_reg_1223 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_addr_2_reg_1233 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_9_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal in_load_10_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_11_reg_1257 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_21_1_1_2_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_1_1_2_reg_1264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_21_1_2_2_fu_643_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_1_2_2_reg_1269 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_839_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp11_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_2_1_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_2_1_reg_1284 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_2_2_fu_661_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_reg_1289 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_cast_s_fu_667_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_2_2_cast_s_reg_1295 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp14_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp14_fu_680_p2 : signal is "no";
    signal tmp14_reg_1306 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_7_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_7_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal out_addr_3_reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_12_reg_1325 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal in_load_13_reg_1336 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_14_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_21_2_1_2_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_2_1_2_reg_1348 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_21_2_2_2_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_2_2_2_reg_1353 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_871_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp18_reg_1358 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_876_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_reg_1363 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_fu_726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_21_3_1_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_1_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_1_2_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_1_2_reg_1378 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_3_2_fu_738_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_3_2_reg_1383 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_748_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_reg_1388 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_753_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_reg_1393 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_758_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_reg_1398 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp21_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp21_fu_767_p2 : signal is "no";
    signal tmp21_reg_1408 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_899_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp25_reg_1413 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_2_2_fu_779_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_3_2_2_reg_1428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_904_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp26_reg_1433 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal r1_reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_9_cast_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast1_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_2_2_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_1_2_2_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_2_2_2_fu_720_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_3_2_2_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_382_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_406_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_424_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_cast_cast_fu_436_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_440_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_450_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_461_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_486_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_496_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_533_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_543_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_557_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_585_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_819_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_604_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp3_fu_618_p2 : signal is "no";
    signal tmp_fu_614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp_fu_614_p2 : signal is "no";
    signal tmp_18_fu_629_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp10_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp10_fu_647_p2 : signal is "no";
    signal tmp_19_fu_670_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_856_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_864_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_689_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_699_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp17_fu_716_p2 : signal is "no";
    signal col_offset_3_2_cast_s_fu_744_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_893_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of tmp24_fu_784_p2 : signal is "no";
    signal grp_fu_832_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_850_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_881_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component convolveMedium_mabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolveMedium_macud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolveMedium_convm_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolveMedium_convm_s_axi_U : component convolveMedium_convm_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONVM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONVM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_convm_AWVALID,
        AWREADY => s_axi_convm_AWREADY,
        AWADDR => s_axi_convm_AWADDR,
        WVALID => s_axi_convm_WVALID,
        WREADY => s_axi_convm_WREADY,
        WDATA => s_axi_convm_WDATA,
        WSTRB => s_axi_convm_WSTRB,
        ARVALID => s_axi_convm_ARVALID,
        ARREADY => s_axi_convm_ARREADY,
        ARADDR => s_axi_convm_ARADDR,
        RVALID => s_axi_convm_RVALID,
        RREADY => s_axi_convm_RREADY,
        RDATA => s_axi_convm_RDATA,
        RRESP => s_axi_convm_RRESP,
        BVALID => s_axi_convm_BVALID,
        BREADY => s_axi_convm_BREADY,
        BRESP => s_axi_convm_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_r_address0,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => out_r_d0,
        krnl_address0 => krnl_address0,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolveMedium_mabkb_U0 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => krnl_load_reg_1045,
        din1 => reg_361,
        din2 => tmp_21_0_0_1_reg_1065,
        dout => grp_fu_794_p3);

    convolveMedium_mabkb_U1 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => krnl_load_3_reg_1078,
        din1 => reg_361,
        din2 => tmp_21_0_0_2_reg_1104,
        dout => grp_fu_800_p3);

    convolveMedium_mabkb_U2 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_369,
        din1 => krnl_load_1_reg_1057,
        din2 => reg_378,
        dout => grp_fu_806_p3);

    convolveMedium_mabkb_U3 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => krnl_load_5_reg_1109,
        din1 => reg_365,
        din2 => tmp_21_0_1_1_reg_1151,
        dout => grp_fu_813_p3);

    convolveMedium_mabkb_U4 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_365,
        din1 => krnl_load_2_reg_1070,
        din2 => tmp_21_1_1_reg_1169,
        dout => grp_fu_819_p3);

    convolveMedium_macud_U5 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => krnl_load_6_reg_1138,
        din1 => reg_361,
        din2 => grp_fu_832_p3,
        dout => grp_fu_826_p3);

    convolveMedium_mabkb_U6 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => krnl_load_8_reg_1190,
        din1 => reg_365,
        din2 => tmp_21_0_2_1_reg_1185,
        dout => grp_fu_832_p3);

    convolveMedium_mabkb_U7 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_369,
        din1 => krnl_load_4_reg_1091,
        din2 => tmp_21_1_1_2_reg_1264,
        dout => grp_fu_839_p3);

    convolveMedium_macud_U8 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_9_reg_1238,
        din1 => krnl_load_6_reg_1138,
        din2 => grp_fu_850_p3,
        dout => grp_fu_845_p3);

    convolveMedium_mabkb_U9 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_10_reg_1250,
        din1 => krnl_load_7_reg_1161,
        din2 => tmp_21_1_2_2_reg_1269,
        dout => grp_fu_850_p3);

    convolveMedium_mabkb_U10 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_369,
        din1 => krnl_load_1_reg_1057,
        din2 => reg_378,
        dout => grp_fu_856_p3);

    convolveMedium_mabkb_U11 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_365,
        din1 => krnl_load_2_reg_1070,
        din2 => tmp_21_2_1_reg_1284,
        dout => grp_fu_864_p3);

    convolveMedium_mabkb_U12 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_10_reg_1250,
        din1 => krnl_load_4_reg_1091,
        din2 => tmp_21_2_1_2_reg_1348,
        dout => grp_fu_871_p3);

    convolveMedium_macud_U13 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_12_reg_1325,
        din1 => krnl_load_6_reg_1138,
        din2 => grp_fu_881_p3,
        dout => grp_fu_876_p3);

    convolveMedium_mabkb_U14 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_13_reg_1336,
        din1 => krnl_load_7_reg_1161,
        din2 => tmp_21_2_2_2_reg_1353,
        dout => grp_fu_881_p3);

    convolveMedium_mabkb_U15 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_10_reg_1250,
        din1 => krnl_load_1_reg_1057,
        din2 => tmp_21_3_reg_1368,
        dout => grp_fu_887_p3);

    convolveMedium_mabkb_U16 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_11_reg_1257,
        din1 => krnl_load_2_reg_1070,
        din2 => tmp_21_3_1_reg_1373,
        dout => grp_fu_893_p3);

    convolveMedium_mabkb_U17 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => in_load_13_reg_1336,
        din1 => krnl_load_4_reg_1091,
        din2 => tmp_21_3_1_2_reg_1378,
        dout => grp_fu_899_p3);

    convolveMedium_macud_U18 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_361,
        din1 => krnl_load_6_reg_1138,
        din2 => grp_fu_910_p3,
        dout => grp_fu_904_p3);

    convolveMedium_mabkb_U19 : component convolveMedium_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_365,
        din1 => krnl_load_7_reg_1161,
        din2 => tmp_21_3_2_2_reg_1428,
        dout => grp_fu_910_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_394_p2 = ap_const_lv1_0))) then 
                c_reg_349 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                c_reg_349 <= col_offset_3_2_reg_1383;
            end if; 
        end if;
    end process;

    r1_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1020) or (tmp_2_6_reg_1219 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_3_7_reg_1311)))) then 
                r1_reg_338 <= r_reg_985;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_338 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    col_offset_0_2_cast_s_reg_1117(8 downto 0) <= col_offset_0_2_cast_s_fu_530_p1(8 downto 0);
                krnl_load_5_reg_1109 <= krnl_q0;
                tmp_21_0_0_2_reg_1104 <= tmp_21_0_0_2_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                col_offset_0_2_reg_1099 <= col_offset_0_2_fu_519_p2;
                krnl_load_4_reg_1091 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    col_offset_1_2_cast_s_reg_1203(8 downto 0) <= col_offset_1_2_cast_s_fu_582_p1(8 downto 0);
                krnl_load_8_reg_1190 <= krnl_q0;
                tmp4_reg_1198 <= grp_fu_813_p3;
                tmp7_reg_1214 <= tmp7_fu_595_p2;
                tmp_21_0_2_1_reg_1185 <= tmp_21_0_2_1_fu_577_p2;
                tmp_2_6_reg_1219 <= tmp_2_6_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                col_offset_1_2_reg_1174 <= col_offset_1_2_fu_571_p2;
                krnl_load_7_reg_1161 <= krnl_q0;
                tmp8_reg_1180 <= grp_fu_806_p3;
                tmp_21_0_1_1_reg_1151 <= tmp_21_0_1_1_fu_552_p2;
                tmp_21_1_1_reg_1169 <= tmp_21_1_1_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    col_offset_2_2_cast_s_reg_1295(8 downto 0) <= col_offset_2_2_cast_s_fu_667_p1(8 downto 0);
                tmp14_reg_1306 <= tmp14_fu_680_p2;
                tmp_3_7_reg_1311 <= tmp_3_7_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_6_reg_1219 = ap_const_lv1_1))) then
                col_offset_2_2_reg_1289 <= col_offset_2_2_fu_661_p2;
                tmp_21_2_1_reg_1284 <= tmp_21_2_1_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_6_reg_1219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = tmp_s_reg_1020) and (ap_const_lv1_1 = tmp_3_7_reg_1311))) then
                col_offset_3_2_reg_1383 <= col_offset_3_2_fu_738_p2;
                tmp_21_3_1_2_reg_1378 <= tmp_21_3_1_2_fu_734_p2;
                tmp_21_3_1_reg_1373 <= tmp_21_3_1_fu_730_p2;
                tmp_21_3_reg_1368 <= tmp_21_3_fu_726_p2;
                tmp_22_reg_1388 <= tmp_22_fu_748_p2;
                tmp_23_reg_1393 <= tmp_23_fu_753_p2;
                tmp_24_reg_1398 <= tmp_24_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                in_addr_3_reg_1000 <= tmp_9_cast_fu_445_p1(16 - 1 downto 0);
                in_addr_4_reg_1005 <= tmp_10_cast_fu_455_p1(16 - 1 downto 0);
                in_addr_5_reg_1010 <= tmp_11_cast_fu_466_p1(16 - 1 downto 0);
                out_addr_reg_1015 <= tmp_10_cast_fu_455_p1(16 - 1 downto 0);
                tmp_s_reg_1020 <= tmp_s_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                in_load_10_reg_1250 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                in_load_11_reg_1257 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                in_load_12_reg_1325 <= in_r_q0;
                out_addr_3_reg_1320 <= tmp_23_cast_fu_693_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                in_load_13_reg_1336 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                in_load_14_reg_1342 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                in_load_9_reg_1238 <= in_r_q0;
                out_addr_2_reg_1233 <= tmp_20_cast_fu_608_p1(16 - 1 downto 0);
                tmp5_reg_1223 <= grp_fu_826_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                krnl_load_1_reg_1057 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                krnl_load_2_reg_1070 <= krnl_q0;
                tmp_21_0_0_1_reg_1065 <= tmp_21_0_0_1_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                krnl_load_3_reg_1078 <= krnl_q0;
                tmp1_reg_1086 <= grp_fu_794_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                krnl_load_6_reg_1138 <= krnl_q0;
                tmp2_reg_1146 <= grp_fu_800_p3;
                    tmp_17_cast_reg_1128(16 downto 0) <= tmp_17_cast_fu_547_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                krnl_load_reg_1045 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_394_p2 = ap_const_lv1_0))) then
                r_reg_985 <= r_fu_418_p2;
                    tmp_6_cast_reg_975(15 downto 8) <= tmp_6_cast_fu_414_p1(15 downto 8);
                    tmp_8_cast_reg_990(15 downto 8) <= tmp_8_cast_fu_432_p1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_361 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_365 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_369 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_6_reg_1219 = ap_const_lv1_1)))) then
                reg_378 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp11_reg_1274 <= grp_fu_839_p3;
                tmp12_reg_1279 <= grp_fu_845_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp18_reg_1358 <= grp_fu_871_p3;
                tmp19_reg_1363 <= grp_fu_876_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp21_reg_1408 <= tmp21_fu_767_p2;
                tmp25_reg_1413 <= grp_fu_899_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp26_reg_1433 <= grp_fu_904_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_18_cast_cast_reg_1029(8 downto 0) <= tmp_18_cast_cast_fu_483_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_s_fu_471_p2))) then
                tmp_1_reg_1024 <= tmp_1_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_21_1_1_2_reg_1264 <= tmp_21_1_1_2_fu_638_p2;
                tmp_21_1_2_2_reg_1269 <= tmp_21_1_2_2_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_21_2_1_2_reg_1348 <= tmp_21_2_1_2_fu_708_p2;
                tmp_21_2_2_2_reg_1353 <= tmp_21_2_2_2_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_21_3_2_2_reg_1428 <= tmp_21_3_2_2_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_3_cast_reg_962(15 downto 8) <= tmp_3_cast_fu_390_p1(15 downto 8);
            end if;
        end if;
    end process;
    tmp_3_cast_reg_962(7 downto 0) <= "00000000";
    tmp_3_cast_reg_962(16) <= '0';
    tmp_6_cast_reg_975(7 downto 0) <= "00000000";
    tmp_6_cast_reg_975(16) <= '0';
    tmp_8_cast_reg_990(7 downto 0) <= "00000000";
    tmp_8_cast_reg_990(16) <= '0';
    tmp_18_cast_cast_reg_1029(16 downto 9) <= "00000000";
    col_offset_0_2_cast_s_reg_1117(16 downto 9) <= "00000000";
    tmp_17_cast_reg_1128(31 downto 17) <= "000000000000000";
    col_offset_1_2_cast_s_reg_1203(16 downto 9) <= "00000000";
    col_offset_2_2_cast_s_reg_1295(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state19, tmp_2_6_reg_1219, ap_CS_fsm_state2, exitcond_fu_394_p2, ap_CS_fsm_state3, tmp_s_fu_471_p2, tmp_s_reg_1020, tmp_3_7_reg_1311, ap_CS_fsm_state26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_s_fu_471_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_6_reg_1219 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1020) or (tmp_2_6_reg_1219 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_3_7_reg_1311)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_394_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_394_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_cast_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_349),17));
    col_offset_0_2_cast_s_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_0_2_reg_1099),17));
    col_offset_0_2_fu_519_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_1));
    col_offset_1_2_cast_s_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_1_2_reg_1174),17));
    col_offset_1_2_fu_571_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_2));
    col_offset_2_2_cast_s_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_2_2_reg_1289),17));
    col_offset_2_2_fu_661_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_3));
    col_offset_3_2_cast_s_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_3_2_fu_738_p2),17));
    col_offset_3_2_fu_738_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_4));
    exitcond_fu_394_p2 <= "1" when (r1_reg_338 = ap_const_lv8_FF) else "0";
    grp_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_361) * signed(krnl_load_reg_1045))), 8));

    in_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state9, ap_CS_fsm_state12, in_addr_3_reg_1000, in_addr_4_reg_1005, in_addr_5_reg_1010, ap_CS_fsm_state4, tmp_17_cast_fu_547_p1, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27, tmp_12_cast_fu_491_p1, tmp_13_cast_fu_500_p1, tmp_14_cast_fu_509_p1, tmp_16_cast_fu_538_p1, tmp_18_cast1_fu_561_p1, tmp_19_cast_fu_590_p1, tmp_20_cast_fu_608_p1, tmp_21_cast_fu_633_p1, tmp_22_cast_fu_675_p1, tmp_23_cast_fu_693_p1, tmp_24_cast_fu_703_p1, tmp_25_cast_fu_763_p1, tmp_26_cast_fu_771_p1, tmp_27_cast_fu_775_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            in_r_address0 <= tmp_27_cast_fu_775_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            in_r_address0 <= tmp_26_cast_fu_771_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            in_r_address0 <= tmp_25_cast_fu_763_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_r_address0 <= tmp_24_cast_fu_703_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            in_r_address0 <= tmp_23_cast_fu_693_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            in_r_address0 <= tmp_22_cast_fu_675_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_r_address0 <= tmp_21_cast_fu_633_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_r_address0 <= tmp_20_cast_fu_608_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= tmp_19_cast_fu_590_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_r_address0 <= tmp_18_cast1_fu_561_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_address0 <= tmp_17_cast_fu_547_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_r_address0 <= tmp_16_cast_fu_538_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_r_address0 <= in_addr_5_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= in_addr_4_reg_1005;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= in_addr_3_reg_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= tmp_14_cast_fu_509_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address0 <= tmp_13_cast_fu_500_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= tmp_12_cast_fu_491_p1(16 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    krnl_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            krnl_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            krnl_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            krnl_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            krnl_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            krnl_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            krnl_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            krnl_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            krnl_address0 <= "XXXX";
        end if; 
    end process;


    krnl_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_address0_assign_proc : process(ap_CS_fsm_state19, out_addr_reg_1015, tmp_17_cast_reg_1128, out_addr_2_reg_1233, ap_CS_fsm_state15, out_addr_3_reg_1320, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_address0 <= out_addr_3_reg_1320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_address0 <= out_addr_2_reg_1233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address0 <= tmp_17_cast_reg_1128(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_address0 <= out_addr_reg_1015;
        else 
            out_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state33, sum_2_0_2_2_fu_622_p2, sum_2_1_2_2_fu_651_p2, sum_2_2_2_2_fu_720_p2, sum_2_3_2_2_fu_788_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_d0 <= sum_2_3_2_2_fu_788_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_d0 <= sum_2_2_2_2_fu_720_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_d0 <= sum_2_1_2_2_fu_651_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_d0 <= sum_2_0_2_2_fu_622_p2;
        else 
            out_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state19, tmp_2_6_reg_1219, tmp_s_reg_1020, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((tmp_2_6_reg_1219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = tmp_s_reg_1020)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_418_p2 <= std_logic_vector(unsigned(r1_reg_338) + unsigned(ap_const_lv8_1));
    sum_2_0_2_2_fu_622_p2 <= std_logic_vector(unsigned(tmp3_fu_618_p2) + unsigned(tmp_fu_614_p2));
    sum_2_1_2_2_fu_651_p2 <= std_logic_vector(unsigned(tmp7_reg_1214) + unsigned(tmp10_fu_647_p2));
    sum_2_2_2_2_fu_720_p2 <= std_logic_vector(unsigned(tmp14_reg_1306) + unsigned(tmp17_fu_716_p2));
    sum_2_3_2_2_fu_788_p2 <= std_logic_vector(unsigned(tmp21_reg_1408) + unsigned(tmp24_fu_784_p2));
    tmp10_fu_647_p2 <= std_logic_vector(signed(tmp11_reg_1274) + signed(tmp12_reg_1279));
    tmp14_fu_680_p2 <= std_logic_vector(signed(grp_fu_856_p3) + signed(grp_fu_864_p3));
    tmp17_fu_716_p2 <= std_logic_vector(signed(tmp18_reg_1358) + signed(tmp19_reg_1363));
    tmp21_fu_767_p2 <= std_logic_vector(signed(grp_fu_887_p3) + signed(grp_fu_893_p3));
    tmp24_fu_784_p2 <= std_logic_vector(signed(tmp25_reg_1413) + signed(tmp26_reg_1433));
    tmp3_fu_618_p2 <= std_logic_vector(signed(tmp5_reg_1223) + signed(tmp4_reg_1198));
    tmp7_fu_595_p2 <= std_logic_vector(signed(tmp8_reg_1180) + signed(grp_fu_819_p3));
    tmp_10_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_450_p2),32));
    tmp_10_fu_496_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(tmp_18_cast_cast_reg_1029));
    tmp_11_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_461_p2),32));
    tmp_11_fu_505_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(tmp_18_cast_cast_reg_1029));
    tmp_12_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_486_p2),32));
    tmp_13_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_496_p2),32));
    tmp_13_fu_533_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(col_offset_0_2_cast_s_fu_530_p1));
    tmp_14_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_505_p2),32));
    tmp_14_fu_543_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(col_offset_0_2_cast_s_reg_1117));
    tmp_15_fu_557_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(col_offset_0_2_cast_s_reg_1117));
    tmp_16_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_533_p2),32));
    tmp_16_fu_585_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(col_offset_1_2_cast_s_fu_582_p1));
    tmp_17_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_543_p2),32));
    tmp_17_fu_604_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(col_offset_1_2_cast_s_reg_1203));
    tmp_18_cast1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_557_p2),32));
    tmp_18_cast_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1024),17));
    tmp_18_fu_629_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(col_offset_1_2_cast_s_reg_1203));
    tmp_19_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_585_p2),32));
    tmp_19_fu_670_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(col_offset_2_2_cast_s_fu_667_p1));
    tmp_1_fu_477_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_1FF));
    tmp_20_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_604_p2),32));
    tmp_20_fu_689_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(col_offset_2_2_cast_s_reg_1295));
    tmp_21_0_0_1_fu_514_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(krnl_load_1_reg_1057) * signed(reg_365))), 8));
    tmp_21_0_0_2_fu_525_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(krnl_load_2_reg_1070) * signed(reg_365))), 8));
    tmp_21_0_1_1_fu_552_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(krnl_load_4_reg_1091) * signed(reg_369))), 8));
    tmp_21_0_2_1_fu_577_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(krnl_load_7_reg_1161) * signed(reg_369))), 8));
    tmp_21_1_1_2_fu_638_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_365) * signed(krnl_load_5_reg_1109))), 8));
    tmp_21_1_1_fu_566_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_361) * signed(krnl_load_3_reg_1078))), 8));
    tmp_21_1_2_2_fu_643_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_11_reg_1257) * signed(krnl_load_8_reg_1190))), 8));
    tmp_21_2_1_2_fu_708_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_11_reg_1257) * signed(krnl_load_5_reg_1109))), 8));
    tmp_21_2_1_fu_657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_9_reg_1238) * signed(krnl_load_3_reg_1078))), 8));
    tmp_21_2_2_2_fu_712_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_14_reg_1342) * signed(krnl_load_8_reg_1190))), 8));
    tmp_21_3_1_2_fu_734_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_14_reg_1342) * signed(krnl_load_5_reg_1109))), 8));
    tmp_21_3_1_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_12_reg_1325) * signed(krnl_load_3_reg_1078))), 8));
    tmp_21_3_2_2_fu_779_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_369) * signed(krnl_load_8_reg_1190))), 8));
    tmp_21_3_fu_726_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_load_9_reg_1238) * signed(krnl_load_reg_1045))), 8));
    tmp_21_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_629_p2),32));
    tmp_21_fu_699_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(col_offset_2_2_cast_s_reg_1295));
    tmp_22_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_670_p2),32));
    tmp_22_fu_748_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(col_offset_3_2_cast_s_fu_744_p1));
    tmp_23_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_689_p2),32));
    tmp_23_fu_753_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(col_offset_3_2_cast_s_fu_744_p1));
    tmp_24_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_699_p2),32));
    tmp_24_fu_758_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(col_offset_3_2_cast_s_fu_744_p1));
    tmp_25_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1388),32));
    tmp_26_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1393),32));
    tmp_27_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1398),32));
    tmp_2_6_fu_599_p2 <= "1" when (unsigned(col_offset_1_2_reg_1174) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_2_fu_382_p3 <= (r1_reg_338 & ap_const_lv8_0);
    tmp_3_7_fu_684_p2 <= "1" when (unsigned(col_offset_2_2_reg_1289) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_3_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_382_p3),17));
    tmp_3_fu_450_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_962) + unsigned(c_cast_cast_fu_436_p1));
    tmp_4_fu_400_p2 <= std_logic_vector(unsigned(r1_reg_338) + unsigned(ap_const_lv8_FF));
    tmp_5_fu_406_p3 <= (tmp_4_fu_400_p2 & ap_const_lv8_0);
    tmp_6_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_406_p3),17));
    tmp_6_fu_461_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_990) + unsigned(c_cast_cast_fu_436_p1));
    tmp_7_fu_424_p3 <= (r_fu_418_p2 & ap_const_lv8_0);
    tmp_8_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_424_p3),17));
    tmp_8_fu_486_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(tmp_18_cast_cast_fu_483_p1));
    tmp_9_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_440_p2),32));
    tmp_9_fu_440_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_975) + unsigned(c_cast_cast_fu_436_p1));
    tmp_fu_614_p2 <= std_logic_vector(signed(tmp2_reg_1146) + signed(tmp1_reg_1086));
    tmp_s_fu_471_p2 <= "1" when (unsigned(c_reg_349) < unsigned(ap_const_lv9_FF)) else "0";
end behav;
