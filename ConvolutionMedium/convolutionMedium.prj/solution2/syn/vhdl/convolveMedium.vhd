-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolveMedium is
generic (
    C_S_AXI_CONVM_ADDR_WIDTH : INTEGER := 19;
    C_S_AXI_CONVM_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_convm_AWVALID : IN STD_LOGIC;
    s_axi_convm_AWREADY : OUT STD_LOGIC;
    s_axi_convm_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_WVALID : IN STD_LOGIC;
    s_axi_convm_WREADY : OUT STD_LOGIC;
    s_axi_convm_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH/8-1 downto 0);
    s_axi_convm_ARVALID : IN STD_LOGIC;
    s_axi_convm_ARREADY : OUT STD_LOGIC;
    s_axi_convm_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_RVALID : OUT STD_LOGIC;
    s_axi_convm_RREADY : IN STD_LOGIC;
    s_axi_convm_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_convm_BVALID : OUT STD_LOGIC;
    s_axi_convm_BREADY : IN STD_LOGIC;
    s_axi_convm_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolveMedium is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolveMedium,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=256033,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=36,HLS_SYN_FF=2916,HLS_SYN_LUT=1348}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_359 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_367 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_375 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_3_cast_fu_395_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_reg_1015 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_cast_fu_419_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_cast_reg_1028 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_fu_437_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_cast_reg_1043 : STD_LOGIC_VECTOR (16 downto 0);
    signal in_addr_3_reg_1053 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_addr_4_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_addr_5_reg_1063 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_addr_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_482_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1077 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_cast_cast_fu_488_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_cast_cast_reg_1082 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal col_offset_0_2_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_0_2_reg_1103 : STD_LOGIC_VECTOR (8 downto 0);
    signal krnl_load_2_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal in_load_5_reg_1113 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_0_2_cast_s_fu_525_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_0_2_cast_s_reg_1119 : STD_LOGIC_VECTOR (16 downto 0);
    signal krnl_load_3_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_18_cast1_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast1_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_load_6_reg_1145 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_load_4_reg_1152 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal in_load_7_reg_1162 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_1_2_fu_556_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_1_2_reg_1169 : STD_LOGIC_VECTOR (8 downto 0);
    signal krnl_load_5_reg_1175 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal in_load_8_reg_1180 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_1_2_cast_s_fu_562_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_1_2_cast_s_reg_1187 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_3_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_3_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal krnl_load_6_reg_1202 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_addr_2_reg_1212 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_9_reg_1217 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_reg_1224 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_1_fu_767_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_1_reg_1231 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_2_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_2_reg_1236 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_2_fu_773_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_2_reg_1243 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1253 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_fu_610_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_reg_1259 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_fu_613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_reg_1265 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_1_fu_793_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_1_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_fu_616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_reg_1277 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_1_fu_799_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_1_reg_1284 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_779_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1289 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_fu_804_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_reg_1299 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_fu_810_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_fu_620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_reg_1309 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_21_0_2_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_reg_1315 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_fu_626_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_reg_1322 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1328 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_1333 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_2_fu_847_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_2_reg_1338 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_2_fu_852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_2_reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp7_fu_630_p2 : signal is "no";
    signal tmp7_reg_1348 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_858_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1358 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_fu_875_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_22_2_1_fu_879_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_reg_1368 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_2_2_fu_659_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_reg_1373 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_cast_s_fu_665_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_2_2_cast_s_reg_1379 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp14_fu_678_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp14_fu_678_p2 : signal is "no";
    signal tmp14_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_4_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_4_reg_1395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal out_addr_3_reg_1404 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_12_reg_1409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal in_load_13_reg_1420 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_14_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_22_2_1_2_fu_895_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_2_reg_1432 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_22_2_2_2_fu_900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_2_2_reg_1437 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_reg_1442 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_reg_1447 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_fu_921_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_reg_1452 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_22_3_1_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_reg_1457 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_2_fu_929_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_2_reg_1462 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_3_2_fu_716_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_3_2_reg_1467 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_726_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_reg_1472 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_731_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_reg_1477 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_fu_736_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_reg_1482 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp21_fu_745_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp21_fu_745_p2 : signal is "no";
    signal tmp21_reg_1492 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_947_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp25_reg_1497 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_2_2_fu_952_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_2_2_reg_1512 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_957_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp26_reg_1517 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal r1_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_347 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_9_cast_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_2_2_fu_642_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_1_2_2_fu_653_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_2_2_2_fu_710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_3_2_2_fu_761_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_387_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_429_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_cast_cast_fu_441_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_445_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_455_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_466_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_491_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_501_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_510_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_528_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_538_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_547_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_fu_565_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_580_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_597_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_834_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_638_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp3_fu_638_p2 : signal is "no";
    signal tmp_fu_634_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_fu_634_p2 : signal is "no";
    signal tmp10_fu_649_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp10_fu_649_p2 : signal is "no";
    signal tmp_20_fu_668_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_883_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_889_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_687_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_697_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_706_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp17_fu_706_p2 : signal is "no";
    signal col_offset_3_2_cast_s_fu_722_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_933_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_940_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp24_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp24_fu_757_p2 : signal is "no";
    signal grp_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_fu_804_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_fu_810_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_815_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_827_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_834_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_2_fu_847_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_2_2_fu_852_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_858_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_863_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_fu_875_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_fu_879_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_883_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_889_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_2_fu_895_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_2_2_fu_900_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_904_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_910_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_915_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_915_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_fu_921_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_fu_925_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_2_fu_929_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_933_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_940_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_947_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_2_2_fu_952_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_957_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_963_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_963_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component convolveMedium_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_macud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_maeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_convm_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolveMedium_convm_s_axi_U : component convolveMedium_convm_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONVM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONVM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_convm_AWVALID,
        AWREADY => s_axi_convm_AWREADY,
        AWADDR => s_axi_convm_AWADDR,
        WVALID => s_axi_convm_WVALID,
        WREADY => s_axi_convm_WREADY,
        WDATA => s_axi_convm_WDATA,
        WSTRB => s_axi_convm_WSTRB,
        ARVALID => s_axi_convm_ARVALID,
        ARREADY => s_axi_convm_ARREADY,
        ARADDR => s_axi_convm_ARADDR,
        RVALID => s_axi_convm_RVALID,
        RREADY => s_axi_convm_RREADY,
        RDATA => s_axi_convm_RDATA,
        RRESP => s_axi_convm_RRESP,
        BVALID => s_axi_convm_BVALID,
        BREADY => s_axi_convm_BREADY,
        BRESP => s_axi_convm_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_r_address0,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => out_r_d0,
        krnl_address0 => krnl_address0,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolveMedium_mubkb_U0 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_363,
        din1 => reg_379,
        dout => tmp_22_0_0_1_fu_767_p2);

    convolveMedium_mubkb_U1 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_367,
        din1 => krnl_load_2_reg_1108,
        dout => tmp_22_0_0_2_fu_773_p2);

    convolveMedium_macud_U2 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_359,
        din1 => grp_fu_779_p1,
        din2 => tmp_22_0_0_1_reg_1231,
        dout => grp_fu_779_p3);

    convolveMedium_macud_U3 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_375,
        din1 => grp_fu_786_p1,
        din2 => tmp_22_0_0_2_reg_1243,
        dout => grp_fu_786_p3);

    convolveMedium_mubkb_U4 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_383,
        din1 => krnl_load_4_reg_1152,
        dout => tmp_22_0_1_1_fu_793_p2);

    convolveMedium_mubkb_U5 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_7_reg_1162,
        din1 => reg_379,
        dout => tmp_22_0_2_1_fu_799_p2);

    convolveMedium_mudEe_U6 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_fu_804_p0,
        din1 => reg_375,
        dout => tmp_22_1_fu_804_p2);

    convolveMedium_mudEe_U7 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_fu_810_p0,
        din1 => in_load_6_reg_1145,
        dout => tmp_22_1_1_fu_810_p2);

    convolveMedium_macud_U8 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_5_reg_1113,
        din1 => grp_fu_815_p1,
        din2 => tmp_22_0_1_1_reg_1272,
        dout => grp_fu_815_p3);

    convolveMedium_macud_U9 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_6_reg_1145,
        din1 => krnl_load_6_reg_1202,
        din2 => grp_fu_827_p3,
        dout => grp_fu_821_p3);

    convolveMedium_macud_U10 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_8_reg_1180,
        din1 => grp_fu_827_p1,
        din2 => tmp_22_0_2_1_reg_1284,
        dout => grp_fu_827_p3);

    convolveMedium_maeOg_U11 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_834_p0,
        din1 => reg_383,
        din2 => tmp_22_1_reg_1299,
        dout => grp_fu_834_p3);

    convolveMedium_maeOg_U12 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_841_p0,
        din1 => in_load_5_reg_1113,
        din2 => tmp_22_1_1_reg_1304,
        dout => grp_fu_841_p3);

    convolveMedium_mudEe_U13 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_2_fu_847_p0,
        din1 => in_load_8_reg_1180,
        dout => tmp_22_1_1_2_fu_847_p2);

    convolveMedium_mudEe_U14 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_2_2_fu_852_p0,
        din1 => reg_359,
        dout => tmp_22_1_2_2_fu_852_p2);

    convolveMedium_maeOg_U15 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_858_p0,
        din1 => in_load_7_reg_1162,
        din2 => tmp_22_1_1_2_reg_1338,
        dout => grp_fu_858_p3);

    convolveMedium_maeOg_U16 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_863_p0,
        din1 => in_load_9_reg_1217,
        din2 => grp_fu_868_p3,
        dout => grp_fu_863_p3);

    convolveMedium_maeOg_U17 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_868_p0,
        din1 => reg_363,
        din2 => tmp_22_1_2_2_reg_1343,
        dout => grp_fu_868_p3);

    convolveMedium_mudEe_U18 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_fu_875_p0,
        din1 => in_load_6_reg_1145,
        dout => tmp_22_2_fu_875_p2);

    convolveMedium_mudEe_U19 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_fu_879_p0,
        din1 => in_load_9_reg_1217,
        dout => tmp_22_2_1_fu_879_p2);

    convolveMedium_maeOg_U20 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_883_p0,
        din1 => in_load_7_reg_1162,
        din2 => tmp_22_2_reg_1363,
        dout => grp_fu_883_p3);

    convolveMedium_maeOg_U21 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_889_p0,
        din1 => in_load_8_reg_1180,
        din2 => tmp_22_2_1_reg_1368,
        dout => grp_fu_889_p3);

    convolveMedium_mudEe_U22 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_2_fu_895_p0,
        din1 => reg_359,
        dout => tmp_22_2_1_2_fu_895_p2);

    convolveMedium_mudEe_U23 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_2_2_fu_900_p0,
        din1 => in_load_14_reg_1426,
        dout => tmp_22_2_2_2_fu_900_p2);

    convolveMedium_maeOg_U24 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_904_p0,
        din1 => reg_363,
        din2 => tmp_22_2_1_2_reg_1432,
        dout => grp_fu_904_p3);

    convolveMedium_maeOg_U25 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_910_p0,
        din1 => in_load_12_reg_1409,
        din2 => grp_fu_915_p3,
        dout => grp_fu_910_p3);

    convolveMedium_maeOg_U26 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_915_p0,
        din1 => in_load_13_reg_1420,
        din2 => tmp_22_2_2_2_reg_1437,
        dout => grp_fu_915_p3);

    convolveMedium_mudEe_U27 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_fu_921_p0,
        din1 => in_load_9_reg_1217,
        dout => tmp_22_3_fu_921_p2);

    convolveMedium_mudEe_U28 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_fu_925_p0,
        din1 => in_load_12_reg_1409,
        dout => tmp_22_3_1_fu_925_p2);

    convolveMedium_mudEe_U29 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_2_fu_929_p0,
        din1 => in_load_14_reg_1426,
        dout => tmp_22_3_1_2_fu_929_p2);

    convolveMedium_maeOg_U30 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_933_p0,
        din1 => reg_363,
        din2 => tmp_22_3_reg_1452,
        dout => grp_fu_933_p3);

    convolveMedium_maeOg_U31 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_940_p0,
        din1 => reg_359,
        din2 => tmp_22_3_1_reg_1457,
        dout => grp_fu_940_p3);

    convolveMedium_maeOg_U32 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_947_p0,
        din1 => in_load_13_reg_1420,
        din2 => tmp_22_3_1_2_reg_1462,
        dout => grp_fu_947_p3);

    convolveMedium_mudEe_U33 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_2_2_fu_952_p0,
        din1 => reg_383,
        dout => tmp_22_3_2_2_fu_952_p2);

    convolveMedium_maeOg_U34 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_957_p0,
        din1 => reg_367,
        din2 => grp_fu_963_p3,
        dout => grp_fu_957_p3);

    convolveMedium_maeOg_U35 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_963_p0,
        din1 => reg_375,
        din2 => tmp_22_3_2_2_reg_1512,
        dout => grp_fu_963_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_0))) then 
                c_reg_347 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                c_reg_347 <= col_offset_3_2_reg_1467;
            end if; 
        end if;
    end process;

    r1_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1073) or (ap_const_lv1_0 = tmp_2_3_reg_1198) or (ap_const_lv1_0 = tmp_3_4_reg_1395)))) then 
                r1_reg_336 <= r_reg_1038;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_336 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    col_offset_0_2_cast_s_reg_1119(8 downto 0) <= col_offset_0_2_cast_s_fu_525_p1(8 downto 0);
                in_load_5_reg_1113 <= in_r_q0;
                krnl_load_2_reg_1108 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                col_offset_0_2_reg_1103 <= col_offset_0_2_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    col_offset_1_2_cast_s_reg_1187(8 downto 0) <= col_offset_1_2_cast_s_fu_562_p1(8 downto 0);
                in_load_8_reg_1180 <= in_r_q0;
                krnl_load_5_reg_1175 <= krnl_q0;
                tmp_2_3_reg_1198 <= tmp_2_3_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                col_offset_1_2_reg_1169 <= col_offset_1_2_fu_556_p2;
                in_load_7_reg_1162 <= in_r_q0;
                krnl_load_4_reg_1152 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    col_offset_2_2_cast_s_reg_1379(8 downto 0) <= col_offset_2_2_cast_s_fu_665_p1(8 downto 0);
                tmp14_reg_1390 <= tmp14_fu_678_p2;
                tmp_3_4_reg_1395 <= tmp_3_4_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = tmp_2_3_reg_1198))) then
                col_offset_2_2_reg_1373 <= col_offset_2_2_fu_659_p2;
                tmp_22_2_1_reg_1368 <= tmp_22_2_1_fu_879_p2;
                tmp_22_2_reg_1363 <= tmp_22_2_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_2_3_reg_1198) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_s_reg_1073 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_4_reg_1395))) then
                col_offset_3_2_reg_1467 <= col_offset_3_2_fu_716_p2;
                tmp_22_3_1_2_reg_1462 <= tmp_22_3_1_2_fu_929_p2;
                tmp_22_3_1_reg_1457 <= tmp_22_3_1_fu_925_p2;
                tmp_22_3_reg_1452 <= tmp_22_3_fu_921_p2;
                tmp_23_reg_1472 <= tmp_23_fu_726_p2;
                tmp_24_reg_1477 <= tmp_24_fu_731_p2;
                tmp_25_reg_1482 <= tmp_25_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                in_addr_3_reg_1053 <= tmp_9_cast_fu_450_p1(16 - 1 downto 0);
                in_addr_4_reg_1058 <= tmp_10_cast_fu_460_p1(16 - 1 downto 0);
                in_addr_5_reg_1063 <= tmp_11_cast_fu_471_p1(16 - 1 downto 0);
                out_addr_reg_1068 <= tmp_10_cast_fu_460_p1(16 - 1 downto 0);
                tmp_s_reg_1073 <= tmp_s_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                in_load_12_reg_1409 <= in_r_q0;
                out_addr_3_reg_1404 <= tmp_24_cast_fu_691_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                in_load_13_reg_1420 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                in_load_14_reg_1426 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                in_load_6_reg_1145 <= in_r_q0;
                krnl_load_3_reg_1130 <= krnl_q0;
                    tmp_18_cast1_reg_1135(16 downto 0) <= tmp_18_cast1_fu_542_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                in_load_9_reg_1217 <= in_r_q0;
                krnl_load_6_reg_1202 <= krnl_q0;
                out_addr_2_reg_1212 <= tmp_21_cast_fu_584_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_0))) then
                r_reg_1038 <= r_fu_423_p2;
                    tmp_6_cast_reg_1028(15 downto 8) <= tmp_6_cast_fu_419_p1(15 downto 8);
                    tmp_8_cast_reg_1043(15 downto 8) <= tmp_8_cast_fu_437_p1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_359 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_363 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_367 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_371 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_375 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_379 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_383 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp11_reg_1353 <= grp_fu_858_p3;
                tmp12_reg_1358 <= grp_fu_863_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp18_reg_1442 <= grp_fu_904_p3;
                tmp19_reg_1447 <= grp_fu_910_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp1_reg_1289 <= grp_fu_779_p3;
                tmp2_reg_1294 <= grp_fu_786_p3;
                tmp_12_reg_1253 <= tmp_12_fu_606_p1;
                tmp_21_0_1_1_reg_1265 <= tmp_21_0_1_1_fu_613_p1;
                tmp_21_0_1_reg_1259 <= tmp_21_0_1_fu_610_p1;
                tmp_21_0_2_1_reg_1277 <= tmp_21_0_2_1_fu_616_p1;
                tmp_22_0_1_1_reg_1272 <= tmp_22_0_1_1_fu_793_p2;
                tmp_22_0_2_1_reg_1284 <= tmp_22_0_2_1_fu_799_p2;
                tmp_22_1_1_reg_1304 <= tmp_22_1_1_fu_810_p2;
                tmp_22_1_reg_1299 <= tmp_22_1_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp21_reg_1492 <= tmp21_fu_745_p2;
                tmp25_reg_1497 <= grp_fu_947_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp26_reg_1517 <= grp_fu_957_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp4_reg_1328 <= grp_fu_815_p3;
                tmp5_reg_1333 <= grp_fu_821_p3;
                tmp7_reg_1348 <= tmp7_fu_630_p2;
                tmp_21_0_1_2_reg_1309 <= tmp_21_0_1_2_fu_620_p1;
                tmp_21_0_2_2_reg_1322 <= tmp_21_0_2_2_fu_626_p1;
                tmp_21_0_2_reg_1315 <= tmp_21_0_2_fu_623_p1;
                tmp_22_1_1_2_reg_1338 <= tmp_22_1_1_2_fu_847_p2;
                tmp_22_1_2_2_reg_1343 <= tmp_22_1_2_2_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_18_cast_cast_reg_1082(8 downto 0) <= tmp_18_cast_cast_fu_488_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_476_p2 = ap_const_lv1_1))) then
                tmp_1_reg_1077 <= tmp_1_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_21_0_0_1_reg_1224 <= tmp_21_0_0_1_fu_590_p1;
                tmp_21_0_0_2_reg_1236 <= tmp_21_0_0_2_fu_594_p1;
                tmp_22_0_0_1_reg_1231 <= tmp_22_0_0_1_fu_767_p2;
                tmp_22_0_0_2_reg_1243 <= tmp_22_0_0_2_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_22_2_1_2_reg_1432 <= tmp_22_2_1_2_fu_895_p2;
                tmp_22_2_2_2_reg_1437 <= tmp_22_2_2_2_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_22_3_2_2_reg_1512 <= tmp_22_3_2_2_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_3_cast_reg_1015(15 downto 8) <= tmp_3_cast_fu_395_p1(15 downto 8);
            end if;
        end if;
    end process;
    tmp_3_cast_reg_1015(7 downto 0) <= "00000000";
    tmp_3_cast_reg_1015(16) <= '0';
    tmp_6_cast_reg_1028(7 downto 0) <= "00000000";
    tmp_6_cast_reg_1028(16) <= '0';
    tmp_8_cast_reg_1043(7 downto 0) <= "00000000";
    tmp_8_cast_reg_1043(16) <= '0';
    tmp_18_cast_cast_reg_1082(16 downto 9) <= "00000000";
    col_offset_0_2_cast_s_reg_1119(16 downto 9) <= "00000000";
    tmp_18_cast1_reg_1135(31 downto 17) <= "000000000000000";
    col_offset_1_2_cast_s_reg_1187(16 downto 9) <= "00000000";
    col_offset_2_2_cast_s_reg_1379(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_399_p2, ap_CS_fsm_state3, tmp_s_fu_476_p2, tmp_s_reg_1073, tmp_2_3_reg_1198, ap_CS_fsm_state19, tmp_3_4_reg_1395, ap_CS_fsm_state26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_s_fu_476_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_2_3_reg_1198))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1073) or (ap_const_lv1_0 = tmp_2_3_reg_1198) or (ap_const_lv1_0 = tmp_3_4_reg_1395)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_cast_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_347),17));
    col_offset_0_2_cast_s_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_0_2_reg_1103),17));
    col_offset_0_2_fu_519_p2 <= std_logic_vector(unsigned(c_reg_347) + unsigned(ap_const_lv9_1));
    col_offset_1_2_cast_s_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_1_2_reg_1169),17));
    col_offset_1_2_fu_556_p2 <= std_logic_vector(unsigned(c_reg_347) + unsigned(ap_const_lv9_2));
    col_offset_2_2_cast_s_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_2_2_reg_1373),17));
    col_offset_2_2_fu_659_p2 <= std_logic_vector(unsigned(c_reg_347) + unsigned(ap_const_lv9_3));
    col_offset_3_2_cast_s_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_3_2_fu_716_p2),17));
    col_offset_3_2_fu_716_p2 <= std_logic_vector(unsigned(c_reg_347) + unsigned(ap_const_lv9_4));
    exitcond_fu_399_p2 <= "1" when (r1_reg_336 = ap_const_lv8_FF) else "0";
    grp_fu_779_p1 <= tmp_12_fu_606_p1(8 - 1 downto 0);
    grp_fu_786_p1 <= tmp_21_0_1_fu_610_p1(8 - 1 downto 0);
    grp_fu_815_p1 <= tmp_21_0_1_2_fu_620_p1(8 - 1 downto 0);
    grp_fu_827_p1 <= tmp_21_0_2_2_fu_626_p1(8 - 1 downto 0);
    grp_fu_834_p0 <= tmp_21_0_0_1_reg_1224(8 - 1 downto 0);
    grp_fu_841_p0 <= tmp_21_0_0_2_reg_1236(8 - 1 downto 0);
    grp_fu_858_p0 <= tmp_21_0_1_1_reg_1265(8 - 1 downto 0);
    grp_fu_863_p0 <= tmp_21_0_2_reg_1315(8 - 1 downto 0);
    grp_fu_868_p0 <= tmp_21_0_2_1_reg_1277(8 - 1 downto 0);
    grp_fu_883_p0 <= tmp_21_0_0_1_reg_1224(8 - 1 downto 0);
    grp_fu_889_p0 <= tmp_21_0_0_2_reg_1236(8 - 1 downto 0);
    grp_fu_904_p0 <= tmp_21_0_1_1_reg_1265(8 - 1 downto 0);
    grp_fu_910_p0 <= tmp_21_0_2_reg_1315(8 - 1 downto 0);
    grp_fu_915_p0 <= tmp_21_0_2_1_reg_1277(8 - 1 downto 0);
    grp_fu_933_p0 <= tmp_21_0_0_1_reg_1224(8 - 1 downto 0);
    grp_fu_940_p0 <= tmp_21_0_0_2_reg_1236(8 - 1 downto 0);
    grp_fu_947_p0 <= tmp_21_0_1_1_reg_1265(8 - 1 downto 0);
    grp_fu_957_p0 <= tmp_21_0_2_reg_1315(8 - 1 downto 0);
    grp_fu_963_p0 <= tmp_21_0_2_1_reg_1277(8 - 1 downto 0);

    in_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state29, ap_CS_fsm_state9, in_addr_3_reg_1053, in_addr_4_reg_1058, in_addr_5_reg_1063, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_18_cast1_fu_542_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27, tmp_12_cast_fu_496_p1, tmp_13_cast_fu_505_p1, tmp_14_cast_fu_514_p1, tmp_17_cast_fu_533_p1, tmp_19_cast_fu_551_p1, tmp_20_cast_fu_570_p1, tmp_21_cast_fu_584_p1, tmp_22_cast_fu_601_p1, tmp_23_cast_fu_673_p1, tmp_24_cast_fu_691_p1, tmp_25_cast_fu_701_p1, tmp_26_cast_fu_741_p1, tmp_27_cast_fu_749_p1, tmp_28_cast_fu_753_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            in_r_address0 <= tmp_28_cast_fu_753_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            in_r_address0 <= tmp_27_cast_fu_749_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            in_r_address0 <= tmp_26_cast_fu_741_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_r_address0 <= tmp_25_cast_fu_701_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            in_r_address0 <= tmp_24_cast_fu_691_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            in_r_address0 <= tmp_23_cast_fu_673_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_r_address0 <= tmp_22_cast_fu_601_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_r_address0 <= tmp_21_cast_fu_584_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= tmp_20_cast_fu_570_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_r_address0 <= tmp_19_cast_fu_551_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_address0 <= tmp_18_cast1_fu_542_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_r_address0 <= tmp_17_cast_fu_533_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_r_address0 <= in_addr_5_reg_1063;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= in_addr_4_reg_1058;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= in_addr_3_reg_1053;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= tmp_14_cast_fu_514_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address0 <= tmp_13_cast_fu_505_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= tmp_12_cast_fu_496_p1(16 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state29, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    krnl_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            krnl_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            krnl_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            krnl_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            krnl_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            krnl_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            krnl_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            krnl_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            krnl_address0 <= "XXXX";
        end if; 
    end process;


    krnl_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_address0_assign_proc : process(out_addr_reg_1068, tmp_18_cast1_reg_1135, out_addr_2_reg_1212, ap_CS_fsm_state18, ap_CS_fsm_state19, out_addr_3_reg_1404, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_address0 <= out_addr_3_reg_1404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_address0 <= out_addr_2_reg_1212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address0 <= tmp_18_cast1_reg_1135(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_address0 <= out_addr_reg_1068;
        else 
            out_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33, sum_2_0_2_2_fu_642_p2, sum_2_1_2_2_fu_653_p2, sum_2_2_2_2_fu_710_p2, sum_2_3_2_2_fu_761_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_d0 <= sum_2_3_2_2_fu_761_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_d0 <= sum_2_2_2_2_fu_710_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_d0 <= sum_2_1_2_2_fu_653_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_d0 <= sum_2_0_2_2_fu_642_p2;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(tmp_s_reg_1073, tmp_2_3_reg_1198, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_lv1_1 = tmp_2_3_reg_1198) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_s_reg_1073 = ap_const_lv1_1)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_423_p2 <= std_logic_vector(unsigned(r1_reg_336) + unsigned(ap_const_lv8_1));
    sum_2_0_2_2_fu_642_p2 <= std_logic_vector(unsigned(tmp3_fu_638_p2) + unsigned(tmp_fu_634_p2));
    sum_2_1_2_2_fu_653_p2 <= std_logic_vector(unsigned(tmp7_reg_1348) + unsigned(tmp10_fu_649_p2));
    sum_2_2_2_2_fu_710_p2 <= std_logic_vector(unsigned(tmp14_reg_1390) + unsigned(tmp17_fu_706_p2));
    sum_2_3_2_2_fu_761_p2 <= std_logic_vector(unsigned(tmp21_reg_1492) + unsigned(tmp24_fu_757_p2));
    tmp10_fu_649_p2 <= std_logic_vector(signed(tmp11_reg_1353) + signed(tmp12_reg_1358));
    tmp14_fu_678_p2 <= std_logic_vector(signed(grp_fu_883_p3) + signed(grp_fu_889_p3));
    tmp17_fu_706_p2 <= std_logic_vector(signed(tmp18_reg_1442) + signed(tmp19_reg_1447));
    tmp21_fu_745_p2 <= std_logic_vector(signed(grp_fu_933_p3) + signed(grp_fu_940_p3));
    tmp24_fu_757_p2 <= std_logic_vector(signed(tmp25_reg_1497) + signed(tmp26_reg_1517));
    tmp3_fu_638_p2 <= std_logic_vector(signed(tmp5_reg_1333) + signed(tmp4_reg_1328));
    tmp7_fu_630_p2 <= std_logic_vector(signed(grp_fu_834_p3) + signed(grp_fu_841_p3));
    tmp_10_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_455_p2),32));
    tmp_10_fu_501_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(tmp_18_cast_cast_reg_1082));
    tmp_11_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_466_p2),32));
    tmp_11_fu_510_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(tmp_18_cast_cast_reg_1082));
    tmp_12_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_491_p2),32));
        tmp_12_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_371),16));

    tmp_13_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_501_p2),32));
    tmp_14_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_510_p2),32));
    tmp_14_fu_528_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(col_offset_0_2_cast_s_fu_525_p1));
    tmp_15_fu_538_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(col_offset_0_2_cast_s_reg_1119));
    tmp_16_fu_547_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(col_offset_0_2_cast_s_reg_1119));
    tmp_17_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_528_p2),32));
    tmp_17_fu_565_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(col_offset_1_2_cast_s_fu_562_p1));
    tmp_18_cast1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_538_p2),32));
    tmp_18_cast_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1077),17));
    tmp_18_fu_580_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(col_offset_1_2_cast_s_reg_1187));
    tmp_19_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_547_p2),32));
    tmp_19_fu_597_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(col_offset_1_2_cast_s_reg_1187));
    tmp_1_fu_482_p2 <= std_logic_vector(unsigned(c_reg_347) + unsigned(ap_const_lv9_1FF));
    tmp_20_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_565_p2),32));
    tmp_20_fu_668_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(col_offset_2_2_cast_s_fu_665_p1));
        tmp_21_0_0_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_379),16));

        tmp_21_0_0_2_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_2_reg_1108),16));

        tmp_21_0_1_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_4_reg_1152),16));

        tmp_21_0_1_2_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_5_reg_1175),16));

        tmp_21_0_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_3_reg_1130),16));

        tmp_21_0_2_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_379),16));

        tmp_21_0_2_2_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_371),16));

        tmp_21_0_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_6_reg_1202),16));

    tmp_21_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_580_p2),32));
    tmp_21_fu_687_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(col_offset_2_2_cast_s_reg_1379));
    tmp_22_1_1_2_fu_847_p0 <= tmp_21_0_1_2_fu_620_p1(8 - 1 downto 0);
    tmp_22_1_1_fu_810_p0 <= tmp_21_0_1_fu_610_p1(8 - 1 downto 0);
    tmp_22_1_2_2_fu_852_p0 <= tmp_21_0_2_2_fu_626_p1(8 - 1 downto 0);
    tmp_22_1_fu_804_p0 <= tmp_12_fu_606_p1(8 - 1 downto 0);
    tmp_22_2_1_2_fu_895_p0 <= tmp_21_0_1_2_reg_1309(8 - 1 downto 0);
    tmp_22_2_1_fu_879_p0 <= tmp_21_0_1_reg_1259(8 - 1 downto 0);
    tmp_22_2_2_2_fu_900_p0 <= tmp_21_0_2_2_reg_1322(8 - 1 downto 0);
    tmp_22_2_fu_875_p0 <= tmp_12_reg_1253(8 - 1 downto 0);
    tmp_22_3_1_2_fu_929_p0 <= tmp_21_0_1_2_reg_1309(8 - 1 downto 0);
    tmp_22_3_1_fu_925_p0 <= tmp_21_0_1_reg_1259(8 - 1 downto 0);
    tmp_22_3_2_2_fu_952_p0 <= tmp_21_0_2_2_reg_1322(8 - 1 downto 0);
    tmp_22_3_fu_921_p0 <= tmp_12_reg_1253(8 - 1 downto 0);
    tmp_22_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_597_p2),32));
    tmp_22_fu_697_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(col_offset_2_2_cast_s_reg_1379));
    tmp_23_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_668_p2),32));
    tmp_23_fu_726_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(col_offset_3_2_cast_s_fu_722_p1));
    tmp_24_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_687_p2),32));
    tmp_24_fu_731_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(col_offset_3_2_cast_s_fu_722_p1));
    tmp_25_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_697_p2),32));
    tmp_25_fu_736_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(col_offset_3_2_cast_s_fu_722_p1));
    tmp_26_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1472),32));
    tmp_27_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1477),32));
    tmp_28_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1482),32));
    tmp_2_3_fu_575_p2 <= "1" when (unsigned(col_offset_1_2_reg_1169) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_2_fu_387_p3 <= (r1_reg_336 & ap_const_lv8_0);
    tmp_3_4_fu_682_p2 <= "1" when (unsigned(col_offset_2_2_reg_1373) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_3_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_387_p3),17));
    tmp_3_fu_455_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1015) + unsigned(c_cast_cast_fu_441_p1));
    tmp_4_fu_405_p2 <= std_logic_vector(unsigned(r1_reg_336) + unsigned(ap_const_lv8_FF));
    tmp_5_fu_411_p3 <= (tmp_4_fu_405_p2 & ap_const_lv8_0);
    tmp_6_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_411_p3),17));
    tmp_6_fu_466_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1043) + unsigned(c_cast_cast_fu_441_p1));
    tmp_7_fu_429_p3 <= (r_fu_423_p2 & ap_const_lv8_0);
    tmp_8_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_429_p3),17));
    tmp_8_fu_491_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(tmp_18_cast_cast_fu_488_p1));
    tmp_9_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_445_p2),32));
    tmp_9_fu_445_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1028) + unsigned(c_cast_cast_fu_441_p1));
    tmp_fu_634_p2 <= std_logic_vector(signed(tmp2_reg_1294) + signed(tmp1_reg_1289));
    tmp_s_fu_476_p2 <= "1" when (unsigned(c_reg_347) < unsigned(ap_const_lv9_FF)) else "0";
end behav;
