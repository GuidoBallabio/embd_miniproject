-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolveMedium is
generic (
    C_S_AXI_CONVM_ADDR_WIDTH : INTEGER := 19;
    C_S_AXI_CONVM_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_convm_AWVALID : IN STD_LOGIC;
    s_axi_convm_AWREADY : OUT STD_LOGIC;
    s_axi_convm_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_WVALID : IN STD_LOGIC;
    s_axi_convm_WREADY : OUT STD_LOGIC;
    s_axi_convm_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH/8-1 downto 0);
    s_axi_convm_ARVALID : IN STD_LOGIC;
    s_axi_convm_ARREADY : OUT STD_LOGIC;
    s_axi_convm_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONVM_ADDR_WIDTH-1 downto 0);
    s_axi_convm_RVALID : OUT STD_LOGIC;
    s_axi_convm_RREADY : IN STD_LOGIC;
    s_axi_convm_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONVM_DATA_WIDTH-1 downto 0);
    s_axi_convm_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_convm_BVALID : OUT STD_LOGIC;
    s_axi_convm_BREADY : IN STD_LOGIC;
    s_axi_convm_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolveMedium is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolveMedium,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=256033,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=36,HLS_SYN_FF=2916,HLS_SYN_LUT=1348}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_365 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_369 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_373 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_3_cast_fu_397_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_reg_1017 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_cast_fu_421_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_cast_reg_1030 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_425_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_1040 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_fu_439_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_cast_reg_1045 : STD_LOGIC_VECTOR (16 downto 0);
    signal in_addr_3_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_addr_4_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_addr_5_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_addr_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1075 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_484_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1079 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_cast_cast_fu_490_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_cast_cast_reg_1084 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal col_offset_0_2_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_0_2_reg_1105 : STD_LOGIC_VECTOR (8 downto 0);
    signal krnl_load_2_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal in_load_5_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_0_2_cast_s_fu_527_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_0_2_cast_s_reg_1121 : STD_LOGIC_VECTOR (16 downto 0);
    signal krnl_load_3_reg_1132 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_18_cast1_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast1_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_load_6_reg_1147 : STD_LOGIC_VECTOR (15 downto 0);
    signal krnl_load_4_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal in_load_7_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_1_2_fu_558_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_1_2_reg_1171 : STD_LOGIC_VECTOR (8 downto 0);
    signal krnl_load_5_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal in_load_8_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_1_2_cast_s_fu_564_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_1_2_cast_s_reg_1189 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_6_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_6_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal krnl_load_6_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_addr_2_reg_1214 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_9_reg_1219 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_1_reg_1226 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_1_fu_769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_1_reg_1233 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_2_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_0_2_reg_1238 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_2_fu_775_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_0_2_reg_1245 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_1_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_1_fu_795_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_1_1_reg_1274 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_fu_618_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_1_reg_1279 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_1_fu_801_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_0_2_1_reg_1286 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_781_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1291 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_788_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_fu_806_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_reg_1301 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_fu_812_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_fu_622_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_1_2_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_21_0_2_fu_625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_reg_1317 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_fu_628_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_0_2_2_reg_1324 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_817_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1330 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_823_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_1335 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_2_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_1_2_reg_1340 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_2_fu_854_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_1_2_2_reg_1345 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_632_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp7_fu_632_p2 : signal is "no";
    signal tmp7_reg_1350 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_860_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_1355 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_865_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_fu_877_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_reg_1365 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_22_2_1_fu_881_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_reg_1370 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_2_2_fu_661_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_reg_1375 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_2_2_cast_s_fu_667_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_offset_2_2_cast_s_reg_1381 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp14_fu_680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp14_fu_680_p2 : signal is "no";
    signal tmp14_reg_1392 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_7_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_7_reg_1397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal out_addr_3_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_12_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal in_load_13_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_14_reg_1428 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_22_2_1_2_fu_897_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_1_2_reg_1434 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_22_2_2_2_fu_902_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_2_2_reg_1439 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_906_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_reg_1444 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_912_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_reg_1449 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_fu_923_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_reg_1454 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_22_3_1_fu_927_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_reg_1459 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_2_fu_931_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_1_2_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_3_2_fu_718_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_offset_3_2_reg_1469 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_728_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_reg_1474 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_733_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_reg_1479 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_fu_738_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_reg_1484 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp21_fu_747_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp21_fu_747_p2 : signal is "no";
    signal tmp21_reg_1494 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_949_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp25_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_2_2_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_2_2_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_959_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp26_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal r1_reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_9_cast_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_2_2_fu_644_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_1_2_2_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_2_2_2_fu_712_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_3_2_2_fu_763_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_389_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_431_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_cast_cast_fu_443_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_447_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_457_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_468_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_493_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_503_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_512_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_530_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_540_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_549_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_fu_567_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_582_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_599_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_836_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_843_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp3_fu_640_p2 : signal is "no";
    signal tmp_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_fu_636_p2 : signal is "no";
    signal tmp10_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp10_fu_651_p2 : signal is "no";
    signal tmp_20_fu_670_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_885_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_891_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_689_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_699_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_708_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp17_fu_708_p2 : signal is "no";
    signal col_offset_3_2_cast_s_fu_724_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_935_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp24_fu_759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp24_fu_759_p2 : signal is "no";
    signal grp_fu_781_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_fu_806_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_fu_812_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_817_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_829_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_836_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_843_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_1_2_fu_849_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_1_2_2_fu_854_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_860_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_865_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_fu_877_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_fu_881_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_885_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_891_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_1_2_fu_897_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_2_2_2_fu_902_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_906_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_917_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_917_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_fu_923_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_fu_927_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_1_2_fu_931_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_935_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_949_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_3_2_2_fu_954_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_959_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_965_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_965_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component convolveMedium_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_macud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_maeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolveMedium_convm_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    convolveMedium_convm_s_axi_U : component convolveMedium_convm_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONVM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONVM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_convm_AWVALID,
        AWREADY => s_axi_convm_AWREADY,
        AWADDR => s_axi_convm_AWADDR,
        WVALID => s_axi_convm_WVALID,
        WREADY => s_axi_convm_WREADY,
        WDATA => s_axi_convm_WDATA,
        WSTRB => s_axi_convm_WSTRB,
        ARVALID => s_axi_convm_ARVALID,
        ARREADY => s_axi_convm_ARREADY,
        ARADDR => s_axi_convm_ARADDR,
        RVALID => s_axi_convm_RVALID,
        RREADY => s_axi_convm_RREADY,
        RDATA => s_axi_convm_RDATA,
        RRESP => s_axi_convm_RRESP,
        BVALID => s_axi_convm_BVALID,
        BREADY => s_axi_convm_BREADY,
        BRESP => s_axi_convm_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_r_address0,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => out_r_d0,
        krnl_address0 => krnl_address0,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolveMedium_mubkb_U0 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_365,
        din1 => reg_381,
        dout => tmp_22_0_0_1_fu_769_p2);

    convolveMedium_mubkb_U1 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_369,
        din1 => krnl_load_2_reg_1110,
        dout => tmp_22_0_0_2_fu_775_p2);

    convolveMedium_macud_U2 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_361,
        din1 => grp_fu_781_p1,
        din2 => tmp_22_0_0_1_reg_1233,
        dout => grp_fu_781_p3);

    convolveMedium_macud_U3 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_377,
        din1 => grp_fu_788_p1,
        din2 => tmp_22_0_0_2_reg_1245,
        dout => grp_fu_788_p3);

    convolveMedium_mubkb_U4 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_385,
        din1 => krnl_load_4_reg_1154,
        dout => tmp_22_0_1_1_fu_795_p2);

    convolveMedium_mubkb_U5 : component convolveMedium_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_7_reg_1164,
        din1 => reg_381,
        dout => tmp_22_0_2_1_fu_801_p2);

    convolveMedium_mudEe_U6 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_fu_806_p0,
        din1 => reg_377,
        dout => tmp_22_1_fu_806_p2);

    convolveMedium_mudEe_U7 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_fu_812_p0,
        din1 => in_load_6_reg_1147,
        dout => tmp_22_1_1_fu_812_p2);

    convolveMedium_macud_U8 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_5_reg_1115,
        din1 => grp_fu_817_p1,
        din2 => tmp_22_0_1_1_reg_1274,
        dout => grp_fu_817_p3);

    convolveMedium_macud_U9 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_6_reg_1147,
        din1 => krnl_load_6_reg_1204,
        din2 => grp_fu_829_p3,
        dout => grp_fu_823_p3);

    convolveMedium_macud_U10 : component convolveMedium_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => in_load_8_reg_1182,
        din1 => grp_fu_829_p1,
        din2 => tmp_22_0_2_1_reg_1286,
        dout => grp_fu_829_p3);

    convolveMedium_maeOg_U11 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_836_p0,
        din1 => reg_385,
        din2 => tmp_22_1_reg_1301,
        dout => grp_fu_836_p3);

    convolveMedium_maeOg_U12 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_843_p0,
        din1 => in_load_5_reg_1115,
        din2 => tmp_22_1_1_reg_1306,
        dout => grp_fu_843_p3);

    convolveMedium_mudEe_U13 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_1_2_fu_849_p0,
        din1 => in_load_8_reg_1182,
        dout => tmp_22_1_1_2_fu_849_p2);

    convolveMedium_mudEe_U14 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_1_2_2_fu_854_p0,
        din1 => reg_361,
        dout => tmp_22_1_2_2_fu_854_p2);

    convolveMedium_maeOg_U15 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_860_p0,
        din1 => in_load_7_reg_1164,
        din2 => tmp_22_1_1_2_reg_1340,
        dout => grp_fu_860_p3);

    convolveMedium_maeOg_U16 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_865_p0,
        din1 => in_load_9_reg_1219,
        din2 => grp_fu_870_p3,
        dout => grp_fu_865_p3);

    convolveMedium_maeOg_U17 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_870_p0,
        din1 => reg_365,
        din2 => tmp_22_1_2_2_reg_1345,
        dout => grp_fu_870_p3);

    convolveMedium_mudEe_U18 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_fu_877_p0,
        din1 => in_load_6_reg_1147,
        dout => tmp_22_2_fu_877_p2);

    convolveMedium_mudEe_U19 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_fu_881_p0,
        din1 => in_load_9_reg_1219,
        dout => tmp_22_2_1_fu_881_p2);

    convolveMedium_maeOg_U20 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_885_p0,
        din1 => in_load_7_reg_1164,
        din2 => tmp_22_2_reg_1365,
        dout => grp_fu_885_p3);

    convolveMedium_maeOg_U21 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_891_p0,
        din1 => in_load_8_reg_1182,
        din2 => tmp_22_2_1_reg_1370,
        dout => grp_fu_891_p3);

    convolveMedium_mudEe_U22 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_1_2_fu_897_p0,
        din1 => reg_361,
        dout => tmp_22_2_1_2_fu_897_p2);

    convolveMedium_mudEe_U23 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_2_2_2_fu_902_p0,
        din1 => in_load_14_reg_1428,
        dout => tmp_22_2_2_2_fu_902_p2);

    convolveMedium_maeOg_U24 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_906_p0,
        din1 => reg_365,
        din2 => tmp_22_2_1_2_reg_1434,
        dout => grp_fu_906_p3);

    convolveMedium_maeOg_U25 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_912_p0,
        din1 => in_load_12_reg_1411,
        din2 => grp_fu_917_p3,
        dout => grp_fu_912_p3);

    convolveMedium_maeOg_U26 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_917_p0,
        din1 => in_load_13_reg_1422,
        din2 => tmp_22_2_2_2_reg_1439,
        dout => grp_fu_917_p3);

    convolveMedium_mudEe_U27 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_fu_923_p0,
        din1 => in_load_9_reg_1219,
        dout => tmp_22_3_fu_923_p2);

    convolveMedium_mudEe_U28 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_fu_927_p0,
        din1 => in_load_12_reg_1411,
        dout => tmp_22_3_1_fu_927_p2);

    convolveMedium_mudEe_U29 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_1_2_fu_931_p0,
        din1 => in_load_14_reg_1428,
        dout => tmp_22_3_1_2_fu_931_p2);

    convolveMedium_maeOg_U30 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_935_p0,
        din1 => reg_365,
        din2 => tmp_22_3_reg_1454,
        dout => grp_fu_935_p3);

    convolveMedium_maeOg_U31 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_942_p0,
        din1 => reg_361,
        din2 => tmp_22_3_1_reg_1459,
        dout => grp_fu_942_p3);

    convolveMedium_maeOg_U32 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_949_p0,
        din1 => in_load_13_reg_1422,
        din2 => tmp_22_3_1_2_reg_1464,
        dout => grp_fu_949_p3);

    convolveMedium_mudEe_U33 : component convolveMedium_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_22_3_2_2_fu_954_p0,
        din1 => reg_385,
        dout => tmp_22_3_2_2_fu_954_p2);

    convolveMedium_maeOg_U34 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_959_p0,
        din1 => reg_369,
        din2 => grp_fu_965_p3,
        dout => grp_fu_959_p3);

    convolveMedium_maeOg_U35 : component convolveMedium_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_965_p0,
        din1 => reg_377,
        din2 => tmp_22_3_2_2_reg_1514,
        dout => grp_fu_965_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_401_p2 = ap_const_lv1_0))) then 
                c_reg_349 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                c_reg_349 <= col_offset_3_2_reg_1469;
            end if; 
        end if;
    end process;

    r1_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1075) or (ap_const_lv1_0 = tmp_2_6_reg_1200) or (ap_const_lv1_0 = tmp_3_7_reg_1397)))) then 
                r1_reg_338 <= r_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_338 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    col_offset_0_2_cast_s_reg_1121(8 downto 0) <= col_offset_0_2_cast_s_fu_527_p1(8 downto 0);
                in_load_5_reg_1115 <= in_r_q0;
                krnl_load_2_reg_1110 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                col_offset_0_2_reg_1105 <= col_offset_0_2_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    col_offset_1_2_cast_s_reg_1189(8 downto 0) <= col_offset_1_2_cast_s_fu_564_p1(8 downto 0);
                in_load_8_reg_1182 <= in_r_q0;
                krnl_load_5_reg_1177 <= krnl_q0;
                tmp_2_6_reg_1200 <= tmp_2_6_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                col_offset_1_2_reg_1171 <= col_offset_1_2_fu_558_p2;
                in_load_7_reg_1164 <= in_r_q0;
                krnl_load_4_reg_1154 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    col_offset_2_2_cast_s_reg_1381(8 downto 0) <= col_offset_2_2_cast_s_fu_667_p1(8 downto 0);
                tmp14_reg_1392 <= tmp14_fu_680_p2;
                tmp_3_7_reg_1397 <= tmp_3_7_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = tmp_2_6_reg_1200))) then
                col_offset_2_2_reg_1375 <= col_offset_2_2_fu_661_p2;
                tmp_22_2_1_reg_1370 <= tmp_22_2_1_fu_881_p2;
                tmp_22_2_reg_1365 <= tmp_22_2_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_2_6_reg_1200) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_s_reg_1075 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_7_reg_1397))) then
                col_offset_3_2_reg_1469 <= col_offset_3_2_fu_718_p2;
                tmp_22_3_1_2_reg_1464 <= tmp_22_3_1_2_fu_931_p2;
                tmp_22_3_1_reg_1459 <= tmp_22_3_1_fu_927_p2;
                tmp_22_3_reg_1454 <= tmp_22_3_fu_923_p2;
                tmp_23_reg_1474 <= tmp_23_fu_728_p2;
                tmp_24_reg_1479 <= tmp_24_fu_733_p2;
                tmp_25_reg_1484 <= tmp_25_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                in_addr_3_reg_1055 <= tmp_9_cast_fu_452_p1(16 - 1 downto 0);
                in_addr_4_reg_1060 <= tmp_10_cast_fu_462_p1(16 - 1 downto 0);
                in_addr_5_reg_1065 <= tmp_11_cast_fu_473_p1(16 - 1 downto 0);
                out_addr_reg_1070 <= tmp_10_cast_fu_462_p1(16 - 1 downto 0);
                tmp_s_reg_1075 <= tmp_s_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                in_load_12_reg_1411 <= in_r_q0;
                out_addr_3_reg_1406 <= tmp_24_cast_fu_693_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                in_load_13_reg_1422 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                in_load_14_reg_1428 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                in_load_6_reg_1147 <= in_r_q0;
                krnl_load_3_reg_1132 <= krnl_q0;
                    tmp_18_cast1_reg_1137(16 downto 0) <= tmp_18_cast1_fu_544_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                in_load_9_reg_1219 <= in_r_q0;
                krnl_load_6_reg_1204 <= krnl_q0;
                out_addr_2_reg_1214 <= tmp_21_cast_fu_586_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_401_p2 = ap_const_lv1_0))) then
                r_reg_1040 <= r_fu_425_p2;
                    tmp_6_cast_reg_1030(15 downto 8) <= tmp_6_cast_fu_421_p1(15 downto 8);
                    tmp_8_cast_reg_1045(15 downto 8) <= tmp_8_cast_fu_439_p1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_361 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_365 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_369 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_373 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_377 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_381 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_385 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp11_reg_1355 <= grp_fu_860_p3;
                tmp12_reg_1360 <= grp_fu_865_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp18_reg_1444 <= grp_fu_906_p3;
                tmp19_reg_1449 <= grp_fu_912_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp1_reg_1291 <= grp_fu_781_p3;
                tmp2_reg_1296 <= grp_fu_788_p3;
                tmp_12_reg_1255 <= tmp_12_fu_608_p1;
                tmp_21_0_1_1_reg_1267 <= tmp_21_0_1_1_fu_615_p1;
                tmp_21_0_1_reg_1261 <= tmp_21_0_1_fu_612_p1;
                tmp_21_0_2_1_reg_1279 <= tmp_21_0_2_1_fu_618_p1;
                tmp_22_0_1_1_reg_1274 <= tmp_22_0_1_1_fu_795_p2;
                tmp_22_0_2_1_reg_1286 <= tmp_22_0_2_1_fu_801_p2;
                tmp_22_1_1_reg_1306 <= tmp_22_1_1_fu_812_p2;
                tmp_22_1_reg_1301 <= tmp_22_1_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp21_reg_1494 <= tmp21_fu_747_p2;
                tmp25_reg_1499 <= grp_fu_949_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp26_reg_1519 <= grp_fu_959_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp4_reg_1330 <= grp_fu_817_p3;
                tmp5_reg_1335 <= grp_fu_823_p3;
                tmp7_reg_1350 <= tmp7_fu_632_p2;
                tmp_21_0_1_2_reg_1311 <= tmp_21_0_1_2_fu_622_p1;
                tmp_21_0_2_2_reg_1324 <= tmp_21_0_2_2_fu_628_p1;
                tmp_21_0_2_reg_1317 <= tmp_21_0_2_fu_625_p1;
                tmp_22_1_1_2_reg_1340 <= tmp_22_1_1_2_fu_849_p2;
                tmp_22_1_2_2_reg_1345 <= tmp_22_1_2_2_fu_854_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_18_cast_cast_reg_1084(8 downto 0) <= tmp_18_cast_cast_fu_490_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_478_p2 = ap_const_lv1_1))) then
                tmp_1_reg_1079 <= tmp_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_21_0_0_1_reg_1226 <= tmp_21_0_0_1_fu_592_p1;
                tmp_21_0_0_2_reg_1238 <= tmp_21_0_0_2_fu_596_p1;
                tmp_22_0_0_1_reg_1233 <= tmp_22_0_0_1_fu_769_p2;
                tmp_22_0_0_2_reg_1245 <= tmp_22_0_0_2_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_22_2_1_2_reg_1434 <= tmp_22_2_1_2_fu_897_p2;
                tmp_22_2_2_2_reg_1439 <= tmp_22_2_2_2_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_22_3_2_2_reg_1514 <= tmp_22_3_2_2_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_3_cast_reg_1017(15 downto 8) <= tmp_3_cast_fu_397_p1(15 downto 8);
            end if;
        end if;
    end process;
    tmp_3_cast_reg_1017(7 downto 0) <= "00000000";
    tmp_3_cast_reg_1017(16) <= '0';
    tmp_6_cast_reg_1030(7 downto 0) <= "00000000";
    tmp_6_cast_reg_1030(16) <= '0';
    tmp_8_cast_reg_1045(7 downto 0) <= "00000000";
    tmp_8_cast_reg_1045(16) <= '0';
    tmp_18_cast_cast_reg_1084(16 downto 9) <= "00000000";
    col_offset_0_2_cast_s_reg_1121(16 downto 9) <= "00000000";
    tmp_18_cast1_reg_1137(31 downto 17) <= "000000000000000";
    col_offset_1_2_cast_s_reg_1189(16 downto 9) <= "00000000";
    col_offset_2_2_cast_s_reg_1381(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_401_p2, ap_CS_fsm_state3, tmp_s_fu_478_p2, tmp_s_reg_1075, tmp_2_6_reg_1200, ap_CS_fsm_state19, tmp_3_7_reg_1397, ap_CS_fsm_state26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_s_fu_478_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_2_6_reg_1200))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((ap_const_lv1_0 = tmp_s_reg_1075) or (ap_const_lv1_0 = tmp_2_6_reg_1200) or (ap_const_lv1_0 = tmp_3_7_reg_1397)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_401_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_401_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_cast_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_349),17));
    col_offset_0_2_cast_s_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_0_2_reg_1105),17));
    col_offset_0_2_fu_521_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_1));
    col_offset_1_2_cast_s_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_1_2_reg_1171),17));
    col_offset_1_2_fu_558_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_2));
    col_offset_2_2_cast_s_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_2_2_reg_1375),17));
    col_offset_2_2_fu_661_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_3));
    col_offset_3_2_cast_s_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_3_2_fu_718_p2),17));
    col_offset_3_2_fu_718_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_4));
    exitcond_fu_401_p2 <= "1" when (r1_reg_338 = ap_const_lv8_FF) else "0";
    grp_fu_781_p1 <= tmp_12_fu_608_p1(8 - 1 downto 0);
    grp_fu_788_p1 <= tmp_21_0_1_fu_612_p1(8 - 1 downto 0);
    grp_fu_817_p1 <= tmp_21_0_1_2_fu_622_p1(8 - 1 downto 0);
    grp_fu_829_p1 <= tmp_21_0_2_2_fu_628_p1(8 - 1 downto 0);
    grp_fu_836_p0 <= tmp_21_0_0_1_reg_1226(8 - 1 downto 0);
    grp_fu_843_p0 <= tmp_21_0_0_2_reg_1238(8 - 1 downto 0);
    grp_fu_860_p0 <= tmp_21_0_1_1_reg_1267(8 - 1 downto 0);
    grp_fu_865_p0 <= tmp_21_0_2_reg_1317(8 - 1 downto 0);
    grp_fu_870_p0 <= tmp_21_0_2_1_reg_1279(8 - 1 downto 0);
    grp_fu_885_p0 <= tmp_21_0_0_1_reg_1226(8 - 1 downto 0);
    grp_fu_891_p0 <= tmp_21_0_0_2_reg_1238(8 - 1 downto 0);
    grp_fu_906_p0 <= tmp_21_0_1_1_reg_1267(8 - 1 downto 0);
    grp_fu_912_p0 <= tmp_21_0_2_reg_1317(8 - 1 downto 0);
    grp_fu_917_p0 <= tmp_21_0_2_1_reg_1279(8 - 1 downto 0);
    grp_fu_935_p0 <= tmp_21_0_0_1_reg_1226(8 - 1 downto 0);
    grp_fu_942_p0 <= tmp_21_0_0_2_reg_1238(8 - 1 downto 0);
    grp_fu_949_p0 <= tmp_21_0_1_1_reg_1267(8 - 1 downto 0);
    grp_fu_959_p0 <= tmp_21_0_2_reg_1317(8 - 1 downto 0);
    grp_fu_965_p0 <= tmp_21_0_2_1_reg_1279(8 - 1 downto 0);

    in_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state29, ap_CS_fsm_state9, in_addr_3_reg_1055, in_addr_4_reg_1060, in_addr_5_reg_1065, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_18_cast1_fu_544_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27, tmp_12_cast_fu_498_p1, tmp_13_cast_fu_507_p1, tmp_14_cast_fu_516_p1, tmp_17_cast_fu_535_p1, tmp_19_cast_fu_553_p1, tmp_20_cast_fu_572_p1, tmp_21_cast_fu_586_p1, tmp_22_cast_fu_603_p1, tmp_23_cast_fu_675_p1, tmp_24_cast_fu_693_p1, tmp_25_cast_fu_703_p1, tmp_26_cast_fu_743_p1, tmp_27_cast_fu_751_p1, tmp_28_cast_fu_755_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            in_r_address0 <= tmp_28_cast_fu_755_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            in_r_address0 <= tmp_27_cast_fu_751_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            in_r_address0 <= tmp_26_cast_fu_743_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_r_address0 <= tmp_25_cast_fu_703_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            in_r_address0 <= tmp_24_cast_fu_693_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            in_r_address0 <= tmp_23_cast_fu_675_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_r_address0 <= tmp_22_cast_fu_603_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_r_address0 <= tmp_21_cast_fu_586_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= tmp_20_cast_fu_572_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_r_address0 <= tmp_19_cast_fu_553_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_address0 <= tmp_18_cast1_fu_544_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_r_address0 <= tmp_17_cast_fu_535_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_r_address0 <= in_addr_5_reg_1065;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= in_addr_4_reg_1060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= in_addr_3_reg_1055;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= tmp_14_cast_fu_516_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address0 <= tmp_13_cast_fu_507_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= tmp_12_cast_fu_498_p1(16 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state29, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    krnl_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            krnl_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            krnl_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            krnl_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            krnl_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            krnl_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            krnl_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            krnl_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            krnl_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            krnl_address0 <= "XXXX";
        end if; 
    end process;


    krnl_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_address0_assign_proc : process(out_addr_reg_1070, tmp_18_cast1_reg_1137, out_addr_2_reg_1214, ap_CS_fsm_state18, ap_CS_fsm_state19, out_addr_3_reg_1406, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_address0 <= out_addr_3_reg_1406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_address0 <= out_addr_2_reg_1214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address0 <= tmp_18_cast1_reg_1137(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_address0 <= out_addr_reg_1070;
        else 
            out_r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33, sum_2_0_2_2_fu_644_p2, sum_2_1_2_2_fu_655_p2, sum_2_2_2_2_fu_712_p2, sum_2_3_2_2_fu_763_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_r_d0 <= sum_2_3_2_2_fu_763_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_d0 <= sum_2_2_2_2_fu_712_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_d0 <= sum_2_1_2_2_fu_655_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_d0 <= sum_2_0_2_2_fu_644_p2;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(tmp_s_reg_1075, tmp_2_6_reg_1200, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_lv1_1 = tmp_2_6_reg_1200) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_s_reg_1075 = ap_const_lv1_1)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_425_p2 <= std_logic_vector(unsigned(r1_reg_338) + unsigned(ap_const_lv8_1));
    sum_2_0_2_2_fu_644_p2 <= std_logic_vector(unsigned(tmp3_fu_640_p2) + unsigned(tmp_fu_636_p2));
    sum_2_1_2_2_fu_655_p2 <= std_logic_vector(unsigned(tmp7_reg_1350) + unsigned(tmp10_fu_651_p2));
    sum_2_2_2_2_fu_712_p2 <= std_logic_vector(unsigned(tmp14_reg_1392) + unsigned(tmp17_fu_708_p2));
    sum_2_3_2_2_fu_763_p2 <= std_logic_vector(unsigned(tmp21_reg_1494) + unsigned(tmp24_fu_759_p2));
    tmp10_fu_651_p2 <= std_logic_vector(signed(tmp11_reg_1355) + signed(tmp12_reg_1360));
    tmp14_fu_680_p2 <= std_logic_vector(signed(grp_fu_885_p3) + signed(grp_fu_891_p3));
    tmp17_fu_708_p2 <= std_logic_vector(signed(tmp18_reg_1444) + signed(tmp19_reg_1449));
    tmp21_fu_747_p2 <= std_logic_vector(signed(grp_fu_935_p3) + signed(grp_fu_942_p3));
    tmp24_fu_759_p2 <= std_logic_vector(signed(tmp25_reg_1499) + signed(tmp26_reg_1519));
    tmp3_fu_640_p2 <= std_logic_vector(signed(tmp5_reg_1335) + signed(tmp4_reg_1330));
    tmp7_fu_632_p2 <= std_logic_vector(signed(grp_fu_836_p3) + signed(grp_fu_843_p3));
    tmp_10_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_457_p2),32));
    tmp_10_fu_503_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(tmp_18_cast_cast_reg_1084));
    tmp_11_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_468_p2),32));
    tmp_11_fu_512_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(tmp_18_cast_cast_reg_1084));
    tmp_12_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_493_p2),32));
        tmp_12_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_373),16));

    tmp_13_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_503_p2),32));
    tmp_14_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_512_p2),32));
    tmp_14_fu_530_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(col_offset_0_2_cast_s_fu_527_p1));
    tmp_15_fu_540_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(col_offset_0_2_cast_s_reg_1121));
    tmp_16_fu_549_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(col_offset_0_2_cast_s_reg_1121));
    tmp_17_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_530_p2),32));
    tmp_17_fu_567_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(col_offset_1_2_cast_s_fu_564_p1));
    tmp_18_cast1_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_540_p2),32));
    tmp_18_cast_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1079),17));
    tmp_18_fu_582_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(col_offset_1_2_cast_s_reg_1189));
    tmp_19_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_549_p2),32));
    tmp_19_fu_599_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(col_offset_1_2_cast_s_reg_1189));
    tmp_1_fu_484_p2 <= std_logic_vector(unsigned(c_reg_349) + unsigned(ap_const_lv9_1FF));
    tmp_20_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_567_p2),32));
    tmp_20_fu_670_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(col_offset_2_2_cast_s_fu_667_p1));
        tmp_21_0_0_1_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_381),16));

        tmp_21_0_0_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_2_reg_1110),16));

        tmp_21_0_1_1_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_4_reg_1154),16));

        tmp_21_0_1_2_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_5_reg_1177),16));

        tmp_21_0_1_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_3_reg_1132),16));

        tmp_21_0_2_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_381),16));

        tmp_21_0_2_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_373),16));

        tmp_21_0_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(krnl_load_6_reg_1204),16));

    tmp_21_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_582_p2),32));
    tmp_21_fu_689_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(col_offset_2_2_cast_s_reg_1381));
    tmp_22_1_1_2_fu_849_p0 <= tmp_21_0_1_2_fu_622_p1(8 - 1 downto 0);
    tmp_22_1_1_fu_812_p0 <= tmp_21_0_1_fu_612_p1(8 - 1 downto 0);
    tmp_22_1_2_2_fu_854_p0 <= tmp_21_0_2_2_fu_628_p1(8 - 1 downto 0);
    tmp_22_1_fu_806_p0 <= tmp_12_fu_608_p1(8 - 1 downto 0);
    tmp_22_2_1_2_fu_897_p0 <= tmp_21_0_1_2_reg_1311(8 - 1 downto 0);
    tmp_22_2_1_fu_881_p0 <= tmp_21_0_1_reg_1261(8 - 1 downto 0);
    tmp_22_2_2_2_fu_902_p0 <= tmp_21_0_2_2_reg_1324(8 - 1 downto 0);
    tmp_22_2_fu_877_p0 <= tmp_12_reg_1255(8 - 1 downto 0);
    tmp_22_3_1_2_fu_931_p0 <= tmp_21_0_1_2_reg_1311(8 - 1 downto 0);
    tmp_22_3_1_fu_927_p0 <= tmp_21_0_1_reg_1261(8 - 1 downto 0);
    tmp_22_3_2_2_fu_954_p0 <= tmp_21_0_2_2_reg_1324(8 - 1 downto 0);
    tmp_22_3_fu_923_p0 <= tmp_12_reg_1255(8 - 1 downto 0);
    tmp_22_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_599_p2),32));
    tmp_22_fu_699_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(col_offset_2_2_cast_s_reg_1381));
    tmp_23_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_670_p2),32));
    tmp_23_fu_728_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(col_offset_3_2_cast_s_fu_724_p1));
    tmp_24_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_689_p2),32));
    tmp_24_fu_733_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(col_offset_3_2_cast_s_fu_724_p1));
    tmp_25_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_699_p2),32));
    tmp_25_fu_738_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(col_offset_3_2_cast_s_fu_724_p1));
    tmp_26_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1474),32));
    tmp_27_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1479),32));
    tmp_28_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1484),32));
    tmp_2_6_fu_577_p2 <= "1" when (unsigned(col_offset_1_2_reg_1171) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_2_fu_389_p3 <= (r1_reg_338 & ap_const_lv8_0);
    tmp_3_7_fu_684_p2 <= "1" when (unsigned(col_offset_2_2_reg_1375) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_3_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_389_p3),17));
    tmp_3_fu_457_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1017) + unsigned(c_cast_cast_fu_443_p1));
    tmp_4_fu_407_p2 <= std_logic_vector(unsigned(r1_reg_338) + unsigned(ap_const_lv8_FF));
    tmp_5_fu_413_p3 <= (tmp_4_fu_407_p2 & ap_const_lv8_0);
    tmp_6_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_413_p3),17));
    tmp_6_fu_468_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1045) + unsigned(c_cast_cast_fu_443_p1));
    tmp_7_fu_431_p3 <= (r_fu_425_p2 & ap_const_lv8_0);
    tmp_8_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_431_p3),17));
    tmp_8_fu_493_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(tmp_18_cast_cast_fu_490_p1));
    tmp_9_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_447_p2),32));
    tmp_9_fu_447_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1030) + unsigned(c_cast_cast_fu_443_p1));
    tmp_fu_636_p2 <= std_logic_vector(signed(tmp2_reg_1296) + signed(tmp1_reg_1291));
    tmp_s_fu_478_p2 <= "1" when (unsigned(c_reg_349) < unsigned(ap_const_lv9_FF)) else "0";
end behav;
