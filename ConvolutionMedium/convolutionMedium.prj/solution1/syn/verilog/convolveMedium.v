// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolveMedium,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=2839213,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=1,HLS_SYN_FF=562,HLS_SYN_LUT=464}" *)

module convolveMedium (
        ap_clk,
        ap_rst_n,
        s_axi_convm_AWVALID,
        s_axi_convm_AWREADY,
        s_axi_convm_AWADDR,
        s_axi_convm_WVALID,
        s_axi_convm_WREADY,
        s_axi_convm_WDATA,
        s_axi_convm_WSTRB,
        s_axi_convm_ARVALID,
        s_axi_convm_ARREADY,
        s_axi_convm_ARADDR,
        s_axi_convm_RVALID,
        s_axi_convm_RREADY,
        s_axi_convm_RDATA,
        s_axi_convm_RRESP,
        s_axi_convm_BVALID,
        s_axi_convm_BREADY,
        s_axi_convm_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_CONVM_DATA_WIDTH = 32;
parameter    C_S_AXI_CONVM_ADDR_WIDTH = 19;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONVM_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_convm_AWVALID;
output   s_axi_convm_AWREADY;
input  [C_S_AXI_CONVM_ADDR_WIDTH - 1:0] s_axi_convm_AWADDR;
input   s_axi_convm_WVALID;
output   s_axi_convm_WREADY;
input  [C_S_AXI_CONVM_DATA_WIDTH - 1:0] s_axi_convm_WDATA;
input  [C_S_AXI_CONVM_WSTRB_WIDTH - 1:0] s_axi_convm_WSTRB;
input   s_axi_convm_ARVALID;
output   s_axi_convm_ARREADY;
input  [C_S_AXI_CONVM_ADDR_WIDTH - 1:0] s_axi_convm_ARADDR;
output   s_axi_convm_RVALID;
input   s_axi_convm_RREADY;
output  [C_S_AXI_CONVM_DATA_WIDTH - 1:0] s_axi_convm_RDATA;
output  [1:0] s_axi_convm_RRESP;
output   s_axi_convm_BVALID;
input   s_axi_convm_BREADY;
output  [1:0] s_axi_convm_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] in_r_address0;
reg    in_r_ce0;
wire   [15:0] in_r_q0;
reg    out_r_ce0;
reg    out_r_we0;
reg    krnl_ce0;
wire   [7:0] krnl_q0;
reg   [15:0] out_addr_reg_326;
wire    ap_CS_fsm_state3;
wire   [7:0] r_fu_198_p2;
wire   [0:0] exitcond_fu_192_p2;
wire   [4:0] kc_cast3_cast_fu_204_p1;
reg   [4:0] kc_cast3_cast_reg_339;
wire    ap_CS_fsm_state4;
wire   [1:0] kc_1_fu_214_p2;
reg   [1:0] kc_1_reg_347;
wire   [7:0] col_offset_fu_230_p2;
reg   [7:0] col_offset_reg_352;
wire   [0:0] tmp_2_fu_208_p2;
wire   [7:0] c_1_fu_236_p2;
reg   [3:0] krnl_addr_reg_362;
wire    ap_CS_fsm_state5;
wire   [1:0] kr_1_fu_280_p2;
reg   [1:0] kr_1_reg_370;
wire   [7:0] sum1_fu_296_p2;
reg   [7:0] sum1_reg_375;
wire   [0:0] tmp_5_fu_274_p2;
wire    ap_CS_fsm_state6;
reg  signed [15:0] in_load_reg_385;
wire    ap_CS_fsm_state7;
reg  signed [7:0] krnl_load_reg_390;
wire  signed [15:0] grp_fu_316_p3;
wire    ap_CS_fsm_state8;
reg   [7:0] r1_reg_102;
reg   [7:0] c_reg_114;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond9_fu_173_p2;
reg   [15:0] sum_reg_126;
reg   [1:0] kc_reg_139;
reg   [15:0] sum_1_reg_150;
reg   [1:0] kr_reg_162;
wire   [31:0] tmp_6_fu_187_p1;
wire  signed [31:0] tmp_11_cast_fu_269_p1;
wire   [31:0] tmp_12_fu_308_p1;
wire   [15:0] tmp_4_fu_179_p3;
wire   [1:0] tmp_fu_220_p2;
wire  signed [7:0] tmp_cast_fu_226_p1;
wire   [3:0] tmp_9_fu_246_p3;
wire   [4:0] p_shl_cast_fu_254_p1;
wire   [4:0] kr_cast2_cast_fu_242_p1;
wire   [4:0] tmp_s_fu_258_p2;
wire   [4:0] tmp_10_fu_264_p2;
wire   [1:0] tmp1_fu_286_p2;
wire  signed [7:0] tmp1_cast_fu_292_p1;
wire   [15:0] tmp_11_fu_302_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

convolveMedium_convm_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONVM_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONVM_DATA_WIDTH ))
convolveMedium_convm_s_axi_U(
    .AWVALID(s_axi_convm_AWVALID),
    .AWREADY(s_axi_convm_AWREADY),
    .AWADDR(s_axi_convm_AWADDR),
    .WVALID(s_axi_convm_WVALID),
    .WREADY(s_axi_convm_WREADY),
    .WDATA(s_axi_convm_WDATA),
    .WSTRB(s_axi_convm_WSTRB),
    .ARVALID(s_axi_convm_ARVALID),
    .ARREADY(s_axi_convm_ARREADY),
    .ARADDR(s_axi_convm_ARADDR),
    .RVALID(s_axi_convm_RVALID),
    .RREADY(s_axi_convm_RREADY),
    .RDATA(s_axi_convm_RDATA),
    .RRESP(s_axi_convm_RRESP),
    .BVALID(s_axi_convm_BVALID),
    .BREADY(s_axi_convm_BREADY),
    .BRESP(s_axi_convm_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_r_address0(in_r_address0),
    .in_r_ce0(in_r_ce0),
    .in_r_q0(in_r_q0),
    .out_r_address0(out_addr_reg_326),
    .out_r_ce0(out_r_ce0),
    .out_r_we0(out_r_we0),
    .out_r_d0(sum_reg_126),
    .krnl_address0(krnl_addr_reg_362),
    .krnl_ce0(krnl_ce0),
    .krnl_q0(krnl_q0)
);

convolveMedium_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
convolveMedium_mabkb_U0(
    .din0(krnl_load_reg_390),
    .din1(in_load_reg_385),
    .din2(sum_1_reg_150),
    .dout(grp_fu_316_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond9_fu_173_p2))) begin
        c_reg_114 <= 8'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_fu_208_p2))) begin
        c_reg_114 <= c_1_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_5_fu_274_p2))) begin
        kc_reg_139 <= kc_1_reg_347;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_192_p2 == 1'd0))) begin
        kc_reg_139 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kr_reg_162 <= kr_1_reg_370;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_208_p2 == 1'd0))) begin
        kr_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_192_p2 == 1'd1))) begin
        r1_reg_102 <= r_fu_198_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r1_reg_102 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_1_reg_150 <= grp_fu_316_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_208_p2 == 1'd0))) begin
        sum_1_reg_150 <= sum_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_5_fu_274_p2))) begin
        sum_reg_126 <= sum_1_reg_150;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_192_p2 == 1'd0))) begin
        sum_reg_126 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_208_p2 == 1'd0))) begin
        col_offset_reg_352 <= col_offset_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_load_reg_385 <= in_r_q0;
        krnl_load_reg_390 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kc_1_reg_347 <= kc_1_fu_214_p2;
        kc_cast3_cast_reg_339[1 : 0] <= kc_cast3_cast_fu_204_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kr_1_reg_370 <= kr_1_fu_280_p2;
        krnl_addr_reg_362 <= tmp_11_cast_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_addr_reg_326 <= tmp_6_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_5_fu_274_p2))) begin
        sum1_reg_375 <= sum1_fu_296_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond9_fu_173_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond9_fu_173_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        krnl_ce0 = 1'b1;
    end else begin
        krnl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_fu_208_p2))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond9_fu_173_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_fu_208_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_5_fu_274_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_236_p2 = (c_reg_114 + 8'd1);

assign col_offset_fu_230_p2 = ($signed(tmp_cast_fu_226_p1) + $signed(c_reg_114));

assign exitcond9_fu_173_p2 = ((r1_reg_102 == 8'd255) ? 1'b1 : 1'b0);

assign exitcond_fu_192_p2 = ((c_reg_114 == 8'd255) ? 1'b1 : 1'b0);

assign in_r_address0 = tmp_12_fu_308_p1;

assign kc_1_fu_214_p2 = (kc_reg_139 + 2'd1);

assign kc_cast3_cast_fu_204_p1 = kc_reg_139;

assign kr_1_fu_280_p2 = (kr_reg_162 + 2'd1);

assign kr_cast2_cast_fu_242_p1 = kr_reg_162;

assign p_shl_cast_fu_254_p1 = tmp_9_fu_246_p3;

assign r_fu_198_p2 = (r1_reg_102 + 8'd1);

assign sum1_fu_296_p2 = ($signed(r1_reg_102) + $signed(tmp1_cast_fu_292_p1));

assign tmp1_cast_fu_292_p1 = $signed(tmp1_fu_286_p2);

assign tmp1_fu_286_p2 = ($signed(kr_reg_162) + $signed(2'd3));

assign tmp_10_fu_264_p2 = (tmp_s_fu_258_p2 + kc_cast3_cast_reg_339);

assign tmp_11_cast_fu_269_p1 = $signed(tmp_10_fu_264_p2);

assign tmp_11_fu_302_p3 = {{sum1_reg_375}, {col_offset_reg_352}};

assign tmp_12_fu_308_p1 = tmp_11_fu_302_p3;

assign tmp_2_fu_208_p2 = ((kc_reg_139 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_4_fu_179_p3 = {{r1_reg_102}, {c_reg_114}};

assign tmp_5_fu_274_p2 = ((kr_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_6_fu_187_p1 = tmp_4_fu_179_p3;

assign tmp_9_fu_246_p3 = {{kr_reg_162}, {2'd0}};

assign tmp_cast_fu_226_p1 = $signed(tmp_fu_220_p2);

assign tmp_fu_220_p2 = ($signed(kc_reg_139) + $signed(2'd3));

assign tmp_s_fu_258_p2 = (p_shl_cast_fu_254_p1 - kr_cast2_cast_fu_242_p1);

always @ (posedge ap_clk) begin
    kc_cast3_cast_reg_339[4:2] <= 3'b000;
end

endmodule //convolveMedium
