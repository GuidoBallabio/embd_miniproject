// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolveMedium_HH_
#define _convolveMedium_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "convolveMedium_mabkb.h"
#include "convolveMedium_convm_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONVM_ADDR_WIDTH = 19,
         unsigned int C_S_AXI_CONVM_DATA_WIDTH = 32>
struct convolveMedium : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_convm_AWVALID;
    sc_out< sc_logic > s_axi_convm_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONVM_ADDR_WIDTH> > s_axi_convm_AWADDR;
    sc_in< sc_logic > s_axi_convm_WVALID;
    sc_out< sc_logic > s_axi_convm_WREADY;
    sc_in< sc_uint<C_S_AXI_CONVM_DATA_WIDTH> > s_axi_convm_WDATA;
    sc_in< sc_uint<C_S_AXI_CONVM_DATA_WIDTH/8> > s_axi_convm_WSTRB;
    sc_in< sc_logic > s_axi_convm_ARVALID;
    sc_out< sc_logic > s_axi_convm_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONVM_ADDR_WIDTH> > s_axi_convm_ARADDR;
    sc_out< sc_logic > s_axi_convm_RVALID;
    sc_in< sc_logic > s_axi_convm_RREADY;
    sc_out< sc_uint<C_S_AXI_CONVM_DATA_WIDTH> > s_axi_convm_RDATA;
    sc_out< sc_lv<2> > s_axi_convm_RRESP;
    sc_out< sc_logic > s_axi_convm_BVALID;
    sc_in< sc_logic > s_axi_convm_BREADY;
    sc_out< sc_lv<2> > s_axi_convm_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    convolveMedium(sc_module_name name);
    SC_HAS_PROCESS(convolveMedium);

    ~convolveMedium();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    convolveMedium_convm_s_axi<C_S_AXI_CONVM_ADDR_WIDTH,C_S_AXI_CONVM_DATA_WIDTH>* convolveMedium_convm_s_axi_U;
    convolveMedium_mabkb<1,1,8,16,16,16>* convolveMedium_mabkb_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<16> > in_r_address0;
    sc_signal< sc_logic > in_r_ce0;
    sc_signal< sc_lv<16> > in_r_q0;
    sc_signal< sc_logic > out_r_ce0;
    sc_signal< sc_logic > out_r_we0;
    sc_signal< sc_logic > krnl_ce0;
    sc_signal< sc_lv<8> > krnl_q0;
    sc_signal< sc_lv<16> > out_addr_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > r_fu_198_p2;
    sc_signal< sc_lv<1> > exitcond_fu_192_p2;
    sc_signal< sc_lv<5> > kc_cast3_cast_fu_204_p1;
    sc_signal< sc_lv<5> > kc_cast3_cast_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<2> > kc_1_fu_214_p2;
    sc_signal< sc_lv<2> > kc_1_reg_347;
    sc_signal< sc_lv<8> > col_offset_fu_230_p2;
    sc_signal< sc_lv<8> > col_offset_reg_352;
    sc_signal< sc_lv<1> > tmp_2_fu_208_p2;
    sc_signal< sc_lv<8> > c_1_fu_236_p2;
    sc_signal< sc_lv<4> > krnl_addr_reg_362;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<2> > kr_1_fu_280_p2;
    sc_signal< sc_lv<2> > kr_1_reg_370;
    sc_signal< sc_lv<8> > sum1_fu_296_p2;
    sc_signal< sc_lv<8> > sum1_reg_375;
    sc_signal< sc_lv<1> > tmp_5_fu_274_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<16> > in_load_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > krnl_load_reg_390;
    sc_signal< sc_lv<16> > grp_fu_316_p3;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > r1_reg_102;
    sc_signal< sc_lv<8> > c_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond9_fu_173_p2;
    sc_signal< sc_lv<16> > sum_reg_126;
    sc_signal< sc_lv<2> > kc_reg_139;
    sc_signal< sc_lv<16> > sum_1_reg_150;
    sc_signal< sc_lv<2> > kr_reg_162;
    sc_signal< sc_lv<32> > tmp_6_fu_187_p1;
    sc_signal< sc_lv<32> > tmp_11_cast_fu_269_p1;
    sc_signal< sc_lv<32> > tmp_12_fu_308_p1;
    sc_signal< sc_lv<16> > tmp_4_fu_179_p3;
    sc_signal< sc_lv<2> > tmp_fu_220_p2;
    sc_signal< sc_lv<8> > tmp_cast_fu_226_p1;
    sc_signal< sc_lv<4> > tmp_9_fu_246_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_254_p1;
    sc_signal< sc_lv<5> > kr_cast2_cast_fu_242_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_258_p2;
    sc_signal< sc_lv<5> > tmp_10_fu_264_p2;
    sc_signal< sc_lv<2> > tmp1_fu_286_p2;
    sc_signal< sc_lv<8> > tmp1_cast_fu_292_p1;
    sc_signal< sc_lv<16> > tmp_11_fu_302_p3;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_c_1_fu_236_p2();
    void thread_col_offset_fu_230_p2();
    void thread_exitcond9_fu_173_p2();
    void thread_exitcond_fu_192_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_kc_1_fu_214_p2();
    void thread_kc_cast3_cast_fu_204_p1();
    void thread_kr_1_fu_280_p2();
    void thread_kr_cast2_cast_fu_242_p1();
    void thread_krnl_ce0();
    void thread_out_r_ce0();
    void thread_out_r_we0();
    void thread_p_shl_cast_fu_254_p1();
    void thread_r_fu_198_p2();
    void thread_sum1_fu_296_p2();
    void thread_tmp1_cast_fu_292_p1();
    void thread_tmp1_fu_286_p2();
    void thread_tmp_10_fu_264_p2();
    void thread_tmp_11_cast_fu_269_p1();
    void thread_tmp_11_fu_302_p3();
    void thread_tmp_12_fu_308_p1();
    void thread_tmp_2_fu_208_p2();
    void thread_tmp_4_fu_179_p3();
    void thread_tmp_5_fu_274_p2();
    void thread_tmp_6_fu_187_p1();
    void thread_tmp_9_fu_246_p3();
    void thread_tmp_cast_fu_226_p1();
    void thread_tmp_fu_220_p2();
    void thread_tmp_s_fu_258_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
