-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    krnl_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    krnl_ce0 : OUT STD_LOGIC;
    krnl_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.442000,HLS_SYN_LAT=13290805,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1861,HLS_SYN_LUT=2417}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_addr_reg_463 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_cast5_cast_fu_226_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_cast5_cast_reg_476 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kc_1_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_1_reg_484 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal krnl_addr_reg_499 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kr_1_fu_302_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kr_1_reg_507 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum1_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum1_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_load_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal krnl_load_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_reg_557 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal loc_V_1_fu_358_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_563 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sh_assign_1_fu_388_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_573 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_4_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal r1_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond9_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal kc_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal kr_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_201_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_cast_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_268_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_276_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kr_cast4_cast_fu_264_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_308_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast2_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_i_i_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_i_i_cast_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_i_fu_396_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_412_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_i_i_i_cast3_fu_405_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_3_i_i_i_fu_415_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_4_i_i_i_fu_419_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_20_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_fu_425_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_16_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_443_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component convolve_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_uitofp_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolve_fadd_32nbkb_U0 : component convolve_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_552,
        din1 => tmp_5_reg_547,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    convolve_fmul_32ncud_U1 : component convolve_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_537,
        din1 => krnl_load_reg_542,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    convolve_uitofp_3dEe_U2 : component convolve_uitofp_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p1);

    convolve_sitofp_3eOg_U3 : component convolve_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond9_fu_195_p2))) then 
                c_reg_122 <= ap_const_lv8_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_7_fu_230_p2))) then 
                c_reg_122 <= c_1_fu_258_p2;
            end if; 
        end if;
    end process;

    kc_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_9_fu_296_p2))) then 
                kc_reg_147 <= kc_1_reg_484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_214_p2 = ap_const_lv1_0))) then 
                kc_reg_147 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    kr_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                kr_reg_170 <= kr_1_reg_507;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_230_p2 = ap_const_lv1_0))) then 
                kr_reg_170 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r1_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_214_p2 = ap_const_lv1_1))) then 
                r1_reg_110 <= r_fu_220_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_110 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    sum_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                sum_1_reg_158 <= p_Val2_4_fu_453_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_230_p2 = ap_const_lv1_0))) then 
                sum_1_reg_158 <= sum_reg_134;
            end if; 
        end if;
    end process;

    sum_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_9_fu_296_p2))) then 
                sum_reg_134 <= sum_1_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_214_p2 = ap_const_lv1_0))) then 
                sum_reg_134 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_230_p2 = ap_const_lv1_0))) then
                col_offset_reg_489 <= col_offset_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_load_reg_522 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                isNeg_reg_568 <= sh_assign_fu_365_p2(8 downto 8);
                sh_assign_1_reg_573 <= sh_assign_1_fu_388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kc_1_reg_484 <= kc_1_fu_236_p2;
                    kc_cast5_cast_reg_476(1 downto 0) <= kc_cast5_cast_fu_226_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kr_1_reg_507 <= kr_1_fu_302_p2;
                krnl_addr_reg_499 <= tmp_13_cast_fu_291_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                krnl_load_reg_542 <= krnl_q0;
                tmp_4_reg_537 <= grp_fu_192_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                loc_V_1_reg_563 <= loc_V_1_fu_358_p1;
                loc_V_reg_557 <= p_Val2_s_fu_344_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_addr_reg_463 <= tmp_s_fu_209_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_9_fu_296_p2))) then
                sum1_reg_512 <= sum1_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_5_reg_547 <= grp_fu_185_p2;
                tmp_6_reg_552 <= grp_fu_189_p1;
            end if;
        end if;
    end process;
    kc_cast5_cast_reg_476(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_214_p2, ap_CS_fsm_state4, tmp_7_fu_230_p2, ap_CS_fsm_state5, tmp_9_fu_296_p2, ap_CS_fsm_state2, exitcond9_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond9_fu_195_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_214_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_7_fu_230_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_9_fu_296_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond9_fu_195_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond9_fu_195_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_258_p2 <= std_logic_vector(unsigned(c_reg_122) + unsigned(ap_const_lv8_1));
    col_offset_fu_252_p2 <= std_logic_vector(signed(tmp_cast_fu_248_p1) + signed(c_reg_122));
    exitcond9_fu_195_p2 <= "1" when (r1_reg_110 = ap_const_lv8_FF) else "0";
    exitcond_fu_214_p2 <= "1" when (c_reg_122 = ap_const_lv8_FF) else "0";
    grp_fu_189_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_reg_158),32));
    grp_fu_192_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_load_reg_522),32));
    in_r_address0 <= tmp_14_fu_330_p1(16 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_371_p3 <= sh_assign_fu_365_p2(8 downto 8);
    kc_1_fu_236_p2 <= std_logic_vector(unsigned(kc_reg_147) + unsigned(ap_const_lv2_1));
    kc_cast5_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_147),5));
    kr_1_fu_302_p2 <= std_logic_vector(unsigned(kr_reg_170) + unsigned(ap_const_lv2_1));
    kr_cast4_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_170),5));
    krnl_address0 <= krnl_addr_reg_499;

    krnl_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_358_p1 <= p_Val2_s_fu_344_p1(23 - 1 downto 0);
    out_r_address0 <= out_addr_reg_463;

    out_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= sum_reg_134;

    out_r_we0_assign_proc : process(ap_CS_fsm_state4, tmp_7_fu_230_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_7_fu_230_p2))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_4_fu_453_p3 <= 
        tmp_16_fu_439_p1 when (isNeg_reg_568(0) = '1') else 
        tmp_17_fu_443_p4;
    p_Val2_s_fu_344_p1 <= grp_fu_181_p2;
    p_shl_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_268_p3),5));
    r_fu_220_p2 <= std_logic_vector(unsigned(r1_reg_110) + unsigned(ap_const_lv8_1));
        sh_assign_1_cast_cas_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_573),25));

        sh_assign_1_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_573),32));

    sh_assign_1_fu_388_p3 <= 
        tmp_2_i_i_i_cast_fu_384_p1 when (isNeg_fu_371_p3(0) = '1') else 
        sh_assign_fu_365_p2;
    sh_assign_fu_365_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast2_fu_362_p1));
    sum1_fu_318_p2 <= std_logic_vector(signed(tmp1_cast_fu_314_p1) + signed(r1_reg_110));
        tmp1_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_308_p2),8));

    tmp1_fu_308_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(kr_reg_170));
    tmp_10_fu_268_p3 <= (kr_reg_170 & ap_const_lv2_0);
    tmp_11_fu_280_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_276_p1) - unsigned(kr_cast4_cast_fu_264_p1));
    tmp_12_fu_286_p2 <= std_logic_vector(unsigned(tmp_11_fu_280_p2) + unsigned(kc_cast5_cast_reg_476));
        tmp_13_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_286_p2),32));

    tmp_13_fu_324_p3 <= (sum1_reg_512 & col_offset_reg_489);
    tmp_14_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_324_p3),32));
    tmp_16_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_431_p3),8));
    tmp_17_fu_443_p4 <= tmp_5_i_i_i_fu_425_p2(31 downto 24);
    tmp_1_i_i_i_cast3_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_i_i_fu_396_p4),55));
    tmp_1_i_i_i_fu_396_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_563) & ap_const_lv1_0);
    tmp_20_fu_431_p3 <= tmp_4_i_i_i_fu_419_p2(24 downto 24);
        tmp_2_i_i_i_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_i_i_fu_379_p2),9));

    tmp_2_i_i_i_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_557));
    tmp_3_i_i_i_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_409_p1),55));
    tmp_4_i_i_i_fu_419_p2 <= std_logic_vector(shift_right(unsigned(tmp_1_i_i_i_fu_396_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_412_p1(25-1 downto 0)))));
    tmp_5_i_i_i_fu_425_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_i_i_i_cast3_fu_405_p1),to_integer(unsigned('0' & tmp_3_i_i_i_fu_415_p1(31-1 downto 0)))));
    tmp_7_fu_230_p2 <= "1" when (kc_reg_147 = ap_const_lv2_3) else "0";
    tmp_8_fu_201_p3 <= (r1_reg_110 & c_reg_122);
    tmp_9_fu_296_p2 <= "1" when (kr_reg_170 = ap_const_lv2_3) else "0";
        tmp_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_242_p2),8));

    tmp_fu_242_p2 <= std_logic_vector(unsigned(kc_reg_147) + unsigned(ap_const_lv2_3));
    tmp_i_i_i_i_cast2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_557),9));
    tmp_s_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_201_p3),32));
end behav;
