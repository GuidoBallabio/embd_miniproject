#include <iostream>
#include "system/EmbeddedSystemX.h"
#include "system/Services.h"
#include "system/VideoSystem/VideoProcessingSystem.h"

// constant values
constexpr T_size img_rows = 50;
constexpr T_size img_cols = 50;
constexpr T_size kernel_size = 3;
constexpr int8_t f = 9;
constexpr T_size acc_rows = (img_rows + img_cols) * 2;
constexpr T_size acc_cols = 180;

// type defs
typedef int16_t T_data;
typedef int8_t T_kernel;
typedef float T_accumulator;

// images
Image<T_data, img_rows, img_cols> in;
Image<T_data, img_rows, img_cols> buffer;
Image<T_data, img_rows, img_cols> out;
// kernels for blur and edge detection
Image<T_kernel, kernel_size, kernel_size> blur_kernel = { f,f,f,f,f,f,f,f,f };
Image<T_kernel, kernel_size, kernel_size> sobel_kernel = { 2,2,0,2,0,-2,0,-2,-2 };
// arrays for hough transform
Image<T_accumulator, acc_rows, acc_cols> accumulator = { 0 };
float dNonZero[img_cols * img_rows] = { 0 };
float fiNonZero[img_cols * img_rows] = { 0 };


void quit() { std::cout << "Quitting..." << std::endl; }

// start : Defines the entry point for the console application.
void start() {
  IStateFactory<T_data, T_kernel, img_rows, img_cols, kernel_size, kernel_size> *stateFactorySingleton =
		  new StateFactorySingleton<T_data, T_kernel, img_rows, img_cols, kernel_size, kernel_size>();
  IVPS<T_data, T_kernel, img_rows, img_cols, kernel_size, kernel_size> *vps =
		  new VideoProcessingSystem<T_data, T_kernel, img_rows, img_cols, kernel_size, kernel_size>();
  EmbeddedSystemX *emb = new EmbeddedSystemX(stateFactorySingleton, vps);

  //ManualStateTestService(emb);
  GetHWInputService(emb);
}

int main(int, char**)
{
	 start();
	 quit();

	return 0;
}
