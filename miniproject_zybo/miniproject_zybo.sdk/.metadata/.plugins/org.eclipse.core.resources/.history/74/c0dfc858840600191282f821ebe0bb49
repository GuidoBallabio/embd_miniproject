#pragma once

#include "../system/IContext.h"
#include "../GPIOs/Leds.h"
#include <iostream>

template<typename T_img, typename T_kernel, T_size i_rows, size_t i_cols, size_t k_rows, size_t k_cols>
class State {
public:
  State(IContext<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols> *context) : context(context){};
  virtual ~State(){};

  virtual std::string Name() const = 0;
  virtual int Number() const = 0;

  // State machine functions
  virtual void Finished(){};
  virtual void ChangeMode(){};
  virtual void Run(){};
  virtual void Quit(){};

  virtual void entry() {
    std::cout << "In " << this->Name() << " state! " << std::endl;
    Leds::getInstance()->setValue(this->Number());
  }

  virtual void exit() {}

protected:
  IContext*<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols> context;
};
