#include "EmbeddedSystemX.h"
#include "../GPIOs/Leds.h"
#include <string>
#include "VideoSystem/VideoProcessingSystem.h"

EmbeddedSystemX::EmbeddedSystemX(IStateFactory* stateFactory, IVPS* vps)
{
	_stateFactory = stateFactory;
	_state = _stateFactory->IdleInstance(this);
	_vps = vps;
	_leds.setValue(0);
}

EmbeddedSystemX::~EmbeddedSystemX()
{
	delete _state;
	delete _vps;
}

void EmbeddedSystemX::ChangeState(StateTypes state)
{
	_state->Exit();

	switch (state) {
	  case StateTypes::s_On:
	    std::cout << "Changing state from " << _state->Name()
	              << " to On\n";
	    _stateType = StateTypes::s_On;
	    _state = _stateFactory->OnInstance(this);
	    break;
	  case StateTypes::s_Idle:
	    std::cout << "Changing state from " << _state->Name()
	              << " to Idle\n";
	    _stateType = StateTypes::s_Idle;
	    _state = _stateFactory->IdleInstance(this);
	    break;
	  case StateTypes::s_SWMode:
	    std::cout << "Changing state from " << _state->Name() << " to SWMode\n";
	    _stateType = StateTypes::s_SWMode;
	    _state = _stateFactory->SWModeInstance(this);
	    break;
	  case StateTypes::s_HWMode:
	    std::cout << "Changing state from " << _state->Name()
	              << " to HWMode\n";
	    _stateType = StateTypes::s_HWMode;
	    _state = _stateFactory->HWModeInstance(this);
	    break;
	  case StateTypes::s_Running:
	    std::cout << "Changing state from " << _state->Name()
	              << " to Running\n";
	    _stateType = StateTypes::s_Running;
	    _state = _stateFactory->RunningInstance(this);
	    break;
	  case StateTypes::s_Off:
	    std::cout << "Changing state from " << _state->Name() << " to Off\n";
	    _stateType = StateTypes::s_Off;
	    _state = _stateFactory->OffInstance(this);
	    break;
	  default:
	    std::cout << "Default, no state is selected :(" << std::endl;
	    break;
	  }

	  // Call the entry function on the new state
	  _state->Entry();
}

StateTypes EmbeddedSystemX::GetState()
{
	return _stateType;
}

IVPS* EmbeddedSystemX::GetVPS()
{
	return _vps;
}

void EmbeddedSystemX::run()
{
	std::cout << "Called Run at state " << _state->Name() << std::endl;
	_state->run();
}

void EmbeddedSystemX::switchHWorSWmode()
{
	std::cout << "Called switchHWorSWMode at state " << _state->Name() << std::endl;
	_state->switchHWorSWmode();
}

void EmbeddedSystemX::quit()
{
	std::cout << "Called quit at state " << _state->Name() << std::endl;
	_state->quit();
}
