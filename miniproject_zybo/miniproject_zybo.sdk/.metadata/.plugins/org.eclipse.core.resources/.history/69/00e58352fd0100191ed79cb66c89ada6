#pragma once
#include "../types.h"
#include "xconvolve.h"

class ConvolutionHW
{
public:

	ConvolutionHW()
	{
		instancePtr = &_convolve;
		XConvolve_Initialize(instancePtr, XPAR_CONVOLVE_0_DEVICE_ID);


	}

	int Initialize()
	{
		configPtr = XConvolve_LookupConfig(XPAR_CONVOLVE_0_DEVICE_ID);
		int status = XConvolve_CfgInitialize(instancePtr, configPtr, configPtr->Conv_BaseAddress);
		if (status != XST_SUCCESS)
			xil_printf("Convolution HW instantiation failed :( \r\n");

		return status;
	}

	template<typename T_img, typename T_kernel, size_t i_rows, size_t i_cols, size_t k_rows, size_t k_cols >
	void convolve(T_img in[i_rows][i_cols], T_img out[i_rows][i_cols], T_kernel kernel[k_rows][k_cols])
	{
		T_size offset = 0;
		T_size i_length = i_rows*i_cols;
		T_size k_length = k_rows*k_cols;
		XConvolve_Write_in_r_Bytes(instancePtr, offset, in, i_length);
		XConvolve_Write_out_r_Bytes(instancePtr, offset, out, i_length);
		XConvolve_Write_krnl_Bytes(instancePtr, offset, kernel, k_length);

		XConvolve_Start(instancePtr);
		while(!XConvolve_IsDone(instancePtr));
		Xil_Out16(XPAR_CONVOLVE_0_S_AXI_CONV_BASEADDR + XCONVOLVE_CONV_ADDR_OUT_R_BASE, in);
		out = XConvolve_Read_out_r_Bytes(instancePtr, offset, out, i_length);
	}

private:
	XConvolve _convolve;
	XConvolve* instancePtr;
	XConvolve_Config* configPtr;
};
