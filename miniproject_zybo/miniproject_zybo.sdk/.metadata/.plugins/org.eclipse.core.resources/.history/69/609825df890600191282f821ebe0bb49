#pragma once

#include "Idle.h"

template<typename T_img, typename T_kernel, T_size i_rows, size_t i_cols, size_t k_rows, size_t k_cols>
class HWMode : public Idle<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols> {
public:
  using Idle<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols>::Idle;

  virtual void ChangeMode() override {
    this->context->ChangeState(StateTypes::s_SWMode);
  }

  virtual void entry() override{
	State<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols>::entry();
	this->context->GetVPS()->setHW();
  }

  virtual std::string Name() const override { return "HWMode"; }

  virtual int Number() const override { return 4; }

private:
};
