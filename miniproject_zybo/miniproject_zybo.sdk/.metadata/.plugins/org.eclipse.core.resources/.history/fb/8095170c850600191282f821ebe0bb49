#pragma once

#include "State.h"

template<typename T_img, typename T_kernel, T_size i_rows, size_t i_cols, size_t k_rows, size_t k_cols>
class On : public State<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols> {
public:
  using State<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols>::State;

  virtual void Quit() override {
    context->ChangeState(StateTypes::s_Off);
  }

  virtual void entry() override {
	  State<T_img, T_kernel, i_rows, i_cols, k_rows, k_cols>::entry();
	  <T_img, T_kernel, i_rows, i_cols, k_rows, k_cols>context->ChangeState(StateTypes::s_Idle);
  }

  virtual std::string Name() const override { return "On"; }

  virtual int Number() const override { return 1; }

private:
};
