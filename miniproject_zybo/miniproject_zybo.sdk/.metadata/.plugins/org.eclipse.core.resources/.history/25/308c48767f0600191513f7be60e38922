#pragma once

#include <iostream>
#include <vector>

#include "EmbeddedSystemX.h"
#include "../GPIOs/Buttons.h"
#include "../GPIOs/Switches.h"
#include "sleep.h"

#define BTN4 3
#define BTN3 2
#define BTN2 1
#define BTN1 0

void ManualStateTestService(EmbeddedSystemX *emb) {
  emb->ChangeMode();
  emb->ChangeMode();
  emb->ChangeMode();
//  emb->setBlur(false);
//  emb->setEdgeDetection(true);
//  emb->setHoughTransform(true);
//  emb->setThreshold(false);
  emb->Run();
  emb->ChangeMode();
  emb->ChangeMode();
//  emb->setBlur(true);
//  emb->setEdgeDetection(true);
//  emb->setHoughTransform(true);
//  emb->setThreshold(false);
  emb->Run();
  emb->Quit();

  std::cout << '\n' << "Press a key to continue...\n";
  std::cin.get();
}

void DisplayChoices() {
  std::cout
  	  << "Use BTN3 to switch between Hardware and Software modes" << std::endl
      << "Use the switches to set which filters to use:" << std::endl
      << "\t" << "1 for Blur" << std::endl
	  << "\t" << "2 for Edge detection" << std::endl
	  << "\t" << "3 for Hough transformation" << std::endl
	  << "\t" << "4 for Threshold" << std::endl
      << "Once decided run with BTN4 (leftmost) or Stop with BTN1(rightmost)" << std::endl
  	  << std::endl;
}

void GetHWInputService(EmbeddedSystemX* emb){
	DisplayChoices();

	Buttons *buttons = Buttons::getInstance();

	std::vector<bool> inputButtons;

	do {
		inputButtons = buttons->getActiveInputs();

		if (inputButtons[BTN3])
			emb->ChangeMode();

		if (inputButtons[BTN4]){
			emb->Run();
			emb->Finished();
		}

		usleep(150000);
	} while(!inputButtons[BTN1]);

	emb->Quit();
}

