/*
 * \class HWInterrupt
 * \brief This class is used for creating hardware interrupts using GPIOs on the Zybo board.
 * \note The main content of the code used in this class is taken from an example project in
 * exercise 2 in the tutorial at http://www.zynqbook.com/download-tuts.html
 * \author Daniella Tola
 * \date 20/12/2018
 */
#pragma once
#include "xscugic.h"
#include "xil_exception.h"

class HWInterrupt
{
public:
	HWInterrupt(XGpio gpio, u32 mask)
	{
		_gpio = gpio;
		// Enable interrupt
		XGpio_InterruptEnable(&_gpio, mask);
		XGpio_InterruptGlobalEnable(&_gpio);

		Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
									 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
									 &_interrupt);
		Xil_ExceptionEnable();
	}

	void initialize(u16 DeviceId)
	{
		XScuGic_Config *IntcConfig;
		int status;

		// Interrupt controller initialisation
		IntcConfig = XScuGic_LookupConfig(DeviceId);
		status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
		if(status != XST_SUCCESS) return XST_FAILURE;

		// Call to interrupt setup
		status = InterruptSystemSetup(&INTCInst);
		if(status != XST_SUCCESS) return XST_FAILURE;

		// Connect GPIO interrupt to handler
		status = XScuGic_Connect(&INTCInst,
								 INTC_GPIO_INTERRUPT_ID,
								 (Xil_ExceptionHandler)BTN_Intr_Handler,
								 (void *)GpioInstancePtr);
		if(status != XST_SUCCESS) return XST_FAILURE;

		// Enable GPIO interrupts interrupt
		XGpio_InterruptEnable(GpioInstancePtr, 1);
		XGpio_InterruptGlobalEnable(GpioInstancePtr);

		// Enable GPIO and timer interrupts in the controller
		XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);
	}

private:
	XScuGic _interrupt;
	XGpio _gpio;
};
