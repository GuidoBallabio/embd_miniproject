// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCONVOLVEMEDIUM_H
#define XCONVOLVEMEDIUM_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xconvolvemedium_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Convm_BaseAddress;
} XConvolvemedium_Config;
#endif

typedef struct {
    u32 Convm_BaseAddress;
    u32 IsReady;
} XConvolvemedium;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XConvolvemedium_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XConvolvemedium_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XConvolvemedium_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XConvolvemedium_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XConvolvemedium_Initialize(XConvolvemedium *InstancePtr, u16 DeviceId);
XConvolvemedium_Config* XConvolvemedium_LookupConfig(u16 DeviceId);
int XConvolvemedium_CfgInitialize(XConvolvemedium *InstancePtr, XConvolvemedium_Config *ConfigPtr);
#else
int XConvolvemedium_Initialize(XConvolvemedium *InstancePtr, const char* InstanceName);
int XConvolvemedium_Release(XConvolvemedium *InstancePtr);
#endif

void XConvolvemedium_Start(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_IsDone(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_IsIdle(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_IsReady(XConvolvemedium *InstancePtr);
void XConvolvemedium_EnableAutoRestart(XConvolvemedium *InstancePtr);
void XConvolvemedium_DisableAutoRestart(XConvolvemedium *InstancePtr);

u32 XConvolvemedium_Get_in_r_BaseAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_in_r_HighAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_in_r_TotalBytes(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_in_r_BitWidth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_in_r_Depth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Write_in_r_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Read_in_r_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Write_in_r_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);
u32 XConvolvemedium_Read_in_r_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);
u32 XConvolvemedium_Get_out_r_BaseAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_out_r_HighAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_out_r_TotalBytes(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_out_r_BitWidth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_out_r_Depth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Write_out_r_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Read_out_r_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Write_out_r_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);
u32 XConvolvemedium_Read_out_r_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);
u32 XConvolvemedium_Get_krnl_BaseAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_krnl_HighAddress(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_krnl_TotalBytes(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_krnl_BitWidth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Get_krnl_Depth(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_Write_krnl_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Read_krnl_Words(XConvolvemedium *InstancePtr, int offset, int *data, int length);
u32 XConvolvemedium_Write_krnl_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);
u32 XConvolvemedium_Read_krnl_Bytes(XConvolvemedium *InstancePtr, int offset, char *data, int length);

void XConvolvemedium_InterruptGlobalEnable(XConvolvemedium *InstancePtr);
void XConvolvemedium_InterruptGlobalDisable(XConvolvemedium *InstancePtr);
void XConvolvemedium_InterruptEnable(XConvolvemedium *InstancePtr, u32 Mask);
void XConvolvemedium_InterruptDisable(XConvolvemedium *InstancePtr, u32 Mask);
void XConvolvemedium_InterruptClear(XConvolvemedium *InstancePtr, u32 Mask);
u32 XConvolvemedium_InterruptGetEnabled(XConvolvemedium *InstancePtr);
u32 XConvolvemedium_InterruptGetStatus(XConvolvemedium *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
