// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolve.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolve::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> convolve::ap_ST_fsm_state1 = "1";
const sc_lv<28> convolve::ap_ST_fsm_state2 = "10";
const sc_lv<28> convolve::ap_ST_fsm_state3 = "100";
const sc_lv<28> convolve::ap_ST_fsm_state4 = "1000";
const sc_lv<28> convolve::ap_ST_fsm_state5 = "10000";
const sc_lv<28> convolve::ap_ST_fsm_state6 = "100000";
const sc_lv<28> convolve::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> convolve::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> convolve::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> convolve::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> convolve::ap_ST_fsm_state11 = "10000000000";
const sc_lv<28> convolve::ap_ST_fsm_state12 = "100000000000";
const sc_lv<28> convolve::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<28> convolve::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> convolve::ap_const_lv32_0 = "00000000000000000000000000000000";
const int convolve::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> convolve::ap_const_lv32_D = "1101";
const sc_lv<32> convolve::ap_const_lv32_11 = "10001";
const sc_lv<32> convolve::ap_const_lv32_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_2 = "10";
const sc_lv<32> convolve::ap_const_lv32_3 = "11";
const sc_lv<1> convolve::ap_const_lv1_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_4 = "100";
const sc_lv<1> convolve::ap_const_lv1_0 = "0";
const sc_lv<32> convolve::ap_const_lv32_5 = "101";
const sc_lv<32> convolve::ap_const_lv32_6 = "110";
const sc_lv<32> convolve::ap_const_lv32_7 = "111";
const sc_lv<32> convolve::ap_const_lv32_8 = "1000";
const sc_lv<32> convolve::ap_const_lv32_C = "1100";
const sc_lv<32> convolve::ap_const_lv32_18 = "11000";
const sc_lv<32> convolve::ap_const_lv32_19 = "11001";
const sc_lv<32> convolve::ap_const_lv32_1A = "11010";
const sc_lv<32> convolve::ap_const_lv32_1B = "11011";
const sc_lv<6> convolve::ap_const_lv6_1 = "1";
const sc_lv<16> convolve::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> convolve::ap_const_lv2_0 = "00";
const sc_lv<32> convolve::ap_const_lv32_12 = "10010";
const sc_lv<32> convolve::ap_const_lv32_E = "1110";
const sc_lv<12> convolve::ap_const_lv12_32 = "110010";
const sc_lv<6> convolve::ap_const_lv6_31 = "110001";
const sc_lv<2> convolve::ap_const_lv2_3 = "11";
const sc_lv<2> convolve::ap_const_lv2_1 = "1";
const sc_lv<32> convolve::ap_const_lv32_1F = "11111";
const sc_lv<32> convolve::ap_const_lv32_17 = "10111";
const sc_lv<32> convolve::ap_const_lv32_1E = "11110";
const sc_lv<9> convolve::ap_const_lv9_181 = "110000001";
const sc_lv<8> convolve::ap_const_lv8_7F = "1111111";
const sc_lv<32> convolve::ap_const_lv32_26 = "100110";
const bool convolve::ap_const_boolean_1 = true;

convolve::convolve(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolve_conv_s_axi_U = new convolve_conv_s_axi<C_S_AXI_CONV_ADDR_WIDTH,C_S_AXI_CONV_DATA_WIDTH>("convolve_conv_s_axi_U");
    convolve_conv_s_axi_U->AWVALID(s_axi_conv_AWVALID);
    convolve_conv_s_axi_U->AWREADY(s_axi_conv_AWREADY);
    convolve_conv_s_axi_U->AWADDR(s_axi_conv_AWADDR);
    convolve_conv_s_axi_U->WVALID(s_axi_conv_WVALID);
    convolve_conv_s_axi_U->WREADY(s_axi_conv_WREADY);
    convolve_conv_s_axi_U->WDATA(s_axi_conv_WDATA);
    convolve_conv_s_axi_U->WSTRB(s_axi_conv_WSTRB);
    convolve_conv_s_axi_U->ARVALID(s_axi_conv_ARVALID);
    convolve_conv_s_axi_U->ARREADY(s_axi_conv_ARREADY);
    convolve_conv_s_axi_U->ARADDR(s_axi_conv_ARADDR);
    convolve_conv_s_axi_U->RVALID(s_axi_conv_RVALID);
    convolve_conv_s_axi_U->RREADY(s_axi_conv_RREADY);
    convolve_conv_s_axi_U->RDATA(s_axi_conv_RDATA);
    convolve_conv_s_axi_U->RRESP(s_axi_conv_RRESP);
    convolve_conv_s_axi_U->BVALID(s_axi_conv_BVALID);
    convolve_conv_s_axi_U->BREADY(s_axi_conv_BREADY);
    convolve_conv_s_axi_U->BRESP(s_axi_conv_BRESP);
    convolve_conv_s_axi_U->ACLK(ap_clk);
    convolve_conv_s_axi_U->ARESET(ap_rst_n_inv);
    convolve_conv_s_axi_U->ACLK_EN(ap_var_for_const0);
    convolve_conv_s_axi_U->ap_start(ap_start);
    convolve_conv_s_axi_U->interrupt(interrupt);
    convolve_conv_s_axi_U->ap_ready(ap_ready);
    convolve_conv_s_axi_U->ap_done(ap_done);
    convolve_conv_s_axi_U->ap_idle(ap_idle);
    convolve_conv_s_axi_U->in_r_address0(in_r_address0);
    convolve_conv_s_axi_U->in_r_ce0(in_r_ce0);
    convolve_conv_s_axi_U->in_r_q0(in_r_q0);
    convolve_conv_s_axi_U->out_r_address0(out_addr_reg_524);
    convolve_conv_s_axi_U->out_r_ce0(out_r_ce0);
    convolve_conv_s_axi_U->out_r_we0(out_r_we0);
    convolve_conv_s_axi_U->out_r_d0(sum_reg_146);
    convolve_conv_s_axi_U->krnl_address0(krnl_addr_reg_560);
    convolve_conv_s_axi_U->krnl_ce0(krnl_ce0);
    convolve_conv_s_axi_U->krnl_q0(krnl_q0);
    convolve_fadd_32nbkb_U0 = new convolve_fadd_32nbkb<1,7,32,32,32>("convolve_fadd_32nbkb_U0");
    convolve_fadd_32nbkb_U0->clk(ap_clk);
    convolve_fadd_32nbkb_U0->reset(ap_rst_n_inv);
    convolve_fadd_32nbkb_U0->din0(reg_204);
    convolve_fadd_32nbkb_U0->din1(tmp_5_reg_603);
    convolve_fadd_32nbkb_U0->ce(ap_var_for_const0);
    convolve_fadd_32nbkb_U0->dout(grp_fu_193_p2);
    convolve_fmul_32ncud_U1 = new convolve_fmul_32ncud<1,4,32,32,32>("convolve_fmul_32ncud_U1");
    convolve_fmul_32ncud_U1->clk(ap_clk);
    convolve_fmul_32ncud_U1->reset(ap_rst_n_inv);
    convolve_fmul_32ncud_U1->din0(reg_204);
    convolve_fmul_32ncud_U1->din1(krnl_load_reg_598);
    convolve_fmul_32ncud_U1->ce(ap_var_for_const0);
    convolve_fmul_32ncud_U1->dout(grp_fu_197_p2);
    convolve_sitofp_3dEe_U2 = new convolve_sitofp_3dEe<1,6,32,32>("convolve_sitofp_3dEe_U2");
    convolve_sitofp_3dEe_U2->clk(ap_clk);
    convolve_sitofp_3dEe_U2->reset(ap_rst_n_inv);
    convolve_sitofp_3dEe_U2->din0(grp_fu_201_p0);
    convolve_sitofp_3dEe_U2->ce(ap_var_for_const0);
    convolve_sitofp_3dEe_U2->dout(grp_fu_201_p1);
    convolve_mul_6ns_eOg_U3 = new convolve_mul_6ns_eOg<1,2,6,7,12>("convolve_mul_6ns_eOg_U3");
    convolve_mul_6ns_eOg_U3->clk(ap_clk);
    convolve_mul_6ns_eOg_U3->reset(ap_rst_n_inv);
    convolve_mul_6ns_eOg_U3->din0(grp_fu_214_p0);
    convolve_mul_6ns_eOg_U3->din1(grp_fu_214_p1);
    convolve_mul_6ns_eOg_U3->ce(ap_var_for_const0);
    convolve_mul_6ns_eOg_U3->dout(grp_fu_214_p2);
    convolve_ama_addmfYi_U4 = new convolve_ama_addmfYi<1,1,6,2,7,6,12>("convolve_ama_addmfYi_U4");
    convolve_ama_addmfYi_U4->din0(r1_reg_122);
    convolve_ama_addmfYi_U4->din1(tmp1_reg_573);
    convolve_ama_addmfYi_U4->din2(grp_fu_501_p2);
    convolve_ama_addmfYi_U4->din3(grp_fu_501_p3);
    convolve_ama_addmfYi_U4->dout(grp_fu_501_p4);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_220_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_220_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_1_fu_288_p2);
    sensitive << ( c_reg_134 );

    SC_METHOD(thread_c_cast6_cast_fu_226_p1);
    sensitive << ( c_reg_134 );

    SC_METHOD(thread_col_offset_cast_cast_fu_284_p1);
    sensitive << ( col_offset_fu_278_p2 );

    SC_METHOD(thread_col_offset_fu_278_p2);
    sensitive << ( c_reg_134 );
    sensitive << ( tmp_cast_fu_274_p1 );

    SC_METHOD(thread_exitcond9_fu_220_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r1_reg_122 );

    SC_METHOD(thread_exitcond_fu_240_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( c_reg_134 );

    SC_METHOD(thread_grp_fu_201_p0);
    sensitive << ( tmp_12_fu_351_p1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_13_fu_355_p1 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_214_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_214_p00 );

    SC_METHOD(thread_grp_fu_214_p00);
    sensitive << ( r1_reg_122 );

    SC_METHOD(thread_grp_fu_214_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_501_p2);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_501_p3);
    sensitive << ( col_offset_cast_cast_reg_550 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_12_cast_fu_347_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_isNeg_fu_395_p3);
    sensitive << ( sh_assign_fu_389_p2 );

    SC_METHOD(thread_kc_1_fu_262_p2);
    sensitive << ( kc_reg_159 );

    SC_METHOD(thread_kc_cast5_cast_fu_252_p1);
    sensitive << ( kc_reg_159 );

    SC_METHOD(thread_kr_1_fu_332_p2);
    sensitive << ( kr_reg_182 );

    SC_METHOD(thread_kr_cast4_cast_fu_294_p1);
    sensitive << ( kr_reg_182 );

    SC_METHOD(thread_krnl_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_loc_V_1_fu_381_p1);
    sensitive << ( p_Val2_1_fu_360_p1 );

    SC_METHOD(thread_loc_V_fu_371_p4);
    sensitive << ( p_Val2_1_fu_360_p1 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_fu_256_p2 );

    SC_METHOD(thread_p_Val2_1_fu_360_p1);
    sensitive << ( x_assign_reg_608 );

    SC_METHOD(thread_p_Val2_3_fu_478_p3);
    sensitive << ( isNeg_reg_623 );
    sensitive << ( tmp_14_fu_464_p1 );
    sensitive << ( tmp_15_fu_468_p4 );

    SC_METHOD(thread_p_Val2_s_fu_494_p3);
    sensitive << ( p_Result_s_reg_613 );
    sensitive << ( tmp_7_i_i_i_fu_485_p1 );
    sensitive << ( tmp_10_i_i_i_fu_488_p2 );

    SC_METHOD(thread_p_shl_cast_fu_306_p1);
    sensitive << ( tmp_8_fu_298_p3 );

    SC_METHOD(thread_r_fu_246_p2);
    sensitive << ( r1_reg_122 );

    SC_METHOD(thread_sh_assign_1_cast_cas_fu_437_p1);
    sensitive << ( sh_assign_1_reg_628 );

    SC_METHOD(thread_sh_assign_1_cast_fu_434_p1);
    sensitive << ( sh_assign_1_reg_628 );

    SC_METHOD(thread_sh_assign_1_fu_413_p3);
    sensitive << ( isNeg_fu_395_p3 );
    sensitive << ( sh_assign_fu_389_p2 );
    sensitive << ( tmp_2_i_i_i_cast_fu_409_p1 );

    SC_METHOD(thread_sh_assign_fu_389_p2);
    sensitive << ( tmp_i_i_i_i_cast2_fu_385_p1 );

    SC_METHOD(thread_tmp1_fu_338_p2);
    sensitive << ( kr_reg_182 );

    SC_METHOD(thread_tmp_10_cast_fu_321_p1);
    sensitive << ( tmp_s_fu_316_p2 );

    SC_METHOD(thread_tmp_10_i_i_i_fu_488_p2);
    sensitive << ( tmp_7_i_i_i_fu_485_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_347_p1);
    sensitive << ( grp_fu_501_p4 );

    SC_METHOD(thread_tmp_12_fu_351_p1);
    sensitive << ( in_load_reg_583 );

    SC_METHOD(thread_tmp_13_fu_355_p1);
    sensitive << ( sum_1_reg_170 );

    SC_METHOD(thread_tmp_14_fu_464_p1);
    sensitive << ( tmp_19_fu_456_p3 );

    SC_METHOD(thread_tmp_15_fu_468_p4);
    sensitive << ( tmp_5_i_i_i_fu_450_p2 );

    SC_METHOD(thread_tmp_19_fu_456_p3);
    sensitive << ( tmp_4_i_i_i_fu_444_p2 );

    SC_METHOD(thread_tmp_1_i_i_i_cast3_fu_430_p1);
    sensitive << ( tmp_1_i_i_i_fu_421_p4 );

    SC_METHOD(thread_tmp_1_i_i_i_fu_421_p4);
    sensitive << ( loc_V_1_reg_618 );

    SC_METHOD(thread_tmp_2_fu_256_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( kc_reg_159 );

    SC_METHOD(thread_tmp_2_i_i_i_cast_fu_409_p1);
    sensitive << ( tmp_2_i_i_i_fu_403_p2 );

    SC_METHOD(thread_tmp_2_i_i_i_fu_403_p2);
    sensitive << ( loc_V_fu_371_p4 );

    SC_METHOD(thread_tmp_3_fu_326_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( kr_reg_182 );

    SC_METHOD(thread_tmp_3_i_i_i_fu_440_p1);
    sensitive << ( sh_assign_1_cast_fu_434_p1 );

    SC_METHOD(thread_tmp_4_i_i_i_fu_444_p2);
    sensitive << ( tmp_1_i_i_i_fu_421_p4 );
    sensitive << ( sh_assign_1_cast_cas_fu_437_p1 );

    SC_METHOD(thread_tmp_5_i_i_i_fu_450_p2);
    sensitive << ( tmp_1_i_i_i_cast3_fu_430_p1 );
    sensitive << ( tmp_3_i_i_i_fu_440_p1 );

    SC_METHOD(thread_tmp_7_cast_fu_235_p1);
    sensitive << ( tmp_7_fu_230_p2 );

    SC_METHOD(thread_tmp_7_fu_230_p2);
    sensitive << ( tmp_1_reg_516 );
    sensitive << ( c_cast6_cast_fu_226_p1 );

    SC_METHOD(thread_tmp_7_i_i_i_fu_485_p1);
    sensitive << ( p_Val2_3_reg_634 );

    SC_METHOD(thread_tmp_8_fu_298_p3);
    sensitive << ( kr_reg_182 );

    SC_METHOD(thread_tmp_9_fu_310_p2);
    sensitive << ( p_shl_cast_fu_306_p1 );
    sensitive << ( kr_cast4_cast_fu_294_p1 );

    SC_METHOD(thread_tmp_cast_fu_274_p1);
    sensitive << ( tmp_fu_268_p2 );

    SC_METHOD(thread_tmp_fu_268_p2);
    sensitive << ( kc_reg_159 );

    SC_METHOD(thread_tmp_i_i_i_i_cast2_fu_385_p1);
    sensitive << ( loc_V_fu_371_p4 );

    SC_METHOD(thread_tmp_s_fu_316_p2);
    sensitive << ( kc_cast5_cast_reg_537 );
    sensitive << ( tmp_9_fu_310_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_240_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_fu_256_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_fu_326_p2 );
    sensitive << ( exitcond9_fu_220_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_conv_AWVALID, "(port)s_axi_conv_AWVALID");
    sc_trace(mVcdFile, s_axi_conv_AWREADY, "(port)s_axi_conv_AWREADY");
    sc_trace(mVcdFile, s_axi_conv_AWADDR, "(port)s_axi_conv_AWADDR");
    sc_trace(mVcdFile, s_axi_conv_WVALID, "(port)s_axi_conv_WVALID");
    sc_trace(mVcdFile, s_axi_conv_WREADY, "(port)s_axi_conv_WREADY");
    sc_trace(mVcdFile, s_axi_conv_WDATA, "(port)s_axi_conv_WDATA");
    sc_trace(mVcdFile, s_axi_conv_WSTRB, "(port)s_axi_conv_WSTRB");
    sc_trace(mVcdFile, s_axi_conv_ARVALID, "(port)s_axi_conv_ARVALID");
    sc_trace(mVcdFile, s_axi_conv_ARREADY, "(port)s_axi_conv_ARREADY");
    sc_trace(mVcdFile, s_axi_conv_ARADDR, "(port)s_axi_conv_ARADDR");
    sc_trace(mVcdFile, s_axi_conv_RVALID, "(port)s_axi_conv_RVALID");
    sc_trace(mVcdFile, s_axi_conv_RREADY, "(port)s_axi_conv_RREADY");
    sc_trace(mVcdFile, s_axi_conv_RDATA, "(port)s_axi_conv_RDATA");
    sc_trace(mVcdFile, s_axi_conv_RRESP, "(port)s_axi_conv_RRESP");
    sc_trace(mVcdFile, s_axi_conv_BVALID, "(port)s_axi_conv_BVALID");
    sc_trace(mVcdFile, s_axi_conv_BREADY, "(port)s_axi_conv_BREADY");
    sc_trace(mVcdFile, s_axi_conv_BRESP, "(port)s_axi_conv_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_r_address0, "in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "in_r_q0");
    sc_trace(mVcdFile, out_r_ce0, "out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "out_r_we0");
    sc_trace(mVcdFile, krnl_ce0, "krnl_ce0");
    sc_trace(mVcdFile, krnl_q0, "krnl_q0");
    sc_trace(mVcdFile, grp_fu_201_p1, "grp_fu_201_p1");
    sc_trace(mVcdFile, reg_204, "reg_204");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_214_p2, "grp_fu_214_p2");
    sc_trace(mVcdFile, tmp_1_reg_516, "tmp_1_reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, out_addr_reg_524, "out_addr_reg_524");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, r_fu_246_p2, "r_fu_246_p2");
    sc_trace(mVcdFile, exitcond_fu_240_p2, "exitcond_fu_240_p2");
    sc_trace(mVcdFile, kc_cast5_cast_fu_252_p1, "kc_cast5_cast_fu_252_p1");
    sc_trace(mVcdFile, kc_cast5_cast_reg_537, "kc_cast5_cast_reg_537");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, kc_1_fu_262_p2, "kc_1_fu_262_p2");
    sc_trace(mVcdFile, kc_1_reg_545, "kc_1_reg_545");
    sc_trace(mVcdFile, col_offset_cast_cast_fu_284_p1, "col_offset_cast_cast_fu_284_p1");
    sc_trace(mVcdFile, col_offset_cast_cast_reg_550, "col_offset_cast_cast_reg_550");
    sc_trace(mVcdFile, tmp_2_fu_256_p2, "tmp_2_fu_256_p2");
    sc_trace(mVcdFile, c_1_fu_288_p2, "c_1_fu_288_p2");
    sc_trace(mVcdFile, krnl_addr_reg_560, "krnl_addr_reg_560");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, kr_1_fu_332_p2, "kr_1_fu_332_p2");
    sc_trace(mVcdFile, kr_1_reg_568, "kr_1_reg_568");
    sc_trace(mVcdFile, tmp1_fu_338_p2, "tmp1_fu_338_p2");
    sc_trace(mVcdFile, tmp1_reg_573, "tmp1_reg_573");
    sc_trace(mVcdFile, tmp_3_fu_326_p2, "tmp_3_fu_326_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, in_load_reg_583, "in_load_reg_583");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_12_fu_351_p1, "tmp_12_fu_351_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_13_fu_355_p1, "tmp_13_fu_355_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, krnl_load_reg_598, "krnl_load_reg_598");
    sc_trace(mVcdFile, grp_fu_197_p2, "grp_fu_197_p2");
    sc_trace(mVcdFile, tmp_5_reg_603, "tmp_5_reg_603");
    sc_trace(mVcdFile, grp_fu_193_p2, "grp_fu_193_p2");
    sc_trace(mVcdFile, x_assign_reg_608, "x_assign_reg_608");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, p_Result_s_reg_613, "p_Result_s_reg_613");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, loc_V_1_fu_381_p1, "loc_V_1_fu_381_p1");
    sc_trace(mVcdFile, loc_V_1_reg_618, "loc_V_1_reg_618");
    sc_trace(mVcdFile, isNeg_fu_395_p3, "isNeg_fu_395_p3");
    sc_trace(mVcdFile, isNeg_reg_623, "isNeg_reg_623");
    sc_trace(mVcdFile, sh_assign_1_fu_413_p3, "sh_assign_1_fu_413_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_628, "sh_assign_1_reg_628");
    sc_trace(mVcdFile, p_Val2_3_fu_478_p3, "p_Val2_3_fu_478_p3");
    sc_trace(mVcdFile, p_Val2_3_reg_634, "p_Val2_3_reg_634");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, p_Val2_s_fu_494_p3, "p_Val2_s_fu_494_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, r1_reg_122, "r1_reg_122");
    sc_trace(mVcdFile, c_reg_134, "c_reg_134");
    sc_trace(mVcdFile, exitcond9_fu_220_p2, "exitcond9_fu_220_p2");
    sc_trace(mVcdFile, sum_reg_146, "sum_reg_146");
    sc_trace(mVcdFile, kc_reg_159, "kc_reg_159");
    sc_trace(mVcdFile, sum_1_reg_170, "sum_1_reg_170");
    sc_trace(mVcdFile, kr_reg_182, "kr_reg_182");
    sc_trace(mVcdFile, tmp_7_cast_fu_235_p1, "tmp_7_cast_fu_235_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_321_p1, "tmp_10_cast_fu_321_p1");
    sc_trace(mVcdFile, tmp_12_cast_fu_347_p1, "tmp_12_cast_fu_347_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_201_p0, "grp_fu_201_p0");
    sc_trace(mVcdFile, grp_fu_214_p0, "grp_fu_214_p0");
    sc_trace(mVcdFile, grp_fu_214_p1, "grp_fu_214_p1");
    sc_trace(mVcdFile, c_cast6_cast_fu_226_p1, "c_cast6_cast_fu_226_p1");
    sc_trace(mVcdFile, tmp_7_fu_230_p2, "tmp_7_fu_230_p2");
    sc_trace(mVcdFile, tmp_fu_268_p2, "tmp_fu_268_p2");
    sc_trace(mVcdFile, tmp_cast_fu_274_p1, "tmp_cast_fu_274_p1");
    sc_trace(mVcdFile, col_offset_fu_278_p2, "col_offset_fu_278_p2");
    sc_trace(mVcdFile, tmp_8_fu_298_p3, "tmp_8_fu_298_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_306_p1, "p_shl_cast_fu_306_p1");
    sc_trace(mVcdFile, kr_cast4_cast_fu_294_p1, "kr_cast4_cast_fu_294_p1");
    sc_trace(mVcdFile, tmp_9_fu_310_p2, "tmp_9_fu_310_p2");
    sc_trace(mVcdFile, tmp_s_fu_316_p2, "tmp_s_fu_316_p2");
    sc_trace(mVcdFile, grp_fu_501_p4, "grp_fu_501_p4");
    sc_trace(mVcdFile, p_Val2_1_fu_360_p1, "p_Val2_1_fu_360_p1");
    sc_trace(mVcdFile, loc_V_fu_371_p4, "loc_V_fu_371_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast2_fu_385_p1, "tmp_i_i_i_i_cast2_fu_385_p1");
    sc_trace(mVcdFile, sh_assign_fu_389_p2, "sh_assign_fu_389_p2");
    sc_trace(mVcdFile, tmp_2_i_i_i_fu_403_p2, "tmp_2_i_i_i_fu_403_p2");
    sc_trace(mVcdFile, tmp_2_i_i_i_cast_fu_409_p1, "tmp_2_i_i_i_cast_fu_409_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_fu_421_p4, "tmp_1_i_i_i_fu_421_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_434_p1, "sh_assign_1_cast_fu_434_p1");
    sc_trace(mVcdFile, sh_assign_1_cast_cas_fu_437_p1, "sh_assign_1_cast_cas_fu_437_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_cast3_fu_430_p1, "tmp_1_i_i_i_cast3_fu_430_p1");
    sc_trace(mVcdFile, tmp_3_i_i_i_fu_440_p1, "tmp_3_i_i_i_fu_440_p1");
    sc_trace(mVcdFile, tmp_4_i_i_i_fu_444_p2, "tmp_4_i_i_i_fu_444_p2");
    sc_trace(mVcdFile, tmp_19_fu_456_p3, "tmp_19_fu_456_p3");
    sc_trace(mVcdFile, tmp_5_i_i_i_fu_450_p2, "tmp_5_i_i_i_fu_450_p2");
    sc_trace(mVcdFile, tmp_14_fu_464_p1, "tmp_14_fu_464_p1");
    sc_trace(mVcdFile, tmp_15_fu_468_p4, "tmp_15_fu_468_p4");
    sc_trace(mVcdFile, tmp_7_i_i_i_fu_485_p1, "tmp_7_i_i_i_fu_485_p1");
    sc_trace(mVcdFile, tmp_10_i_i_i_fu_488_p2, "tmp_10_i_i_i_fu_488_p2");
    sc_trace(mVcdFile, grp_fu_501_p2, "grp_fu_501_p2");
    sc_trace(mVcdFile, grp_fu_501_p3, "grp_fu_501_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_214_p00, "grp_fu_214_p00");
#endif

    }
    mHdltvinHandle.open("convolve.hdltvin.dat");
    mHdltvoutHandle.open("convolve.hdltvout.dat");
}

convolve::~convolve() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolve_conv_s_axi_U;
    delete convolve_fadd_32nbkb_U0;
    delete convolve_fmul_32ncud_U1;
    delete convolve_sitofp_3dEe_U2;
    delete convolve_mul_6ns_eOg_U3;
    delete convolve_ama_addmfYi_U4;
}

void convolve::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolve::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_220_p2.read()))) {
        c_reg_134 = ap_const_lv6_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_256_p2.read()))) {
        c_reg_134 = c_1_fu_288_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_240_p2.read(), ap_const_lv1_0))) {
        kc_reg_159 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_326_p2.read()))) {
        kc_reg_159 = kc_1_reg_545.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_256_p2.read(), ap_const_lv1_0))) {
        kr_reg_182 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        kr_reg_182 = kr_1_reg_568.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_240_p2.read(), ap_const_lv1_1))) {
        r1_reg_122 = r_fu_246_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r1_reg_122 = ap_const_lv6_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_256_p2.read(), ap_const_lv1_0))) {
        sum_1_reg_170 = sum_reg_146.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sum_1_reg_170 = p_Val2_s_fu_494_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_240_p2.read(), ap_const_lv1_0))) {
        sum_reg_146 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_326_p2.read()))) {
        sum_reg_146 = sum_1_reg_170.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_2_fu_256_p2.read(), ap_const_lv1_0))) {
        col_offset_cast_cast_reg_550 = col_offset_cast_cast_fu_284_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        in_load_reg_583 = in_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        isNeg_reg_623 = sh_assign_fu_389_p2.read().range(8, 8);
        loc_V_1_reg_618 = loc_V_1_fu_381_p1.read();
        p_Result_s_reg_613 = p_Val2_1_fu_360_p1.read().range(31, 31);
        sh_assign_1_reg_628 = sh_assign_1_fu_413_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        kc_1_reg_545 = kc_1_fu_262_p2.read();
        kc_cast5_cast_reg_537 = kc_cast5_cast_fu_252_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        kr_1_reg_568 = kr_1_fu_332_p2.read();
        krnl_addr_reg_560 =  (sc_lv<4>) (tmp_10_cast_fu_321_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        krnl_load_reg_598 = krnl_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_addr_reg_524 =  (sc_lv<12>) (tmp_7_cast_fu_235_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        p_Val2_3_reg_634 = p_Val2_3_fu_478_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        reg_204 = grp_fu_201_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_326_p2.read()))) {
        tmp1_reg_573 = tmp1_fu_338_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_1_reg_516 = grp_fu_214_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tmp_5_reg_603 = grp_fu_197_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        x_assign_reg_608 = grp_fu_193_p2.read();
    }
}

void convolve::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolve::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void convolve::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void convolve::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void convolve::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void convolve::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void convolve::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolve::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void convolve::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void convolve::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void convolve::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void convolve::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolve::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolve::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolve::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolve::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolve::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void convolve::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void convolve::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_220_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolve::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_220_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolve::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void convolve::thread_c_1_fu_288_p2() {
    c_1_fu_288_p2 = (!c_reg_134.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_134.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_c_cast6_cast_fu_226_p1() {
    c_cast6_cast_fu_226_p1 = esl_zext<12,6>(c_reg_134.read());
}

void convolve::thread_col_offset_cast_cast_fu_284_p1() {
    col_offset_cast_cast_fu_284_p1 = esl_zext<12,6>(col_offset_fu_278_p2.read());
}

void convolve::thread_col_offset_fu_278_p2() {
    col_offset_fu_278_p2 = (!c_reg_134.read().is_01() || !tmp_cast_fu_274_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(c_reg_134.read()) + sc_bigint<6>(tmp_cast_fu_274_p1.read()));
}

void convolve::thread_exitcond9_fu_220_p2() {
    exitcond9_fu_220_p2 = (!r1_reg_122.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(r1_reg_122.read() == ap_const_lv6_31);
}

void convolve::thread_exitcond_fu_240_p2() {
    exitcond_fu_240_p2 = (!c_reg_134.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_134.read() == ap_const_lv6_31);
}

void convolve::thread_grp_fu_201_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_201_p0 = tmp_13_fu_355_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_201_p0 = tmp_12_fu_351_p1.read();
    } else {
        grp_fu_201_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void convolve::thread_grp_fu_214_p0() {
    grp_fu_214_p0 =  (sc_lv<6>) (grp_fu_214_p00.read());
}

void convolve::thread_grp_fu_214_p00() {
    grp_fu_214_p00 = esl_zext<12,6>(r1_reg_122.read());
}

void convolve::thread_grp_fu_214_p1() {
    grp_fu_214_p1 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_501_p2() {
    grp_fu_501_p2 =  (sc_lv<7>) (ap_const_lv12_32);
}

void convolve::thread_grp_fu_501_p3() {
    grp_fu_501_p3 =  (sc_lv<6>) (col_offset_cast_cast_reg_550.read());
}

void convolve::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<12>) (tmp_12_cast_fu_347_p1.read());
}

void convolve::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_isNeg_fu_395_p3() {
    isNeg_fu_395_p3 = sh_assign_fu_389_p2.read().range(8, 8);
}

void convolve::thread_kc_1_fu_262_p2() {
    kc_1_fu_262_p2 = (!kc_reg_159.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kc_reg_159.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve::thread_kc_cast5_cast_fu_252_p1() {
    kc_cast5_cast_fu_252_p1 = esl_zext<5,2>(kc_reg_159.read());
}

void convolve::thread_kr_1_fu_332_p2() {
    kr_1_fu_332_p2 = (!kr_reg_182.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kr_reg_182.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve::thread_kr_cast4_cast_fu_294_p1() {
    kr_cast4_cast_fu_294_p1 = esl_zext<5,2>(kr_reg_182.read());
}

void convolve::thread_krnl_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        krnl_ce0 = ap_const_logic_1;
    } else {
        krnl_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_loc_V_1_fu_381_p1() {
    loc_V_1_fu_381_p1 = p_Val2_1_fu_360_p1.read().range(23-1, 0);
}

void convolve::thread_loc_V_fu_371_p4() {
    loc_V_fu_371_p4 = p_Val2_1_fu_360_p1.read().range(30, 23);
}

void convolve::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void convolve::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_256_p2.read()))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void convolve::thread_p_Val2_1_fu_360_p1() {
    p_Val2_1_fu_360_p1 = x_assign_reg_608.read();
}

void convolve::thread_p_Val2_3_fu_478_p3() {
    p_Val2_3_fu_478_p3 = (!isNeg_reg_623.read()[0].is_01())? sc_lv<15>(): ((isNeg_reg_623.read()[0].to_bool())? tmp_14_fu_464_p1.read(): tmp_15_fu_468_p4.read());
}

void convolve::thread_p_Val2_s_fu_494_p3() {
    p_Val2_s_fu_494_p3 = (!p_Result_s_reg_613.read()[0].is_01())? sc_lv<16>(): ((p_Result_s_reg_613.read()[0].to_bool())? tmp_10_i_i_i_fu_488_p2.read(): tmp_7_i_i_i_fu_485_p1.read());
}

void convolve::thread_p_shl_cast_fu_306_p1() {
    p_shl_cast_fu_306_p1 = esl_zext<5,4>(tmp_8_fu_298_p3.read());
}

void convolve::thread_r_fu_246_p2() {
    r_fu_246_p2 = (!r1_reg_122.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(r1_reg_122.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve::thread_sh_assign_1_cast_cas_fu_437_p1() {
    sh_assign_1_cast_cas_fu_437_p1 = esl_sext<25,9>(sh_assign_1_reg_628.read());
}

void convolve::thread_sh_assign_1_cast_fu_434_p1() {
    sh_assign_1_cast_fu_434_p1 = esl_sext<32,9>(sh_assign_1_reg_628.read());
}

void convolve::thread_sh_assign_1_fu_413_p3() {
    sh_assign_1_fu_413_p3 = (!isNeg_fu_395_p3.read()[0].is_01())? sc_lv<9>(): ((isNeg_fu_395_p3.read()[0].to_bool())? tmp_2_i_i_i_cast_fu_409_p1.read(): sh_assign_fu_389_p2.read());
}

void convolve::thread_sh_assign_fu_389_p2() {
    sh_assign_fu_389_p2 = (!ap_const_lv9_181.is_01() || !tmp_i_i_i_i_cast2_fu_385_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(tmp_i_i_i_i_cast2_fu_385_p1.read()));
}

void convolve::thread_tmp1_fu_338_p2() {
    tmp1_fu_338_p2 = (!ap_const_lv2_3.is_01() || !kr_reg_182.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(kr_reg_182.read()));
}

void convolve::thread_tmp_10_cast_fu_321_p1() {
    tmp_10_cast_fu_321_p1 = esl_sext<32,5>(tmp_s_fu_316_p2.read());
}

void convolve::thread_tmp_10_i_i_i_fu_488_p2() {
    tmp_10_i_i_i_fu_488_p2 = (!ap_const_lv16_0.is_01() || !tmp_7_i_i_i_fu_485_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_0) - sc_biguint<16>(tmp_7_i_i_i_fu_485_p1.read()));
}

void convolve::thread_tmp_12_cast_fu_347_p1() {
    tmp_12_cast_fu_347_p1 = esl_zext<32,12>(grp_fu_501_p4.read());
}

void convolve::thread_tmp_12_fu_351_p1() {
    tmp_12_fu_351_p1 = esl_sext<32,16>(in_load_reg_583.read());
}

void convolve::thread_tmp_13_fu_355_p1() {
    tmp_13_fu_355_p1 = esl_sext<32,16>(sum_1_reg_170.read());
}

void convolve::thread_tmp_14_fu_464_p1() {
    tmp_14_fu_464_p1 = esl_zext<15,1>(tmp_19_fu_456_p3.read());
}

void convolve::thread_tmp_15_fu_468_p4() {
    tmp_15_fu_468_p4 = tmp_5_i_i_i_fu_450_p2.read().range(38, 24);
}

void convolve::thread_tmp_19_fu_456_p3() {
    tmp_19_fu_456_p3 = tmp_4_i_i_i_fu_444_p2.read().range(24, 24);
}

void convolve::thread_tmp_1_i_i_i_cast3_fu_430_p1() {
    tmp_1_i_i_i_cast3_fu_430_p1 = esl_zext<63,25>(tmp_1_i_i_i_fu_421_p4.read());
}

void convolve::thread_tmp_1_i_i_i_fu_421_p4() {
    tmp_1_i_i_i_fu_421_p4 = esl_concat<24,1>(esl_concat<1,23>(ap_const_lv1_1, loc_V_1_reg_618.read()), ap_const_lv1_0);
}

void convolve::thread_tmp_2_fu_256_p2() {
    tmp_2_fu_256_p2 = (!kc_reg_159.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kc_reg_159.read() == ap_const_lv2_3);
}

void convolve::thread_tmp_2_i_i_i_cast_fu_409_p1() {
    tmp_2_i_i_i_cast_fu_409_p1 = esl_sext<9,8>(tmp_2_i_i_i_fu_403_p2.read());
}

void convolve::thread_tmp_2_i_i_i_fu_403_p2() {
    tmp_2_i_i_i_fu_403_p2 = (!ap_const_lv8_7F.is_01() || !loc_V_fu_371_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(loc_V_fu_371_p4.read()));
}

void convolve::thread_tmp_3_fu_326_p2() {
    tmp_3_fu_326_p2 = (!kr_reg_182.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kr_reg_182.read() == ap_const_lv2_3);
}

void convolve::thread_tmp_3_i_i_i_fu_440_p1() {
    tmp_3_i_i_i_fu_440_p1 = esl_zext<63,32>(sh_assign_1_cast_fu_434_p1.read());
}

void convolve::thread_tmp_4_i_i_i_fu_444_p2() {
    tmp_4_i_i_i_fu_444_p2 = (!sh_assign_1_cast_cas_fu_437_p1.read().is_01())? sc_lv<25>(): tmp_1_i_i_i_fu_421_p4.read() >> (unsigned short)sh_assign_1_cast_cas_fu_437_p1.read().to_uint();
}

void convolve::thread_tmp_5_i_i_i_fu_450_p2() {
    tmp_5_i_i_i_fu_450_p2 = (!tmp_3_i_i_i_fu_440_p1.read().is_01())? sc_lv<63>(): tmp_1_i_i_i_cast3_fu_430_p1.read() << (unsigned short)tmp_3_i_i_i_fu_440_p1.read().to_uint();
}

void convolve::thread_tmp_7_cast_fu_235_p1() {
    tmp_7_cast_fu_235_p1 = esl_zext<32,12>(tmp_7_fu_230_p2.read());
}

void convolve::thread_tmp_7_fu_230_p2() {
    tmp_7_fu_230_p2 = (!tmp_1_reg_516.read().is_01() || !c_cast6_cast_fu_226_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_1_reg_516.read()) + sc_biguint<12>(c_cast6_cast_fu_226_p1.read()));
}

void convolve::thread_tmp_7_i_i_i_fu_485_p1() {
    tmp_7_i_i_i_fu_485_p1 = esl_zext<16,15>(p_Val2_3_reg_634.read());
}

void convolve::thread_tmp_8_fu_298_p3() {
    tmp_8_fu_298_p3 = esl_concat<2,2>(kr_reg_182.read(), ap_const_lv2_0);
}

void convolve::thread_tmp_9_fu_310_p2() {
    tmp_9_fu_310_p2 = (!p_shl_cast_fu_306_p1.read().is_01() || !kr_cast4_cast_fu_294_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_306_p1.read()) - sc_biguint<5>(kr_cast4_cast_fu_294_p1.read()));
}

void convolve::thread_tmp_cast_fu_274_p1() {
    tmp_cast_fu_274_p1 = esl_sext<6,2>(tmp_fu_268_p2.read());
}

void convolve::thread_tmp_fu_268_p2() {
    tmp_fu_268_p2 = (!kc_reg_159.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<2>(): (sc_biguint<2>(kc_reg_159.read()) + sc_bigint<2>(ap_const_lv2_3));
}

void convolve::thread_tmp_i_i_i_i_cast2_fu_385_p1() {
    tmp_i_i_i_i_cast2_fu_385_p1 = esl_zext<9,8>(loc_V_fu_371_p4.read());
}

void convolve::thread_tmp_s_fu_316_p2() {
    tmp_s_fu_316_p2 = (!tmp_9_fu_310_p2.read().is_01() || !kc_cast5_cast_reg_537.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_9_fu_310_p2.read()) + sc_biguint<5>(kc_cast5_cast_reg_537.read()));
}

void convolve::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_220_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_240_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_256_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_326_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void convolve::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWVALID\" :  \"" << s_axi_conv_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_conv_AWREADY\" :  \"" << s_axi_conv_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_AWADDR\" :  \"" << s_axi_conv_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WVALID\" :  \"" << s_axi_conv_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_WREADY\" :  \"" << s_axi_conv_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WDATA\" :  \"" << s_axi_conv_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_WSTRB\" :  \"" << s_axi_conv_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARVALID\" :  \"" << s_axi_conv_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_ARREADY\" :  \"" << s_axi_conv_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_ARADDR\" :  \"" << s_axi_conv_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RVALID\" :  \"" << s_axi_conv_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_RREADY\" :  \"" << s_axi_conv_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RDATA\" :  \"" << s_axi_conv_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_RRESP\" :  \"" << s_axi_conv_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BVALID\" :  \"" << s_axi_conv_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_conv_BREADY\" :  \"" << s_axi_conv_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_conv_BRESP\" :  \"" << s_axi_conv_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

