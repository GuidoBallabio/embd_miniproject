-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
generic (
    C_S_AXI_CONV_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_CONV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_conv_AWVALID : IN STD_LOGIC;
    s_axi_conv_AWREADY : OUT STD_LOGIC;
    s_axi_conv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_WVALID : IN STD_LOGIC;
    s_axi_conv_WREADY : OUT STD_LOGIC;
    s_axi_conv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_ARVALID : IN STD_LOGIC;
    s_axi_conv_ARREADY : OUT STD_LOGIC;
    s_axi_conv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_RVALID : OUT STD_LOGIC;
    s_axi_conv_RREADY : IN STD_LOGIC;
    s_axi_conv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_BVALID : OUT STD_LOGIC;
    s_axi_conv_BREADY : IN STD_LOGIC;
    s_axi_conv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.946000,HLS_SYN_LAT=495506,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=6,HLS_SYN_FF=1935,HLS_SYN_LUT=2257}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_r_ce0 : STD_LOGIC;
    signal in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_ce0 : STD_LOGIC;
    signal out_r_we0 : STD_LOGIC;
    signal krnl_ce0 : STD_LOGIC;
    signal krnl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_516 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_addr_reg_524 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_fu_246_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_cast5_cast_fu_252_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_cast5_cast_reg_537 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kc_1_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_1_reg_545 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_cast_cast_fu_284_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_offset_cast_cast_reg_550 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_288_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal krnl_addr_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kr_1_fu_332_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kr_1_reg_568 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_338_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_reg_573 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_load_reg_583 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_13_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal krnl_load_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal p_Result_s_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal loc_V_1_fu_381_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_618 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_413_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_628 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_3_fu_478_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_3_reg_634 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_Val2_s_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal r1_reg_122 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_134 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond9_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal kc_reg_159 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal kr_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast6_cast_fu_226_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_230_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_268_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_cast_fu_274_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_offset_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_306_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kr_cast4_cast_fu_294_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_310_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_501_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_371_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast2_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_i_i_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_i_i_cast_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_i_fu_421_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_437_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_i_i_i_cast3_fu_430_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_i_i_i_fu_440_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_i_i_i_fu_444_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_19_fu_456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_fu_450_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_464_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_468_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_i_i_i_fu_485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_i_i_i_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_501_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_214_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component convolve_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_sitofp_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_mul_6ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_ama_addmfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component convolve_conv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        in_r_ce0 : IN STD_LOGIC;
        in_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : IN STD_LOGIC;
        out_r_we0 : IN STD_LOGIC;
        out_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        krnl_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        krnl_ce0 : IN STD_LOGIC;
        krnl_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolve_conv_s_axi_U : component convolve_conv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_AWVALID,
        AWREADY => s_axi_conv_AWREADY,
        AWADDR => s_axi_conv_AWADDR,
        WVALID => s_axi_conv_WVALID,
        WREADY => s_axi_conv_WREADY,
        WDATA => s_axi_conv_WDATA,
        WSTRB => s_axi_conv_WSTRB,
        ARVALID => s_axi_conv_ARVALID,
        ARREADY => s_axi_conv_ARREADY,
        ARADDR => s_axi_conv_ARADDR,
        RVALID => s_axi_conv_RVALID,
        RREADY => s_axi_conv_RREADY,
        RDATA => s_axi_conv_RDATA,
        RRESP => s_axi_conv_RRESP,
        BVALID => s_axi_conv_BVALID,
        BREADY => s_axi_conv_BREADY,
        BRESP => s_axi_conv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r_address0 => in_r_address0,
        in_r_ce0 => in_r_ce0,
        in_r_q0 => in_r_q0,
        out_r_address0 => out_addr_reg_524,
        out_r_ce0 => out_r_ce0,
        out_r_we0 => out_r_we0,
        out_r_d0 => sum_reg_146,
        krnl_address0 => krnl_addr_reg_560,
        krnl_ce0 => krnl_ce0,
        krnl_q0 => krnl_q0);

    convolve_fadd_32nbkb_U0 : component convolve_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_204,
        din1 => tmp_5_reg_603,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    convolve_fmul_32ncud_U1 : component convolve_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_204,
        din1 => krnl_load_reg_598,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    convolve_sitofp_3dEe_U2 : component convolve_sitofp_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_201_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p1);

    convolve_mul_6ns_eOg_U3 : component convolve_mul_6ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    convolve_ama_addmfYi_U4 : component convolve_ama_addmfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 2,
        din2_WIDTH => 7,
        din3_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => r1_reg_122,
        din1 => tmp1_reg_573,
        din2 => grp_fu_501_p2,
        din3 => grp_fu_501_p3,
        dout => grp_fu_501_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_220_p2))) then 
                c_reg_134 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_256_p2))) then 
                c_reg_134 <= c_1_fu_288_p2;
            end if; 
        end if;
    end process;

    kc_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_240_p2 = ap_const_lv1_0))) then 
                kc_reg_159 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_3_fu_326_p2))) then 
                kc_reg_159 <= kc_1_reg_545;
            end if; 
        end if;
    end process;

    kr_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_256_p2 = ap_const_lv1_0))) then 
                kr_reg_182 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                kr_reg_182 <= kr_1_reg_568;
            end if; 
        end if;
    end process;

    r1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_240_p2 = ap_const_lv1_1))) then 
                r1_reg_122 <= r_fu_246_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r1_reg_122 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    sum_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_256_p2 = ap_const_lv1_0))) then 
                sum_1_reg_170 <= sum_reg_146;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                sum_1_reg_170 <= p_Val2_s_fu_494_p3;
            end if; 
        end if;
    end process;

    sum_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_240_p2 = ap_const_lv1_0))) then 
                sum_reg_146 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_3_fu_326_p2))) then 
                sum_reg_146 <= sum_1_reg_170;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_256_p2 = ap_const_lv1_0))) then
                    col_offset_cast_cast_reg_550(5 downto 0) <= col_offset_cast_cast_fu_284_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                in_load_reg_583 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                isNeg_reg_623 <= sh_assign_fu_389_p2(8 downto 8);
                loc_V_1_reg_618 <= loc_V_1_fu_381_p1;
                p_Result_s_reg_613 <= p_Val2_1_fu_360_p1(31 downto 31);
                sh_assign_1_reg_628 <= sh_assign_1_fu_413_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_1_reg_545 <= kc_1_fu_262_p2;
                    kc_cast5_cast_reg_537(1 downto 0) <= kc_cast5_cast_fu_252_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kr_1_reg_568 <= kr_1_fu_332_p2;
                krnl_addr_reg_560 <= tmp_10_cast_fu_321_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                krnl_load_reg_598 <= krnl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_addr_reg_524 <= tmp_7_cast_fu_235_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_Val2_3_reg_634 <= p_Val2_3_fu_478_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_204 <= grp_fu_201_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_3_fu_326_p2))) then
                tmp1_reg_573 <= tmp1_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_1_reg_516 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_5_reg_603 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                x_assign_reg_608 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    kc_cast5_cast_reg_537(4 downto 2) <= "000";
    col_offset_cast_cast_reg_550(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_fu_240_p2, ap_CS_fsm_state5, tmp_2_fu_256_p2, ap_CS_fsm_state6, tmp_3_fu_326_p2, exitcond9_fu_220_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_220_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_240_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_256_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_3_fu_326_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_220_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_220_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_220_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond9_fu_220_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_1_fu_288_p2 <= std_logic_vector(unsigned(c_reg_134) + unsigned(ap_const_lv6_1));
    c_cast6_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_134),12));
    col_offset_cast_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_fu_278_p2),12));
    col_offset_fu_278_p2 <= std_logic_vector(unsigned(c_reg_134) + unsigned(tmp_cast_fu_274_p1));
    exitcond9_fu_220_p2 <= "1" when (r1_reg_122 = ap_const_lv6_31) else "0";
    exitcond_fu_240_p2 <= "1" when (c_reg_134 = ap_const_lv6_31) else "0";

    grp_fu_201_p0_assign_proc : process(tmp_12_fu_351_p1, ap_CS_fsm_state9, tmp_13_fu_355_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_201_p0 <= tmp_13_fu_355_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_201_p0 <= tmp_12_fu_351_p1;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_214_p0 <= grp_fu_214_p00(6 - 1 downto 0);
    grp_fu_214_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_122),12));
    grp_fu_214_p1 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_501_p2 <= ap_const_lv12_32(7 - 1 downto 0);
    grp_fu_501_p3 <= col_offset_cast_cast_reg_550(6 - 1 downto 0);
    in_r_address0 <= tmp_12_cast_fu_347_p1(12 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_395_p3 <= sh_assign_fu_389_p2(8 downto 8);
    kc_1_fu_262_p2 <= std_logic_vector(unsigned(kc_reg_159) + unsigned(ap_const_lv2_1));
    kc_cast5_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_159),5));
    kr_1_fu_332_p2 <= std_logic_vector(unsigned(kr_reg_182) + unsigned(ap_const_lv2_1));
    kr_cast4_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_182),5));

    krnl_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            krnl_ce0 <= ap_const_logic_1;
        else 
            krnl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_381_p1 <= p_Val2_1_fu_360_p1(23 - 1 downto 0);
    loc_V_fu_371_p4 <= p_Val2_1_fu_360_p1(30 downto 23);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state5, tmp_2_fu_256_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_2_fu_256_p2))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_360_p1 <= x_assign_reg_608;
    p_Val2_3_fu_478_p3 <= 
        tmp_14_fu_464_p1 when (isNeg_reg_623(0) = '1') else 
        tmp_15_fu_468_p4;
    p_Val2_s_fu_494_p3 <= 
        tmp_10_i_i_i_fu_488_p2 when (p_Result_s_reg_613(0) = '1') else 
        tmp_7_i_i_i_fu_485_p1;
    p_shl_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_298_p3),5));
    r_fu_246_p2 <= std_logic_vector(unsigned(r1_reg_122) + unsigned(ap_const_lv6_1));
        sh_assign_1_cast_cas_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_628),25));

        sh_assign_1_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_628),32));

    sh_assign_1_fu_413_p3 <= 
        tmp_2_i_i_i_cast_fu_409_p1 when (isNeg_fu_395_p3(0) = '1') else 
        sh_assign_fu_389_p2;
    sh_assign_fu_389_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast2_fu_385_p1));
    tmp1_fu_338_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(kr_reg_182));
        tmp_10_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_316_p2),32));

    tmp_10_i_i_i_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_7_i_i_i_fu_485_p1));
    tmp_12_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_501_p4),32));
        tmp_12_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_load_reg_583),32));

        tmp_13_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_1_reg_170),32));

    tmp_14_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_456_p3),15));
    tmp_15_fu_468_p4 <= tmp_5_i_i_i_fu_450_p2(38 downto 24);
    tmp_19_fu_456_p3 <= tmp_4_i_i_i_fu_444_p2(24 downto 24);
    tmp_1_i_i_i_cast3_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_i_i_fu_421_p4),63));
    tmp_1_i_i_i_fu_421_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_618) & ap_const_lv1_0);
    tmp_2_fu_256_p2 <= "1" when (kc_reg_159 = ap_const_lv2_3) else "0";
        tmp_2_i_i_i_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_i_i_fu_403_p2),9));

    tmp_2_i_i_i_fu_403_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_371_p4));
    tmp_3_fu_326_p2 <= "1" when (kr_reg_182 = ap_const_lv2_3) else "0";
    tmp_3_i_i_i_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_434_p1),63));
    tmp_4_i_i_i_fu_444_p2 <= std_logic_vector(shift_right(unsigned(tmp_1_i_i_i_fu_421_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_437_p1(25-1 downto 0)))));
    tmp_5_i_i_i_fu_450_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_i_i_i_cast3_fu_430_p1),to_integer(unsigned('0' & tmp_3_i_i_i_fu_440_p1(31-1 downto 0)))));
    tmp_7_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_230_p2),32));
    tmp_7_fu_230_p2 <= std_logic_vector(unsigned(tmp_1_reg_516) + unsigned(c_cast6_cast_fu_226_p1));
    tmp_7_i_i_i_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_634),16));
    tmp_8_fu_298_p3 <= (kr_reg_182 & ap_const_lv2_0);
    tmp_9_fu_310_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_306_p1) - unsigned(kr_cast4_cast_fu_294_p1));
        tmp_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_268_p2),6));

    tmp_fu_268_p2 <= std_logic_vector(unsigned(kc_reg_159) + unsigned(ap_const_lv2_3));
    tmp_i_i_i_i_cast2_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_371_p4),9));
    tmp_s_fu_316_p2 <= std_logic_vector(unsigned(tmp_9_fu_310_p2) + unsigned(kc_cast5_cast_reg_537));
end behav;
