// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.946000,HLS_SYN_LAT=495506,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=6,HLS_SYN_FF=1935,HLS_SYN_LUT=2257}" *)

module convolve (
        ap_clk,
        ap_rst_n,
        s_axi_conv_AWVALID,
        s_axi_conv_AWREADY,
        s_axi_conv_AWADDR,
        s_axi_conv_WVALID,
        s_axi_conv_WREADY,
        s_axi_conv_WDATA,
        s_axi_conv_WSTRB,
        s_axi_conv_ARVALID,
        s_axi_conv_ARREADY,
        s_axi_conv_ARADDR,
        s_axi_conv_RVALID,
        s_axi_conv_RREADY,
        s_axi_conv_RDATA,
        s_axi_conv_RRESP,
        s_axi_conv_BVALID,
        s_axi_conv_BREADY,
        s_axi_conv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CONV_DATA_WIDTH = 32;
parameter    C_S_AXI_CONV_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_conv_AWVALID;
output   s_axi_conv_AWREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_AWADDR;
input   s_axi_conv_WVALID;
output   s_axi_conv_WREADY;
input  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_WDATA;
input  [C_S_AXI_CONV_WSTRB_WIDTH - 1:0] s_axi_conv_WSTRB;
input   s_axi_conv_ARVALID;
output   s_axi_conv_ARREADY;
input  [C_S_AXI_CONV_ADDR_WIDTH - 1:0] s_axi_conv_ARADDR;
output   s_axi_conv_RVALID;
input   s_axi_conv_RREADY;
output  [C_S_AXI_CONV_DATA_WIDTH - 1:0] s_axi_conv_RDATA;
output  [1:0] s_axi_conv_RRESP;
output   s_axi_conv_BVALID;
input   s_axi_conv_BREADY;
output  [1:0] s_axi_conv_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [11:0] in_r_address0;
reg    in_r_ce0;
wire   [15:0] in_r_q0;
reg    out_r_ce0;
reg    out_r_we0;
reg    krnl_ce0;
wire   [31:0] krnl_q0;
wire   [31:0] grp_fu_201_p1;
reg   [31:0] reg_204;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state2;
wire   [11:0] grp_fu_214_p2;
reg   [11:0] tmp_1_reg_516;
wire    ap_CS_fsm_state3;
reg   [11:0] out_addr_reg_524;
wire    ap_CS_fsm_state4;
wire   [5:0] r_fu_246_p2;
wire   [0:0] exitcond_fu_240_p2;
wire   [4:0] kc_cast5_cast_fu_252_p1;
reg   [4:0] kc_cast5_cast_reg_537;
wire    ap_CS_fsm_state5;
wire   [1:0] kc_1_fu_262_p2;
reg   [1:0] kc_1_reg_545;
wire   [11:0] col_offset_cast_cast_fu_284_p1;
reg   [11:0] col_offset_cast_cast_reg_550;
wire   [0:0] tmp_2_fu_256_p2;
wire   [5:0] c_1_fu_288_p2;
reg   [3:0] krnl_addr_reg_560;
wire    ap_CS_fsm_state6;
wire   [1:0] kr_1_fu_332_p2;
reg   [1:0] kr_1_reg_568;
wire   [1:0] tmp1_fu_338_p2;
reg  signed [1:0] tmp1_reg_573;
wire   [0:0] tmp_3_fu_326_p2;
wire    ap_CS_fsm_state7;
reg   [15:0] in_load_reg_583;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp_12_fu_351_p1;
wire    ap_CS_fsm_state9;
wire  signed [31:0] tmp_13_fu_355_p1;
wire    ap_CS_fsm_state13;
reg   [31:0] krnl_load_reg_598;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] tmp_5_reg_603;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] x_assign_reg_608;
wire    ap_CS_fsm_state25;
reg   [0:0] p_Result_s_reg_613;
wire    ap_CS_fsm_state26;
wire   [22:0] loc_V_1_fu_381_p1;
reg   [22:0] loc_V_1_reg_618;
wire   [0:0] isNeg_fu_395_p3;
reg   [0:0] isNeg_reg_623;
wire   [8:0] sh_assign_1_fu_413_p3;
reg   [8:0] sh_assign_1_reg_628;
wire   [14:0] p_Val2_3_fu_478_p3;
reg   [14:0] p_Val2_3_reg_634;
wire    ap_CS_fsm_state27;
wire   [15:0] p_Val2_s_fu_494_p3;
wire    ap_CS_fsm_state28;
reg   [5:0] r1_reg_122;
reg   [5:0] c_reg_134;
wire   [0:0] exitcond9_fu_220_p2;
reg   [15:0] sum_reg_146;
reg   [1:0] kc_reg_159;
reg   [15:0] sum_1_reg_170;
reg   [1:0] kr_reg_182;
wire   [31:0] tmp_7_cast_fu_235_p1;
wire  signed [31:0] tmp_10_cast_fu_321_p1;
wire   [31:0] tmp_12_cast_fu_347_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state15;
reg  signed [31:0] grp_fu_201_p0;
wire   [5:0] grp_fu_214_p0;
wire   [6:0] grp_fu_214_p1;
wire   [11:0] c_cast6_cast_fu_226_p1;
wire   [11:0] tmp_7_fu_230_p2;
wire   [1:0] tmp_fu_268_p2;
wire  signed [5:0] tmp_cast_fu_274_p1;
wire   [5:0] col_offset_fu_278_p2;
wire   [3:0] tmp_8_fu_298_p3;
wire   [4:0] p_shl_cast_fu_306_p1;
wire   [4:0] kr_cast4_cast_fu_294_p1;
wire   [4:0] tmp_9_fu_310_p2;
wire   [4:0] tmp_s_fu_316_p2;
wire   [11:0] grp_fu_501_p4;
wire   [31:0] p_Val2_1_fu_360_p1;
wire   [7:0] loc_V_fu_371_p4;
wire   [8:0] tmp_i_i_i_i_cast2_fu_385_p1;
wire   [8:0] sh_assign_fu_389_p2;
wire   [7:0] tmp_2_i_i_i_fu_403_p2;
wire  signed [8:0] tmp_2_i_i_i_cast_fu_409_p1;
wire   [24:0] tmp_1_i_i_i_fu_421_p4;
wire  signed [31:0] sh_assign_1_cast_fu_434_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_437_p1;
wire   [62:0] tmp_1_i_i_i_cast3_fu_430_p1;
wire   [62:0] tmp_3_i_i_i_fu_440_p1;
wire   [24:0] tmp_4_i_i_i_fu_444_p2;
wire   [0:0] tmp_19_fu_456_p3;
wire   [62:0] tmp_5_i_i_i_fu_450_p2;
wire   [14:0] tmp_14_fu_464_p1;
wire   [14:0] tmp_15_fu_468_p4;
wire   [15:0] tmp_7_i_i_i_fu_485_p1;
wire   [15:0] tmp_10_i_i_i_fu_488_p2;
wire   [6:0] grp_fu_501_p2;
wire   [5:0] grp_fu_501_p3;
reg   [27:0] ap_NS_fsm;
wire   [11:0] grp_fu_214_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

convolve_conv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONV_DATA_WIDTH ))
convolve_conv_s_axi_U(
    .AWVALID(s_axi_conv_AWVALID),
    .AWREADY(s_axi_conv_AWREADY),
    .AWADDR(s_axi_conv_AWADDR),
    .WVALID(s_axi_conv_WVALID),
    .WREADY(s_axi_conv_WREADY),
    .WDATA(s_axi_conv_WDATA),
    .WSTRB(s_axi_conv_WSTRB),
    .ARVALID(s_axi_conv_ARVALID),
    .ARREADY(s_axi_conv_ARREADY),
    .ARADDR(s_axi_conv_ARADDR),
    .RVALID(s_axi_conv_RVALID),
    .RREADY(s_axi_conv_RREADY),
    .RDATA(s_axi_conv_RDATA),
    .RRESP(s_axi_conv_RRESP),
    .BVALID(s_axi_conv_BVALID),
    .BREADY(s_axi_conv_BREADY),
    .BRESP(s_axi_conv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_r_address0(in_r_address0),
    .in_r_ce0(in_r_ce0),
    .in_r_q0(in_r_q0),
    .out_r_address0(out_addr_reg_524),
    .out_r_ce0(out_r_ce0),
    .out_r_we0(out_r_we0),
    .out_r_d0(sum_reg_146),
    .krnl_address0(krnl_addr_reg_560),
    .krnl_ce0(krnl_ce0),
    .krnl_q0(krnl_q0)
);

convolve_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_fadd_32nbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_204),
    .din1(tmp_5_reg_603),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

convolve_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_fmul_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_204),
    .din1(krnl_load_reg_598),
    .ce(1'b1),
    .dout(grp_fu_197_p2)
);

convolve_sitofp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_sitofp_3dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_201_p0),
    .ce(1'b1),
    .dout(grp_fu_201_p1)
);

convolve_mul_6ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
convolve_mul_6ns_eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

convolve_ama_addmfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
convolve_ama_addmfYi_U4(
    .din0(r1_reg_122),
    .din1(tmp1_reg_573),
    .din2(grp_fu_501_p2),
    .din3(grp_fu_501_p3),
    .dout(grp_fu_501_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_220_p2))) begin
        c_reg_134 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_256_p2))) begin
        c_reg_134 <= c_1_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_240_p2 == 1'd0))) begin
        kc_reg_159 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_3_fu_326_p2))) begin
        kc_reg_159 <= kc_1_reg_545;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_256_p2 == 1'd0))) begin
        kr_reg_182 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        kr_reg_182 <= kr_1_reg_568;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_240_p2 == 1'd1))) begin
        r1_reg_122 <= r_fu_246_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r1_reg_122 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_256_p2 == 1'd0))) begin
        sum_1_reg_170 <= sum_reg_146;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        sum_1_reg_170 <= p_Val2_s_fu_494_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_240_p2 == 1'd0))) begin
        sum_reg_146 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_3_fu_326_p2))) begin
        sum_reg_146 <= sum_1_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_256_p2 == 1'd0))) begin
        col_offset_cast_cast_reg_550[5 : 0] <= col_offset_cast_cast_fu_284_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_load_reg_583 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        isNeg_reg_623 <= sh_assign_fu_389_p2[32'd8];
        loc_V_1_reg_618 <= loc_V_1_fu_381_p1;
        p_Result_s_reg_613 <= p_Val2_1_fu_360_p1[32'd31];
        sh_assign_1_reg_628 <= sh_assign_1_fu_413_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kc_1_reg_545 <= kc_1_fu_262_p2;
        kc_cast5_cast_reg_537[1 : 0] <= kc_cast5_cast_fu_252_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kr_1_reg_568 <= kr_1_fu_332_p2;
        krnl_addr_reg_560 <= tmp_10_cast_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        krnl_load_reg_598 <= krnl_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_addr_reg_524 <= tmp_7_cast_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_Val2_3_reg_634 <= p_Val2_3_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_204 <= grp_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_3_fu_326_p2))) begin
        tmp1_reg_573 <= tmp1_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_516 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_5_reg_603 <= grp_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        x_assign_reg_608 <= grp_fu_193_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_220_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_220_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_201_p0 = tmp_13_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_201_p0 = tmp_12_fu_351_p1;
    end else begin
        grp_fu_201_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        krnl_ce0 = 1'b1;
    end else begin
        krnl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_256_p2))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond9_fu_220_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_240_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_256_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_3_fu_326_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_288_p2 = (c_reg_134 + 6'd1);

assign c_cast6_cast_fu_226_p1 = c_reg_134;

assign col_offset_cast_cast_fu_284_p1 = col_offset_fu_278_p2;

assign col_offset_fu_278_p2 = ($signed(c_reg_134) + $signed(tmp_cast_fu_274_p1));

assign exitcond9_fu_220_p2 = ((r1_reg_122 == 6'd49) ? 1'b1 : 1'b0);

assign exitcond_fu_240_p2 = ((c_reg_134 == 6'd49) ? 1'b1 : 1'b0);

assign grp_fu_214_p0 = grp_fu_214_p00;

assign grp_fu_214_p00 = r1_reg_122;

assign grp_fu_214_p1 = 12'd50;

assign grp_fu_501_p2 = 12'd50;

assign grp_fu_501_p3 = col_offset_cast_cast_reg_550;

assign in_r_address0 = tmp_12_cast_fu_347_p1;

assign isNeg_fu_395_p3 = sh_assign_fu_389_p2[32'd8];

assign kc_1_fu_262_p2 = (kc_reg_159 + 2'd1);

assign kc_cast5_cast_fu_252_p1 = kc_reg_159;

assign kr_1_fu_332_p2 = (kr_reg_182 + 2'd1);

assign kr_cast4_cast_fu_294_p1 = kr_reg_182;

assign loc_V_1_fu_381_p1 = p_Val2_1_fu_360_p1[22:0];

assign loc_V_fu_371_p4 = {{p_Val2_1_fu_360_p1[30:23]}};

assign p_Val2_1_fu_360_p1 = x_assign_reg_608;

assign p_Val2_3_fu_478_p3 = ((isNeg_reg_623[0:0] === 1'b1) ? tmp_14_fu_464_p1 : tmp_15_fu_468_p4);

assign p_Val2_s_fu_494_p3 = ((p_Result_s_reg_613[0:0] === 1'b1) ? tmp_10_i_i_i_fu_488_p2 : tmp_7_i_i_i_fu_485_p1);

assign p_shl_cast_fu_306_p1 = tmp_8_fu_298_p3;

assign r_fu_246_p2 = (r1_reg_122 + 6'd1);

assign sh_assign_1_cast_cas_fu_437_p1 = $signed(sh_assign_1_reg_628);

assign sh_assign_1_cast_fu_434_p1 = $signed(sh_assign_1_reg_628);

assign sh_assign_1_fu_413_p3 = ((isNeg_fu_395_p3[0:0] === 1'b1) ? tmp_2_i_i_i_cast_fu_409_p1 : sh_assign_fu_389_p2);

assign sh_assign_fu_389_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast2_fu_385_p1));

assign tmp1_fu_338_p2 = ($signed(2'd3) + $signed(kr_reg_182));

assign tmp_10_cast_fu_321_p1 = $signed(tmp_s_fu_316_p2);

assign tmp_10_i_i_i_fu_488_p2 = (16'd0 - tmp_7_i_i_i_fu_485_p1);

assign tmp_12_cast_fu_347_p1 = grp_fu_501_p4;

assign tmp_12_fu_351_p1 = $signed(in_load_reg_583);

assign tmp_13_fu_355_p1 = $signed(sum_1_reg_170);

assign tmp_14_fu_464_p1 = tmp_19_fu_456_p3;

assign tmp_15_fu_468_p4 = {{tmp_5_i_i_i_fu_450_p2[38:24]}};

assign tmp_19_fu_456_p3 = tmp_4_i_i_i_fu_444_p2[32'd24];

assign tmp_1_i_i_i_cast3_fu_430_p1 = tmp_1_i_i_i_fu_421_p4;

assign tmp_1_i_i_i_fu_421_p4 = {{{{1'd1}, {loc_V_1_reg_618}}}, {1'd0}};

assign tmp_2_fu_256_p2 = ((kc_reg_159 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_2_i_i_i_cast_fu_409_p1 = $signed(tmp_2_i_i_i_fu_403_p2);

assign tmp_2_i_i_i_fu_403_p2 = (8'd127 - loc_V_fu_371_p4);

assign tmp_3_fu_326_p2 = ((kr_reg_182 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_i_i_i_fu_440_p1 = $unsigned(sh_assign_1_cast_fu_434_p1);

assign tmp_4_i_i_i_fu_444_p2 = tmp_1_i_i_i_fu_421_p4 >> sh_assign_1_cast_cas_fu_437_p1;

assign tmp_5_i_i_i_fu_450_p2 = tmp_1_i_i_i_cast3_fu_430_p1 << tmp_3_i_i_i_fu_440_p1;

assign tmp_7_cast_fu_235_p1 = tmp_7_fu_230_p2;

assign tmp_7_fu_230_p2 = (tmp_1_reg_516 + c_cast6_cast_fu_226_p1);

assign tmp_7_i_i_i_fu_485_p1 = p_Val2_3_reg_634;

assign tmp_8_fu_298_p3 = {{kr_reg_182}, {2'd0}};

assign tmp_9_fu_310_p2 = (p_shl_cast_fu_306_p1 - kr_cast4_cast_fu_294_p1);

assign tmp_cast_fu_274_p1 = $signed(tmp_fu_268_p2);

assign tmp_fu_268_p2 = ($signed(kc_reg_159) + $signed(2'd3));

assign tmp_i_i_i_i_cast2_fu_385_p1 = loc_V_fu_371_p4;

assign tmp_s_fu_316_p2 = (tmp_9_fu_310_p2 + kc_cast5_cast_reg_537);

always @ (posedge ap_clk) begin
    kc_cast5_cast_reg_537[4:2] <= 3'b000;
    col_offset_cast_cast_reg_550[11:6] <= 6'b000000;
end

endmodule //convolve
