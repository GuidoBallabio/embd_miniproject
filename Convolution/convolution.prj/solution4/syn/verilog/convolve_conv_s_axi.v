// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module convolve_conv_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 14,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [5:0]                    in_0_address0,
    input  wire                          in_0_ce0,
    output wire [15:0]                   in_0_q0,
    input  wire [5:0]                    in_1_address0,
    input  wire                          in_1_ce0,
    output wire [15:0]                   in_1_q0,
    input  wire [5:0]                    in_2_address0,
    input  wire                          in_2_ce0,
    output wire [15:0]                   in_2_q0,
    input  wire [5:0]                    in_3_address0,
    input  wire                          in_3_ce0,
    output wire [15:0]                   in_3_q0,
    input  wire [5:0]                    in_4_address0,
    input  wire                          in_4_ce0,
    output wire [15:0]                   in_4_q0,
    input  wire [5:0]                    in_5_address0,
    input  wire                          in_5_ce0,
    output wire [15:0]                   in_5_q0,
    input  wire [5:0]                    in_6_address0,
    input  wire                          in_6_ce0,
    output wire [15:0]                   in_6_q0,
    input  wire [5:0]                    in_7_address0,
    input  wire                          in_7_ce0,
    output wire [15:0]                   in_7_q0,
    input  wire [5:0]                    in_8_address0,
    input  wire                          in_8_ce0,
    output wire [15:0]                   in_8_q0,
    input  wire [5:0]                    in_9_address0,
    input  wire                          in_9_ce0,
    output wire [15:0]                   in_9_q0,
    input  wire [5:0]                    in_10_address0,
    input  wire                          in_10_ce0,
    output wire [15:0]                   in_10_q0,
    input  wire [5:0]                    in_11_address0,
    input  wire                          in_11_ce0,
    output wire [15:0]                   in_11_q0,
    input  wire [5:0]                    in_12_address0,
    input  wire                          in_12_ce0,
    output wire [15:0]                   in_12_q0,
    input  wire [5:0]                    in_13_address0,
    input  wire                          in_13_ce0,
    output wire [15:0]                   in_13_q0,
    input  wire [5:0]                    in_14_address0,
    input  wire                          in_14_ce0,
    output wire [15:0]                   in_14_q0,
    input  wire [5:0]                    in_15_address0,
    input  wire                          in_15_ce0,
    output wire [15:0]                   in_15_q0,
    input  wire [5:0]                    in_16_address0,
    input  wire                          in_16_ce0,
    output wire [15:0]                   in_16_q0,
    input  wire [5:0]                    in_17_address0,
    input  wire                          in_17_ce0,
    output wire [15:0]                   in_17_q0,
    input  wire [5:0]                    in_18_address0,
    input  wire                          in_18_ce0,
    output wire [15:0]                   in_18_q0,
    input  wire [5:0]                    in_19_address0,
    input  wire                          in_19_ce0,
    output wire [15:0]                   in_19_q0,
    input  wire [5:0]                    in_20_address0,
    input  wire                          in_20_ce0,
    output wire [15:0]                   in_20_q0,
    input  wire [5:0]                    in_21_address0,
    input  wire                          in_21_ce0,
    output wire [15:0]                   in_21_q0,
    input  wire [5:0]                    in_22_address0,
    input  wire                          in_22_ce0,
    output wire [15:0]                   in_22_q0,
    input  wire [5:0]                    in_23_address0,
    input  wire                          in_23_ce0,
    output wire [15:0]                   in_23_q0,
    input  wire [5:0]                    in_24_address0,
    input  wire                          in_24_ce0,
    output wire [15:0]                   in_24_q0,
    input  wire [5:0]                    in_25_address0,
    input  wire                          in_25_ce0,
    output wire [15:0]                   in_25_q0,
    input  wire [5:0]                    in_26_address0,
    input  wire                          in_26_ce0,
    output wire [15:0]                   in_26_q0,
    input  wire [5:0]                    in_27_address0,
    input  wire                          in_27_ce0,
    output wire [15:0]                   in_27_q0,
    input  wire [5:0]                    in_28_address0,
    input  wire                          in_28_ce0,
    output wire [15:0]                   in_28_q0,
    input  wire [5:0]                    in_29_address0,
    input  wire                          in_29_ce0,
    output wire [15:0]                   in_29_q0,
    input  wire [5:0]                    in_30_address0,
    input  wire                          in_30_ce0,
    output wire [15:0]                   in_30_q0,
    input  wire [5:0]                    in_31_address0,
    input  wire                          in_31_ce0,
    output wire [15:0]                   in_31_q0,
    input  wire [5:0]                    in_32_address0,
    input  wire                          in_32_ce0,
    output wire [15:0]                   in_32_q0,
    input  wire [5:0]                    in_33_address0,
    input  wire                          in_33_ce0,
    output wire [15:0]                   in_33_q0,
    input  wire [5:0]                    in_34_address0,
    input  wire                          in_34_ce0,
    output wire [15:0]                   in_34_q0,
    input  wire [5:0]                    in_35_address0,
    input  wire                          in_35_ce0,
    output wire [15:0]                   in_35_q0,
    input  wire [5:0]                    in_36_address0,
    input  wire                          in_36_ce0,
    output wire [15:0]                   in_36_q0,
    input  wire [5:0]                    in_37_address0,
    input  wire                          in_37_ce0,
    output wire [15:0]                   in_37_q0,
    input  wire [5:0]                    in_38_address0,
    input  wire                          in_38_ce0,
    output wire [15:0]                   in_38_q0,
    input  wire [5:0]                    in_39_address0,
    input  wire                          in_39_ce0,
    output wire [15:0]                   in_39_q0,
    input  wire [5:0]                    in_40_address0,
    input  wire                          in_40_ce0,
    output wire [15:0]                   in_40_q0,
    input  wire [5:0]                    in_41_address0,
    input  wire                          in_41_ce0,
    output wire [15:0]                   in_41_q0,
    input  wire [5:0]                    in_42_address0,
    input  wire                          in_42_ce0,
    output wire [15:0]                   in_42_q0,
    input  wire [5:0]                    in_43_address0,
    input  wire                          in_43_ce0,
    output wire [15:0]                   in_43_q0,
    input  wire [5:0]                    in_44_address0,
    input  wire                          in_44_ce0,
    output wire [15:0]                   in_44_q0,
    input  wire [5:0]                    in_45_address0,
    input  wire                          in_45_ce0,
    output wire [15:0]                   in_45_q0,
    input  wire [5:0]                    in_46_address0,
    input  wire                          in_46_ce0,
    output wire [15:0]                   in_46_q0,
    input  wire [5:0]                    in_47_address0,
    input  wire                          in_47_ce0,
    output wire [15:0]                   in_47_q0,
    input  wire [5:0]                    in_48_address0,
    input  wire                          in_48_ce0,
    output wire [15:0]                   in_48_q0,
    input  wire [5:0]                    in_49_address0,
    input  wire                          in_49_ce0,
    output wire [15:0]                   in_49_q0,
    input  wire [5:0]                    out_0_address0,
    input  wire                          out_0_ce0,
    input  wire                          out_0_we0,
    input  wire [15:0]                   out_0_d0,
    input  wire [5:0]                    out_1_address0,
    input  wire                          out_1_ce0,
    input  wire                          out_1_we0,
    input  wire [15:0]                   out_1_d0,
    input  wire [5:0]                    out_2_address0,
    input  wire                          out_2_ce0,
    input  wire                          out_2_we0,
    input  wire [15:0]                   out_2_d0,
    input  wire [5:0]                    out_3_address0,
    input  wire                          out_3_ce0,
    input  wire                          out_3_we0,
    input  wire [15:0]                   out_3_d0,
    input  wire [5:0]                    out_4_address0,
    input  wire                          out_4_ce0,
    input  wire                          out_4_we0,
    input  wire [15:0]                   out_4_d0,
    input  wire [5:0]                    out_5_address0,
    input  wire                          out_5_ce0,
    input  wire                          out_5_we0,
    input  wire [15:0]                   out_5_d0,
    input  wire [5:0]                    out_6_address0,
    input  wire                          out_6_ce0,
    input  wire                          out_6_we0,
    input  wire [15:0]                   out_6_d0,
    input  wire [5:0]                    out_7_address0,
    input  wire                          out_7_ce0,
    input  wire                          out_7_we0,
    input  wire [15:0]                   out_7_d0,
    input  wire [5:0]                    out_8_address0,
    input  wire                          out_8_ce0,
    input  wire                          out_8_we0,
    input  wire [15:0]                   out_8_d0,
    input  wire [5:0]                    out_9_address0,
    input  wire                          out_9_ce0,
    input  wire                          out_9_we0,
    input  wire [15:0]                   out_9_d0,
    input  wire [5:0]                    out_10_address0,
    input  wire                          out_10_ce0,
    input  wire                          out_10_we0,
    input  wire [15:0]                   out_10_d0,
    input  wire [5:0]                    out_11_address0,
    input  wire                          out_11_ce0,
    input  wire                          out_11_we0,
    input  wire [15:0]                   out_11_d0,
    input  wire [5:0]                    out_12_address0,
    input  wire                          out_12_ce0,
    input  wire                          out_12_we0,
    input  wire [15:0]                   out_12_d0,
    input  wire [5:0]                    out_13_address0,
    input  wire                          out_13_ce0,
    input  wire                          out_13_we0,
    input  wire [15:0]                   out_13_d0,
    input  wire [5:0]                    out_14_address0,
    input  wire                          out_14_ce0,
    input  wire                          out_14_we0,
    input  wire [15:0]                   out_14_d0,
    input  wire [5:0]                    out_15_address0,
    input  wire                          out_15_ce0,
    input  wire                          out_15_we0,
    input  wire [15:0]                   out_15_d0,
    input  wire [5:0]                    out_16_address0,
    input  wire                          out_16_ce0,
    input  wire                          out_16_we0,
    input  wire [15:0]                   out_16_d0,
    input  wire [5:0]                    out_17_address0,
    input  wire                          out_17_ce0,
    input  wire                          out_17_we0,
    input  wire [15:0]                   out_17_d0,
    input  wire [5:0]                    out_18_address0,
    input  wire                          out_18_ce0,
    input  wire                          out_18_we0,
    input  wire [15:0]                   out_18_d0,
    input  wire [5:0]                    out_19_address0,
    input  wire                          out_19_ce0,
    input  wire                          out_19_we0,
    input  wire [15:0]                   out_19_d0,
    input  wire [5:0]                    out_20_address0,
    input  wire                          out_20_ce0,
    input  wire                          out_20_we0,
    input  wire [15:0]                   out_20_d0,
    input  wire [5:0]                    out_21_address0,
    input  wire                          out_21_ce0,
    input  wire                          out_21_we0,
    input  wire [15:0]                   out_21_d0,
    input  wire [5:0]                    out_22_address0,
    input  wire                          out_22_ce0,
    input  wire                          out_22_we0,
    input  wire [15:0]                   out_22_d0,
    input  wire [5:0]                    out_23_address0,
    input  wire                          out_23_ce0,
    input  wire                          out_23_we0,
    input  wire [15:0]                   out_23_d0,
    input  wire [5:0]                    out_24_address0,
    input  wire                          out_24_ce0,
    input  wire                          out_24_we0,
    input  wire [15:0]                   out_24_d0,
    input  wire [5:0]                    out_25_address0,
    input  wire                          out_25_ce0,
    input  wire                          out_25_we0,
    input  wire [15:0]                   out_25_d0,
    input  wire [5:0]                    out_26_address0,
    input  wire                          out_26_ce0,
    input  wire                          out_26_we0,
    input  wire [15:0]                   out_26_d0,
    input  wire [5:0]                    out_27_address0,
    input  wire                          out_27_ce0,
    input  wire                          out_27_we0,
    input  wire [15:0]                   out_27_d0,
    input  wire [5:0]                    out_28_address0,
    input  wire                          out_28_ce0,
    input  wire                          out_28_we0,
    input  wire [15:0]                   out_28_d0,
    input  wire [5:0]                    out_29_address0,
    input  wire                          out_29_ce0,
    input  wire                          out_29_we0,
    input  wire [15:0]                   out_29_d0,
    input  wire [5:0]                    out_30_address0,
    input  wire                          out_30_ce0,
    input  wire                          out_30_we0,
    input  wire [15:0]                   out_30_d0,
    input  wire [5:0]                    out_31_address0,
    input  wire                          out_31_ce0,
    input  wire                          out_31_we0,
    input  wire [15:0]                   out_31_d0,
    input  wire [5:0]                    out_32_address0,
    input  wire                          out_32_ce0,
    input  wire                          out_32_we0,
    input  wire [15:0]                   out_32_d0,
    input  wire [5:0]                    out_33_address0,
    input  wire                          out_33_ce0,
    input  wire                          out_33_we0,
    input  wire [15:0]                   out_33_d0,
    input  wire [5:0]                    out_34_address0,
    input  wire                          out_34_ce0,
    input  wire                          out_34_we0,
    input  wire [15:0]                   out_34_d0,
    input  wire [5:0]                    out_35_address0,
    input  wire                          out_35_ce0,
    input  wire                          out_35_we0,
    input  wire [15:0]                   out_35_d0,
    input  wire [5:0]                    out_36_address0,
    input  wire                          out_36_ce0,
    input  wire                          out_36_we0,
    input  wire [15:0]                   out_36_d0,
    input  wire [5:0]                    out_37_address0,
    input  wire                          out_37_ce0,
    input  wire                          out_37_we0,
    input  wire [15:0]                   out_37_d0,
    input  wire [5:0]                    out_38_address0,
    input  wire                          out_38_ce0,
    input  wire                          out_38_we0,
    input  wire [15:0]                   out_38_d0,
    input  wire [5:0]                    out_39_address0,
    input  wire                          out_39_ce0,
    input  wire                          out_39_we0,
    input  wire [15:0]                   out_39_d0,
    input  wire [5:0]                    out_40_address0,
    input  wire                          out_40_ce0,
    input  wire                          out_40_we0,
    input  wire [15:0]                   out_40_d0,
    input  wire [5:0]                    out_41_address0,
    input  wire                          out_41_ce0,
    input  wire                          out_41_we0,
    input  wire [15:0]                   out_41_d0,
    input  wire [5:0]                    out_42_address0,
    input  wire                          out_42_ce0,
    input  wire                          out_42_we0,
    input  wire [15:0]                   out_42_d0,
    input  wire [5:0]                    out_43_address0,
    input  wire                          out_43_ce0,
    input  wire                          out_43_we0,
    input  wire [15:0]                   out_43_d0,
    input  wire [5:0]                    out_44_address0,
    input  wire                          out_44_ce0,
    input  wire                          out_44_we0,
    input  wire [15:0]                   out_44_d0,
    input  wire [5:0]                    out_45_address0,
    input  wire                          out_45_ce0,
    input  wire                          out_45_we0,
    input  wire [15:0]                   out_45_d0,
    input  wire [5:0]                    out_46_address0,
    input  wire                          out_46_ce0,
    input  wire                          out_46_we0,
    input  wire [15:0]                   out_46_d0,
    input  wire [5:0]                    out_47_address0,
    input  wire                          out_47_ce0,
    input  wire                          out_47_we0,
    input  wire [15:0]                   out_47_d0,
    input  wire [5:0]                    out_48_address0,
    input  wire                          out_48_ce0,
    input  wire                          out_48_we0,
    input  wire [15:0]                   out_48_d0,
    input  wire [5:0]                    out_49_address0,
    input  wire                          out_49_ce0,
    input  wire                          out_49_we0,
    input  wire [15:0]                   out_49_d0,
    input  wire [3:0]                    krnl_address0,
    input  wire                          krnl_ce0,
    output wire [31:0]                   krnl_q0
);
//------------------------Address Info-------------------
// 0x0000 : Control signals
//          bit 0  - ap_start (Read/Write/COH)
//          bit 1  - ap_done (Read/COR)
//          bit 2  - ap_idle (Read)
//          bit 3  - ap_ready (Read)
//          bit 7  - auto_restart (Read/Write)
//          others - reserved
// 0x0004 : Global Interrupt Enable Register
//          bit 0  - Global Interrupt Enable (Read/Write)
//          others - reserved
// 0x0008 : IP Interrupt Enable Register (Read/Write)
//          bit 0  - Channel 0 (ap_done)
//          bit 1  - Channel 1 (ap_ready)
//          others - reserved
// 0x000c : IP Interrupt Status Register (Read/TOW)
//          bit 0  - Channel 0 (ap_done)
//          bit 1  - Channel 1 (ap_ready)
//          others - reserved
// 0x0080 ~
// 0x00ff : Memory 'in_0' (50 * 16b)
//          Word n : bit [15: 0] - in_0[2n]
//                   bit [31:16] - in_0[2n+1]
// 0x0100 ~
// 0x017f : Memory 'in_1' (50 * 16b)
//          Word n : bit [15: 0] - in_1[2n]
//                   bit [31:16] - in_1[2n+1]
// 0x0180 ~
// 0x01ff : Memory 'in_2' (50 * 16b)
//          Word n : bit [15: 0] - in_2[2n]
//                   bit [31:16] - in_2[2n+1]
// 0x0200 ~
// 0x027f : Memory 'in_3' (50 * 16b)
//          Word n : bit [15: 0] - in_3[2n]
//                   bit [31:16] - in_3[2n+1]
// 0x0280 ~
// 0x02ff : Memory 'in_4' (50 * 16b)
//          Word n : bit [15: 0] - in_4[2n]
//                   bit [31:16] - in_4[2n+1]
// 0x0300 ~
// 0x037f : Memory 'in_5' (50 * 16b)
//          Word n : bit [15: 0] - in_5[2n]
//                   bit [31:16] - in_5[2n+1]
// 0x0380 ~
// 0x03ff : Memory 'in_6' (50 * 16b)
//          Word n : bit [15: 0] - in_6[2n]
//                   bit [31:16] - in_6[2n+1]
// 0x0400 ~
// 0x047f : Memory 'in_7' (50 * 16b)
//          Word n : bit [15: 0] - in_7[2n]
//                   bit [31:16] - in_7[2n+1]
// 0x0480 ~
// 0x04ff : Memory 'in_8' (50 * 16b)
//          Word n : bit [15: 0] - in_8[2n]
//                   bit [31:16] - in_8[2n+1]
// 0x0500 ~
// 0x057f : Memory 'in_9' (50 * 16b)
//          Word n : bit [15: 0] - in_9[2n]
//                   bit [31:16] - in_9[2n+1]
// 0x0580 ~
// 0x05ff : Memory 'in_10' (50 * 16b)
//          Word n : bit [15: 0] - in_10[2n]
//                   bit [31:16] - in_10[2n+1]
// 0x0600 ~
// 0x067f : Memory 'in_11' (50 * 16b)
//          Word n : bit [15: 0] - in_11[2n]
//                   bit [31:16] - in_11[2n+1]
// 0x0680 ~
// 0x06ff : Memory 'in_12' (50 * 16b)
//          Word n : bit [15: 0] - in_12[2n]
//                   bit [31:16] - in_12[2n+1]
// 0x0700 ~
// 0x077f : Memory 'in_13' (50 * 16b)
//          Word n : bit [15: 0] - in_13[2n]
//                   bit [31:16] - in_13[2n+1]
// 0x0780 ~
// 0x07ff : Memory 'in_14' (50 * 16b)
//          Word n : bit [15: 0] - in_14[2n]
//                   bit [31:16] - in_14[2n+1]
// 0x0800 ~
// 0x087f : Memory 'in_15' (50 * 16b)
//          Word n : bit [15: 0] - in_15[2n]
//                   bit [31:16] - in_15[2n+1]
// 0x0880 ~
// 0x08ff : Memory 'in_16' (50 * 16b)
//          Word n : bit [15: 0] - in_16[2n]
//                   bit [31:16] - in_16[2n+1]
// 0x0900 ~
// 0x097f : Memory 'in_17' (50 * 16b)
//          Word n : bit [15: 0] - in_17[2n]
//                   bit [31:16] - in_17[2n+1]
// 0x0980 ~
// 0x09ff : Memory 'in_18' (50 * 16b)
//          Word n : bit [15: 0] - in_18[2n]
//                   bit [31:16] - in_18[2n+1]
// 0x0a00 ~
// 0x0a7f : Memory 'in_19' (50 * 16b)
//          Word n : bit [15: 0] - in_19[2n]
//                   bit [31:16] - in_19[2n+1]
// 0x0a80 ~
// 0x0aff : Memory 'in_20' (50 * 16b)
//          Word n : bit [15: 0] - in_20[2n]
//                   bit [31:16] - in_20[2n+1]
// 0x0b00 ~
// 0x0b7f : Memory 'in_21' (50 * 16b)
//          Word n : bit [15: 0] - in_21[2n]
//                   bit [31:16] - in_21[2n+1]
// 0x0b80 ~
// 0x0bff : Memory 'in_22' (50 * 16b)
//          Word n : bit [15: 0] - in_22[2n]
//                   bit [31:16] - in_22[2n+1]
// 0x0c00 ~
// 0x0c7f : Memory 'in_23' (50 * 16b)
//          Word n : bit [15: 0] - in_23[2n]
//                   bit [31:16] - in_23[2n+1]
// 0x0c80 ~
// 0x0cff : Memory 'in_24' (50 * 16b)
//          Word n : bit [15: 0] - in_24[2n]
//                   bit [31:16] - in_24[2n+1]
// 0x0d00 ~
// 0x0d7f : Memory 'in_25' (50 * 16b)
//          Word n : bit [15: 0] - in_25[2n]
//                   bit [31:16] - in_25[2n+1]
// 0x0d80 ~
// 0x0dff : Memory 'in_26' (50 * 16b)
//          Word n : bit [15: 0] - in_26[2n]
//                   bit [31:16] - in_26[2n+1]
// 0x0e00 ~
// 0x0e7f : Memory 'in_27' (50 * 16b)
//          Word n : bit [15: 0] - in_27[2n]
//                   bit [31:16] - in_27[2n+1]
// 0x0e80 ~
// 0x0eff : Memory 'in_28' (50 * 16b)
//          Word n : bit [15: 0] - in_28[2n]
//                   bit [31:16] - in_28[2n+1]
// 0x0f00 ~
// 0x0f7f : Memory 'in_29' (50 * 16b)
//          Word n : bit [15: 0] - in_29[2n]
//                   bit [31:16] - in_29[2n+1]
// 0x0f80 ~
// 0x0fff : Memory 'in_30' (50 * 16b)
//          Word n : bit [15: 0] - in_30[2n]
//                   bit [31:16] - in_30[2n+1]
// 0x1000 ~
// 0x107f : Memory 'in_31' (50 * 16b)
//          Word n : bit [15: 0] - in_31[2n]
//                   bit [31:16] - in_31[2n+1]
// 0x1080 ~
// 0x10ff : Memory 'in_32' (50 * 16b)
//          Word n : bit [15: 0] - in_32[2n]
//                   bit [31:16] - in_32[2n+1]
// 0x1100 ~
// 0x117f : Memory 'in_33' (50 * 16b)
//          Word n : bit [15: 0] - in_33[2n]
//                   bit [31:16] - in_33[2n+1]
// 0x1180 ~
// 0x11ff : Memory 'in_34' (50 * 16b)
//          Word n : bit [15: 0] - in_34[2n]
//                   bit [31:16] - in_34[2n+1]
// 0x1200 ~
// 0x127f : Memory 'in_35' (50 * 16b)
//          Word n : bit [15: 0] - in_35[2n]
//                   bit [31:16] - in_35[2n+1]
// 0x1280 ~
// 0x12ff : Memory 'in_36' (50 * 16b)
//          Word n : bit [15: 0] - in_36[2n]
//                   bit [31:16] - in_36[2n+1]
// 0x1300 ~
// 0x137f : Memory 'in_37' (50 * 16b)
//          Word n : bit [15: 0] - in_37[2n]
//                   bit [31:16] - in_37[2n+1]
// 0x1380 ~
// 0x13ff : Memory 'in_38' (50 * 16b)
//          Word n : bit [15: 0] - in_38[2n]
//                   bit [31:16] - in_38[2n+1]
// 0x1400 ~
// 0x147f : Memory 'in_39' (50 * 16b)
//          Word n : bit [15: 0] - in_39[2n]
//                   bit [31:16] - in_39[2n+1]
// 0x1480 ~
// 0x14ff : Memory 'in_40' (50 * 16b)
//          Word n : bit [15: 0] - in_40[2n]
//                   bit [31:16] - in_40[2n+1]
// 0x1500 ~
// 0x157f : Memory 'in_41' (50 * 16b)
//          Word n : bit [15: 0] - in_41[2n]
//                   bit [31:16] - in_41[2n+1]
// 0x1580 ~
// 0x15ff : Memory 'in_42' (50 * 16b)
//          Word n : bit [15: 0] - in_42[2n]
//                   bit [31:16] - in_42[2n+1]
// 0x1600 ~
// 0x167f : Memory 'in_43' (50 * 16b)
//          Word n : bit [15: 0] - in_43[2n]
//                   bit [31:16] - in_43[2n+1]
// 0x1680 ~
// 0x16ff : Memory 'in_44' (50 * 16b)
//          Word n : bit [15: 0] - in_44[2n]
//                   bit [31:16] - in_44[2n+1]
// 0x1700 ~
// 0x177f : Memory 'in_45' (50 * 16b)
//          Word n : bit [15: 0] - in_45[2n]
//                   bit [31:16] - in_45[2n+1]
// 0x1780 ~
// 0x17ff : Memory 'in_46' (50 * 16b)
//          Word n : bit [15: 0] - in_46[2n]
//                   bit [31:16] - in_46[2n+1]
// 0x1800 ~
// 0x187f : Memory 'in_47' (50 * 16b)
//          Word n : bit [15: 0] - in_47[2n]
//                   bit [31:16] - in_47[2n+1]
// 0x1880 ~
// 0x18ff : Memory 'in_48' (50 * 16b)
//          Word n : bit [15: 0] - in_48[2n]
//                   bit [31:16] - in_48[2n+1]
// 0x1900 ~
// 0x197f : Memory 'in_49' (50 * 16b)
//          Word n : bit [15: 0] - in_49[2n]
//                   bit [31:16] - in_49[2n+1]
// 0x1980 ~
// 0x19ff : Memory 'out_0' (50 * 16b)
//          Word n : bit [15: 0] - out_0[2n]
//                   bit [31:16] - out_0[2n+1]
// 0x1a00 ~
// 0x1a7f : Memory 'out_1' (50 * 16b)
//          Word n : bit [15: 0] - out_1[2n]
//                   bit [31:16] - out_1[2n+1]
// 0x1a80 ~
// 0x1aff : Memory 'out_2' (50 * 16b)
//          Word n : bit [15: 0] - out_2[2n]
//                   bit [31:16] - out_2[2n+1]
// 0x1b00 ~
// 0x1b7f : Memory 'out_3' (50 * 16b)
//          Word n : bit [15: 0] - out_3[2n]
//                   bit [31:16] - out_3[2n+1]
// 0x1b80 ~
// 0x1bff : Memory 'out_4' (50 * 16b)
//          Word n : bit [15: 0] - out_4[2n]
//                   bit [31:16] - out_4[2n+1]
// 0x1c00 ~
// 0x1c7f : Memory 'out_5' (50 * 16b)
//          Word n : bit [15: 0] - out_5[2n]
//                   bit [31:16] - out_5[2n+1]
// 0x1c80 ~
// 0x1cff : Memory 'out_6' (50 * 16b)
//          Word n : bit [15: 0] - out_6[2n]
//                   bit [31:16] - out_6[2n+1]
// 0x1d00 ~
// 0x1d7f : Memory 'out_7' (50 * 16b)
//          Word n : bit [15: 0] - out_7[2n]
//                   bit [31:16] - out_7[2n+1]
// 0x1d80 ~
// 0x1dff : Memory 'out_8' (50 * 16b)
//          Word n : bit [15: 0] - out_8[2n]
//                   bit [31:16] - out_8[2n+1]
// 0x1e00 ~
// 0x1e7f : Memory 'out_9' (50 * 16b)
//          Word n : bit [15: 0] - out_9[2n]
//                   bit [31:16] - out_9[2n+1]
// 0x1e80 ~
// 0x1eff : Memory 'out_10' (50 * 16b)
//          Word n : bit [15: 0] - out_10[2n]
//                   bit [31:16] - out_10[2n+1]
// 0x1f00 ~
// 0x1f7f : Memory 'out_11' (50 * 16b)
//          Word n : bit [15: 0] - out_11[2n]
//                   bit [31:16] - out_11[2n+1]
// 0x1f80 ~
// 0x1fff : Memory 'out_12' (50 * 16b)
//          Word n : bit [15: 0] - out_12[2n]
//                   bit [31:16] - out_12[2n+1]
// 0x2000 ~
// 0x207f : Memory 'out_13' (50 * 16b)
//          Word n : bit [15: 0] - out_13[2n]
//                   bit [31:16] - out_13[2n+1]
// 0x2080 ~
// 0x20ff : Memory 'out_14' (50 * 16b)
//          Word n : bit [15: 0] - out_14[2n]
//                   bit [31:16] - out_14[2n+1]
// 0x2100 ~
// 0x217f : Memory 'out_15' (50 * 16b)
//          Word n : bit [15: 0] - out_15[2n]
//                   bit [31:16] - out_15[2n+1]
// 0x2180 ~
// 0x21ff : Memory 'out_16' (50 * 16b)
//          Word n : bit [15: 0] - out_16[2n]
//                   bit [31:16] - out_16[2n+1]
// 0x2200 ~
// 0x227f : Memory 'out_17' (50 * 16b)
//          Word n : bit [15: 0] - out_17[2n]
//                   bit [31:16] - out_17[2n+1]
// 0x2280 ~
// 0x22ff : Memory 'out_18' (50 * 16b)
//          Word n : bit [15: 0] - out_18[2n]
//                   bit [31:16] - out_18[2n+1]
// 0x2300 ~
// 0x237f : Memory 'out_19' (50 * 16b)
//          Word n : bit [15: 0] - out_19[2n]
//                   bit [31:16] - out_19[2n+1]
// 0x2380 ~
// 0x23ff : Memory 'out_20' (50 * 16b)
//          Word n : bit [15: 0] - out_20[2n]
//                   bit [31:16] - out_20[2n+1]
// 0x2400 ~
// 0x247f : Memory 'out_21' (50 * 16b)
//          Word n : bit [15: 0] - out_21[2n]
//                   bit [31:16] - out_21[2n+1]
// 0x2480 ~
// 0x24ff : Memory 'out_22' (50 * 16b)
//          Word n : bit [15: 0] - out_22[2n]
//                   bit [31:16] - out_22[2n+1]
// 0x2500 ~
// 0x257f : Memory 'out_23' (50 * 16b)
//          Word n : bit [15: 0] - out_23[2n]
//                   bit [31:16] - out_23[2n+1]
// 0x2580 ~
// 0x25ff : Memory 'out_24' (50 * 16b)
//          Word n : bit [15: 0] - out_24[2n]
//                   bit [31:16] - out_24[2n+1]
// 0x2600 ~
// 0x267f : Memory 'out_25' (50 * 16b)
//          Word n : bit [15: 0] - out_25[2n]
//                   bit [31:16] - out_25[2n+1]
// 0x2680 ~
// 0x26ff : Memory 'out_26' (50 * 16b)
//          Word n : bit [15: 0] - out_26[2n]
//                   bit [31:16] - out_26[2n+1]
// 0x2700 ~
// 0x277f : Memory 'out_27' (50 * 16b)
//          Word n : bit [15: 0] - out_27[2n]
//                   bit [31:16] - out_27[2n+1]
// 0x2780 ~
// 0x27ff : Memory 'out_28' (50 * 16b)
//          Word n : bit [15: 0] - out_28[2n]
//                   bit [31:16] - out_28[2n+1]
// 0x2800 ~
// 0x287f : Memory 'out_29' (50 * 16b)
//          Word n : bit [15: 0] - out_29[2n]
//                   bit [31:16] - out_29[2n+1]
// 0x2880 ~
// 0x28ff : Memory 'out_30' (50 * 16b)
//          Word n : bit [15: 0] - out_30[2n]
//                   bit [31:16] - out_30[2n+1]
// 0x2900 ~
// 0x297f : Memory 'out_31' (50 * 16b)
//          Word n : bit [15: 0] - out_31[2n]
//                   bit [31:16] - out_31[2n+1]
// 0x2980 ~
// 0x29ff : Memory 'out_32' (50 * 16b)
//          Word n : bit [15: 0] - out_32[2n]
//                   bit [31:16] - out_32[2n+1]
// 0x2a00 ~
// 0x2a7f : Memory 'out_33' (50 * 16b)
//          Word n : bit [15: 0] - out_33[2n]
//                   bit [31:16] - out_33[2n+1]
// 0x2a80 ~
// 0x2aff : Memory 'out_34' (50 * 16b)
//          Word n : bit [15: 0] - out_34[2n]
//                   bit [31:16] - out_34[2n+1]
// 0x2b00 ~
// 0x2b7f : Memory 'out_35' (50 * 16b)
//          Word n : bit [15: 0] - out_35[2n]
//                   bit [31:16] - out_35[2n+1]
// 0x2b80 ~
// 0x2bff : Memory 'out_36' (50 * 16b)
//          Word n : bit [15: 0] - out_36[2n]
//                   bit [31:16] - out_36[2n+1]
// 0x2c00 ~
// 0x2c7f : Memory 'out_37' (50 * 16b)
//          Word n : bit [15: 0] - out_37[2n]
//                   bit [31:16] - out_37[2n+1]
// 0x2c80 ~
// 0x2cff : Memory 'out_38' (50 * 16b)
//          Word n : bit [15: 0] - out_38[2n]
//                   bit [31:16] - out_38[2n+1]
// 0x2d00 ~
// 0x2d7f : Memory 'out_39' (50 * 16b)
//          Word n : bit [15: 0] - out_39[2n]
//                   bit [31:16] - out_39[2n+1]
// 0x2d80 ~
// 0x2dff : Memory 'out_40' (50 * 16b)
//          Word n : bit [15: 0] - out_40[2n]
//                   bit [31:16] - out_40[2n+1]
// 0x2e00 ~
// 0x2e7f : Memory 'out_41' (50 * 16b)
//          Word n : bit [15: 0] - out_41[2n]
//                   bit [31:16] - out_41[2n+1]
// 0x2e80 ~
// 0x2eff : Memory 'out_42' (50 * 16b)
//          Word n : bit [15: 0] - out_42[2n]
//                   bit [31:16] - out_42[2n+1]
// 0x2f00 ~
// 0x2f7f : Memory 'out_43' (50 * 16b)
//          Word n : bit [15: 0] - out_43[2n]
//                   bit [31:16] - out_43[2n+1]
// 0x2f80 ~
// 0x2fff : Memory 'out_44' (50 * 16b)
//          Word n : bit [15: 0] - out_44[2n]
//                   bit [31:16] - out_44[2n+1]
// 0x3000 ~
// 0x307f : Memory 'out_45' (50 * 16b)
//          Word n : bit [15: 0] - out_45[2n]
//                   bit [31:16] - out_45[2n+1]
// 0x3080 ~
// 0x30ff : Memory 'out_46' (50 * 16b)
//          Word n : bit [15: 0] - out_46[2n]
//                   bit [31:16] - out_46[2n+1]
// 0x3100 ~
// 0x317f : Memory 'out_47' (50 * 16b)
//          Word n : bit [15: 0] - out_47[2n]
//                   bit [31:16] - out_47[2n+1]
// 0x3180 ~
// 0x31ff : Memory 'out_48' (50 * 16b)
//          Word n : bit [15: 0] - out_48[2n]
//                   bit [31:16] - out_48[2n+1]
// 0x3200 ~
// 0x327f : Memory 'out_49' (50 * 16b)
//          Word n : bit [15: 0] - out_49[2n]
//                   bit [31:16] - out_49[2n+1]
// 0x3280 ~
// 0x32bf : Memory 'krnl' (9 * 32b)
//          Word n : bit [31:0] - krnl[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL     = 14'h0000,
    ADDR_GIE         = 14'h0004,
    ADDR_IER         = 14'h0008,
    ADDR_ISR         = 14'h000c,
    ADDR_IN_0_BASE   = 14'h0080,
    ADDR_IN_0_HIGH   = 14'h00ff,
    ADDR_IN_1_BASE   = 14'h0100,
    ADDR_IN_1_HIGH   = 14'h017f,
    ADDR_IN_2_BASE   = 14'h0180,
    ADDR_IN_2_HIGH   = 14'h01ff,
    ADDR_IN_3_BASE   = 14'h0200,
    ADDR_IN_3_HIGH   = 14'h027f,
    ADDR_IN_4_BASE   = 14'h0280,
    ADDR_IN_4_HIGH   = 14'h02ff,
    ADDR_IN_5_BASE   = 14'h0300,
    ADDR_IN_5_HIGH   = 14'h037f,
    ADDR_IN_6_BASE   = 14'h0380,
    ADDR_IN_6_HIGH   = 14'h03ff,
    ADDR_IN_7_BASE   = 14'h0400,
    ADDR_IN_7_HIGH   = 14'h047f,
    ADDR_IN_8_BASE   = 14'h0480,
    ADDR_IN_8_HIGH   = 14'h04ff,
    ADDR_IN_9_BASE   = 14'h0500,
    ADDR_IN_9_HIGH   = 14'h057f,
    ADDR_IN_10_BASE  = 14'h0580,
    ADDR_IN_10_HIGH  = 14'h05ff,
    ADDR_IN_11_BASE  = 14'h0600,
    ADDR_IN_11_HIGH  = 14'h067f,
    ADDR_IN_12_BASE  = 14'h0680,
    ADDR_IN_12_HIGH  = 14'h06ff,
    ADDR_IN_13_BASE  = 14'h0700,
    ADDR_IN_13_HIGH  = 14'h077f,
    ADDR_IN_14_BASE  = 14'h0780,
    ADDR_IN_14_HIGH  = 14'h07ff,
    ADDR_IN_15_BASE  = 14'h0800,
    ADDR_IN_15_HIGH  = 14'h087f,
    ADDR_IN_16_BASE  = 14'h0880,
    ADDR_IN_16_HIGH  = 14'h08ff,
    ADDR_IN_17_BASE  = 14'h0900,
    ADDR_IN_17_HIGH  = 14'h097f,
    ADDR_IN_18_BASE  = 14'h0980,
    ADDR_IN_18_HIGH  = 14'h09ff,
    ADDR_IN_19_BASE  = 14'h0a00,
    ADDR_IN_19_HIGH  = 14'h0a7f,
    ADDR_IN_20_BASE  = 14'h0a80,
    ADDR_IN_20_HIGH  = 14'h0aff,
    ADDR_IN_21_BASE  = 14'h0b00,
    ADDR_IN_21_HIGH  = 14'h0b7f,
    ADDR_IN_22_BASE  = 14'h0b80,
    ADDR_IN_22_HIGH  = 14'h0bff,
    ADDR_IN_23_BASE  = 14'h0c00,
    ADDR_IN_23_HIGH  = 14'h0c7f,
    ADDR_IN_24_BASE  = 14'h0c80,
    ADDR_IN_24_HIGH  = 14'h0cff,
    ADDR_IN_25_BASE  = 14'h0d00,
    ADDR_IN_25_HIGH  = 14'h0d7f,
    ADDR_IN_26_BASE  = 14'h0d80,
    ADDR_IN_26_HIGH  = 14'h0dff,
    ADDR_IN_27_BASE  = 14'h0e00,
    ADDR_IN_27_HIGH  = 14'h0e7f,
    ADDR_IN_28_BASE  = 14'h0e80,
    ADDR_IN_28_HIGH  = 14'h0eff,
    ADDR_IN_29_BASE  = 14'h0f00,
    ADDR_IN_29_HIGH  = 14'h0f7f,
    ADDR_IN_30_BASE  = 14'h0f80,
    ADDR_IN_30_HIGH  = 14'h0fff,
    ADDR_IN_31_BASE  = 14'h1000,
    ADDR_IN_31_HIGH  = 14'h107f,
    ADDR_IN_32_BASE  = 14'h1080,
    ADDR_IN_32_HIGH  = 14'h10ff,
    ADDR_IN_33_BASE  = 14'h1100,
    ADDR_IN_33_HIGH  = 14'h117f,
    ADDR_IN_34_BASE  = 14'h1180,
    ADDR_IN_34_HIGH  = 14'h11ff,
    ADDR_IN_35_BASE  = 14'h1200,
    ADDR_IN_35_HIGH  = 14'h127f,
    ADDR_IN_36_BASE  = 14'h1280,
    ADDR_IN_36_HIGH  = 14'h12ff,
    ADDR_IN_37_BASE  = 14'h1300,
    ADDR_IN_37_HIGH  = 14'h137f,
    ADDR_IN_38_BASE  = 14'h1380,
    ADDR_IN_38_HIGH  = 14'h13ff,
    ADDR_IN_39_BASE  = 14'h1400,
    ADDR_IN_39_HIGH  = 14'h147f,
    ADDR_IN_40_BASE  = 14'h1480,
    ADDR_IN_40_HIGH  = 14'h14ff,
    ADDR_IN_41_BASE  = 14'h1500,
    ADDR_IN_41_HIGH  = 14'h157f,
    ADDR_IN_42_BASE  = 14'h1580,
    ADDR_IN_42_HIGH  = 14'h15ff,
    ADDR_IN_43_BASE  = 14'h1600,
    ADDR_IN_43_HIGH  = 14'h167f,
    ADDR_IN_44_BASE  = 14'h1680,
    ADDR_IN_44_HIGH  = 14'h16ff,
    ADDR_IN_45_BASE  = 14'h1700,
    ADDR_IN_45_HIGH  = 14'h177f,
    ADDR_IN_46_BASE  = 14'h1780,
    ADDR_IN_46_HIGH  = 14'h17ff,
    ADDR_IN_47_BASE  = 14'h1800,
    ADDR_IN_47_HIGH  = 14'h187f,
    ADDR_IN_48_BASE  = 14'h1880,
    ADDR_IN_48_HIGH  = 14'h18ff,
    ADDR_IN_49_BASE  = 14'h1900,
    ADDR_IN_49_HIGH  = 14'h197f,
    ADDR_OUT_0_BASE  = 14'h1980,
    ADDR_OUT_0_HIGH  = 14'h19ff,
    ADDR_OUT_1_BASE  = 14'h1a00,
    ADDR_OUT_1_HIGH  = 14'h1a7f,
    ADDR_OUT_2_BASE  = 14'h1a80,
    ADDR_OUT_2_HIGH  = 14'h1aff,
    ADDR_OUT_3_BASE  = 14'h1b00,
    ADDR_OUT_3_HIGH  = 14'h1b7f,
    ADDR_OUT_4_BASE  = 14'h1b80,
    ADDR_OUT_4_HIGH  = 14'h1bff,
    ADDR_OUT_5_BASE  = 14'h1c00,
    ADDR_OUT_5_HIGH  = 14'h1c7f,
    ADDR_OUT_6_BASE  = 14'h1c80,
    ADDR_OUT_6_HIGH  = 14'h1cff,
    ADDR_OUT_7_BASE  = 14'h1d00,
    ADDR_OUT_7_HIGH  = 14'h1d7f,
    ADDR_OUT_8_BASE  = 14'h1d80,
    ADDR_OUT_8_HIGH  = 14'h1dff,
    ADDR_OUT_9_BASE  = 14'h1e00,
    ADDR_OUT_9_HIGH  = 14'h1e7f,
    ADDR_OUT_10_BASE = 14'h1e80,
    ADDR_OUT_10_HIGH = 14'h1eff,
    ADDR_OUT_11_BASE = 14'h1f00,
    ADDR_OUT_11_HIGH = 14'h1f7f,
    ADDR_OUT_12_BASE = 14'h1f80,
    ADDR_OUT_12_HIGH = 14'h1fff,
    ADDR_OUT_13_BASE = 14'h2000,
    ADDR_OUT_13_HIGH = 14'h207f,
    ADDR_OUT_14_BASE = 14'h2080,
    ADDR_OUT_14_HIGH = 14'h20ff,
    ADDR_OUT_15_BASE = 14'h2100,
    ADDR_OUT_15_HIGH = 14'h217f,
    ADDR_OUT_16_BASE = 14'h2180,
    ADDR_OUT_16_HIGH = 14'h21ff,
    ADDR_OUT_17_BASE = 14'h2200,
    ADDR_OUT_17_HIGH = 14'h227f,
    ADDR_OUT_18_BASE = 14'h2280,
    ADDR_OUT_18_HIGH = 14'h22ff,
    ADDR_OUT_19_BASE = 14'h2300,
    ADDR_OUT_19_HIGH = 14'h237f,
    ADDR_OUT_20_BASE = 14'h2380,
    ADDR_OUT_20_HIGH = 14'h23ff,
    ADDR_OUT_21_BASE = 14'h2400,
    ADDR_OUT_21_HIGH = 14'h247f,
    ADDR_OUT_22_BASE = 14'h2480,
    ADDR_OUT_22_HIGH = 14'h24ff,
    ADDR_OUT_23_BASE = 14'h2500,
    ADDR_OUT_23_HIGH = 14'h257f,
    ADDR_OUT_24_BASE = 14'h2580,
    ADDR_OUT_24_HIGH = 14'h25ff,
    ADDR_OUT_25_BASE = 14'h2600,
    ADDR_OUT_25_HIGH = 14'h267f,
    ADDR_OUT_26_BASE = 14'h2680,
    ADDR_OUT_26_HIGH = 14'h26ff,
    ADDR_OUT_27_BASE = 14'h2700,
    ADDR_OUT_27_HIGH = 14'h277f,
    ADDR_OUT_28_BASE = 14'h2780,
    ADDR_OUT_28_HIGH = 14'h27ff,
    ADDR_OUT_29_BASE = 14'h2800,
    ADDR_OUT_29_HIGH = 14'h287f,
    ADDR_OUT_30_BASE = 14'h2880,
    ADDR_OUT_30_HIGH = 14'h28ff,
    ADDR_OUT_31_BASE = 14'h2900,
    ADDR_OUT_31_HIGH = 14'h297f,
    ADDR_OUT_32_BASE = 14'h2980,
    ADDR_OUT_32_HIGH = 14'h29ff,
    ADDR_OUT_33_BASE = 14'h2a00,
    ADDR_OUT_33_HIGH = 14'h2a7f,
    ADDR_OUT_34_BASE = 14'h2a80,
    ADDR_OUT_34_HIGH = 14'h2aff,
    ADDR_OUT_35_BASE = 14'h2b00,
    ADDR_OUT_35_HIGH = 14'h2b7f,
    ADDR_OUT_36_BASE = 14'h2b80,
    ADDR_OUT_36_HIGH = 14'h2bff,
    ADDR_OUT_37_BASE = 14'h2c00,
    ADDR_OUT_37_HIGH = 14'h2c7f,
    ADDR_OUT_38_BASE = 14'h2c80,
    ADDR_OUT_38_HIGH = 14'h2cff,
    ADDR_OUT_39_BASE = 14'h2d00,
    ADDR_OUT_39_HIGH = 14'h2d7f,
    ADDR_OUT_40_BASE = 14'h2d80,
    ADDR_OUT_40_HIGH = 14'h2dff,
    ADDR_OUT_41_BASE = 14'h2e00,
    ADDR_OUT_41_HIGH = 14'h2e7f,
    ADDR_OUT_42_BASE = 14'h2e80,
    ADDR_OUT_42_HIGH = 14'h2eff,
    ADDR_OUT_43_BASE = 14'h2f00,
    ADDR_OUT_43_HIGH = 14'h2f7f,
    ADDR_OUT_44_BASE = 14'h2f80,
    ADDR_OUT_44_HIGH = 14'h2fff,
    ADDR_OUT_45_BASE = 14'h3000,
    ADDR_OUT_45_HIGH = 14'h307f,
    ADDR_OUT_46_BASE = 14'h3080,
    ADDR_OUT_46_HIGH = 14'h30ff,
    ADDR_OUT_47_BASE = 14'h3100,
    ADDR_OUT_47_HIGH = 14'h317f,
    ADDR_OUT_48_BASE = 14'h3180,
    ADDR_OUT_48_HIGH = 14'h31ff,
    ADDR_OUT_49_BASE = 14'h3200,
    ADDR_OUT_49_HIGH = 14'h327f,
    ADDR_KRNL_BASE   = 14'h3280,
    ADDR_KRNL_HIGH   = 14'h32bf,
    WRIDLE           = 2'd0,
    WRDATA           = 2'd1,
    WRRESP           = 2'd2,
    WRRESET          = 2'd3,
    RDIDLE           = 2'd0,
    RDDATA           = 2'd1,
    RDRESET          = 2'd2,
    ADDR_BITS         = 14;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    // memory signals
    wire [4:0]                    int_in_0_address0;
    wire                          int_in_0_ce0;
    wire                          int_in_0_we0;
    wire [3:0]                    int_in_0_be0;
    wire [31:0]                   int_in_0_d0;
    wire [31:0]                   int_in_0_q0;
    wire [4:0]                    int_in_0_address1;
    wire                          int_in_0_ce1;
    wire                          int_in_0_we1;
    wire [3:0]                    int_in_0_be1;
    wire [31:0]                   int_in_0_d1;
    wire [31:0]                   int_in_0_q1;
    reg                           int_in_0_read;
    reg                           int_in_0_write;
    reg  [0:0]                    int_in_0_shift;
    wire [4:0]                    int_in_1_address0;
    wire                          int_in_1_ce0;
    wire                          int_in_1_we0;
    wire [3:0]                    int_in_1_be0;
    wire [31:0]                   int_in_1_d0;
    wire [31:0]                   int_in_1_q0;
    wire [4:0]                    int_in_1_address1;
    wire                          int_in_1_ce1;
    wire                          int_in_1_we1;
    wire [3:0]                    int_in_1_be1;
    wire [31:0]                   int_in_1_d1;
    wire [31:0]                   int_in_1_q1;
    reg                           int_in_1_read;
    reg                           int_in_1_write;
    reg  [0:0]                    int_in_1_shift;
    wire [4:0]                    int_in_2_address0;
    wire                          int_in_2_ce0;
    wire                          int_in_2_we0;
    wire [3:0]                    int_in_2_be0;
    wire [31:0]                   int_in_2_d0;
    wire [31:0]                   int_in_2_q0;
    wire [4:0]                    int_in_2_address1;
    wire                          int_in_2_ce1;
    wire                          int_in_2_we1;
    wire [3:0]                    int_in_2_be1;
    wire [31:0]                   int_in_2_d1;
    wire [31:0]                   int_in_2_q1;
    reg                           int_in_2_read;
    reg                           int_in_2_write;
    reg  [0:0]                    int_in_2_shift;
    wire [4:0]                    int_in_3_address0;
    wire                          int_in_3_ce0;
    wire                          int_in_3_we0;
    wire [3:0]                    int_in_3_be0;
    wire [31:0]                   int_in_3_d0;
    wire [31:0]                   int_in_3_q0;
    wire [4:0]                    int_in_3_address1;
    wire                          int_in_3_ce1;
    wire                          int_in_3_we1;
    wire [3:0]                    int_in_3_be1;
    wire [31:0]                   int_in_3_d1;
    wire [31:0]                   int_in_3_q1;
    reg                           int_in_3_read;
    reg                           int_in_3_write;
    reg  [0:0]                    int_in_3_shift;
    wire [4:0]                    int_in_4_address0;
    wire                          int_in_4_ce0;
    wire                          int_in_4_we0;
    wire [3:0]                    int_in_4_be0;
    wire [31:0]                   int_in_4_d0;
    wire [31:0]                   int_in_4_q0;
    wire [4:0]                    int_in_4_address1;
    wire                          int_in_4_ce1;
    wire                          int_in_4_we1;
    wire [3:0]                    int_in_4_be1;
    wire [31:0]                   int_in_4_d1;
    wire [31:0]                   int_in_4_q1;
    reg                           int_in_4_read;
    reg                           int_in_4_write;
    reg  [0:0]                    int_in_4_shift;
    wire [4:0]                    int_in_5_address0;
    wire                          int_in_5_ce0;
    wire                          int_in_5_we0;
    wire [3:0]                    int_in_5_be0;
    wire [31:0]                   int_in_5_d0;
    wire [31:0]                   int_in_5_q0;
    wire [4:0]                    int_in_5_address1;
    wire                          int_in_5_ce1;
    wire                          int_in_5_we1;
    wire [3:0]                    int_in_5_be1;
    wire [31:0]                   int_in_5_d1;
    wire [31:0]                   int_in_5_q1;
    reg                           int_in_5_read;
    reg                           int_in_5_write;
    reg  [0:0]                    int_in_5_shift;
    wire [4:0]                    int_in_6_address0;
    wire                          int_in_6_ce0;
    wire                          int_in_6_we0;
    wire [3:0]                    int_in_6_be0;
    wire [31:0]                   int_in_6_d0;
    wire [31:0]                   int_in_6_q0;
    wire [4:0]                    int_in_6_address1;
    wire                          int_in_6_ce1;
    wire                          int_in_6_we1;
    wire [3:0]                    int_in_6_be1;
    wire [31:0]                   int_in_6_d1;
    wire [31:0]                   int_in_6_q1;
    reg                           int_in_6_read;
    reg                           int_in_6_write;
    reg  [0:0]                    int_in_6_shift;
    wire [4:0]                    int_in_7_address0;
    wire                          int_in_7_ce0;
    wire                          int_in_7_we0;
    wire [3:0]                    int_in_7_be0;
    wire [31:0]                   int_in_7_d0;
    wire [31:0]                   int_in_7_q0;
    wire [4:0]                    int_in_7_address1;
    wire                          int_in_7_ce1;
    wire                          int_in_7_we1;
    wire [3:0]                    int_in_7_be1;
    wire [31:0]                   int_in_7_d1;
    wire [31:0]                   int_in_7_q1;
    reg                           int_in_7_read;
    reg                           int_in_7_write;
    reg  [0:0]                    int_in_7_shift;
    wire [4:0]                    int_in_8_address0;
    wire                          int_in_8_ce0;
    wire                          int_in_8_we0;
    wire [3:0]                    int_in_8_be0;
    wire [31:0]                   int_in_8_d0;
    wire [31:0]                   int_in_8_q0;
    wire [4:0]                    int_in_8_address1;
    wire                          int_in_8_ce1;
    wire                          int_in_8_we1;
    wire [3:0]                    int_in_8_be1;
    wire [31:0]                   int_in_8_d1;
    wire [31:0]                   int_in_8_q1;
    reg                           int_in_8_read;
    reg                           int_in_8_write;
    reg  [0:0]                    int_in_8_shift;
    wire [4:0]                    int_in_9_address0;
    wire                          int_in_9_ce0;
    wire                          int_in_9_we0;
    wire [3:0]                    int_in_9_be0;
    wire [31:0]                   int_in_9_d0;
    wire [31:0]                   int_in_9_q0;
    wire [4:0]                    int_in_9_address1;
    wire                          int_in_9_ce1;
    wire                          int_in_9_we1;
    wire [3:0]                    int_in_9_be1;
    wire [31:0]                   int_in_9_d1;
    wire [31:0]                   int_in_9_q1;
    reg                           int_in_9_read;
    reg                           int_in_9_write;
    reg  [0:0]                    int_in_9_shift;
    wire [4:0]                    int_in_10_address0;
    wire                          int_in_10_ce0;
    wire                          int_in_10_we0;
    wire [3:0]                    int_in_10_be0;
    wire [31:0]                   int_in_10_d0;
    wire [31:0]                   int_in_10_q0;
    wire [4:0]                    int_in_10_address1;
    wire                          int_in_10_ce1;
    wire                          int_in_10_we1;
    wire [3:0]                    int_in_10_be1;
    wire [31:0]                   int_in_10_d1;
    wire [31:0]                   int_in_10_q1;
    reg                           int_in_10_read;
    reg                           int_in_10_write;
    reg  [0:0]                    int_in_10_shift;
    wire [4:0]                    int_in_11_address0;
    wire                          int_in_11_ce0;
    wire                          int_in_11_we0;
    wire [3:0]                    int_in_11_be0;
    wire [31:0]                   int_in_11_d0;
    wire [31:0]                   int_in_11_q0;
    wire [4:0]                    int_in_11_address1;
    wire                          int_in_11_ce1;
    wire                          int_in_11_we1;
    wire [3:0]                    int_in_11_be1;
    wire [31:0]                   int_in_11_d1;
    wire [31:0]                   int_in_11_q1;
    reg                           int_in_11_read;
    reg                           int_in_11_write;
    reg  [0:0]                    int_in_11_shift;
    wire [4:0]                    int_in_12_address0;
    wire                          int_in_12_ce0;
    wire                          int_in_12_we0;
    wire [3:0]                    int_in_12_be0;
    wire [31:0]                   int_in_12_d0;
    wire [31:0]                   int_in_12_q0;
    wire [4:0]                    int_in_12_address1;
    wire                          int_in_12_ce1;
    wire                          int_in_12_we1;
    wire [3:0]                    int_in_12_be1;
    wire [31:0]                   int_in_12_d1;
    wire [31:0]                   int_in_12_q1;
    reg                           int_in_12_read;
    reg                           int_in_12_write;
    reg  [0:0]                    int_in_12_shift;
    wire [4:0]                    int_in_13_address0;
    wire                          int_in_13_ce0;
    wire                          int_in_13_we0;
    wire [3:0]                    int_in_13_be0;
    wire [31:0]                   int_in_13_d0;
    wire [31:0]                   int_in_13_q0;
    wire [4:0]                    int_in_13_address1;
    wire                          int_in_13_ce1;
    wire                          int_in_13_we1;
    wire [3:0]                    int_in_13_be1;
    wire [31:0]                   int_in_13_d1;
    wire [31:0]                   int_in_13_q1;
    reg                           int_in_13_read;
    reg                           int_in_13_write;
    reg  [0:0]                    int_in_13_shift;
    wire [4:0]                    int_in_14_address0;
    wire                          int_in_14_ce0;
    wire                          int_in_14_we0;
    wire [3:0]                    int_in_14_be0;
    wire [31:0]                   int_in_14_d0;
    wire [31:0]                   int_in_14_q0;
    wire [4:0]                    int_in_14_address1;
    wire                          int_in_14_ce1;
    wire                          int_in_14_we1;
    wire [3:0]                    int_in_14_be1;
    wire [31:0]                   int_in_14_d1;
    wire [31:0]                   int_in_14_q1;
    reg                           int_in_14_read;
    reg                           int_in_14_write;
    reg  [0:0]                    int_in_14_shift;
    wire [4:0]                    int_in_15_address0;
    wire                          int_in_15_ce0;
    wire                          int_in_15_we0;
    wire [3:0]                    int_in_15_be0;
    wire [31:0]                   int_in_15_d0;
    wire [31:0]                   int_in_15_q0;
    wire [4:0]                    int_in_15_address1;
    wire                          int_in_15_ce1;
    wire                          int_in_15_we1;
    wire [3:0]                    int_in_15_be1;
    wire [31:0]                   int_in_15_d1;
    wire [31:0]                   int_in_15_q1;
    reg                           int_in_15_read;
    reg                           int_in_15_write;
    reg  [0:0]                    int_in_15_shift;
    wire [4:0]                    int_in_16_address0;
    wire                          int_in_16_ce0;
    wire                          int_in_16_we0;
    wire [3:0]                    int_in_16_be0;
    wire [31:0]                   int_in_16_d0;
    wire [31:0]                   int_in_16_q0;
    wire [4:0]                    int_in_16_address1;
    wire                          int_in_16_ce1;
    wire                          int_in_16_we1;
    wire [3:0]                    int_in_16_be1;
    wire [31:0]                   int_in_16_d1;
    wire [31:0]                   int_in_16_q1;
    reg                           int_in_16_read;
    reg                           int_in_16_write;
    reg  [0:0]                    int_in_16_shift;
    wire [4:0]                    int_in_17_address0;
    wire                          int_in_17_ce0;
    wire                          int_in_17_we0;
    wire [3:0]                    int_in_17_be0;
    wire [31:0]                   int_in_17_d0;
    wire [31:0]                   int_in_17_q0;
    wire [4:0]                    int_in_17_address1;
    wire                          int_in_17_ce1;
    wire                          int_in_17_we1;
    wire [3:0]                    int_in_17_be1;
    wire [31:0]                   int_in_17_d1;
    wire [31:0]                   int_in_17_q1;
    reg                           int_in_17_read;
    reg                           int_in_17_write;
    reg  [0:0]                    int_in_17_shift;
    wire [4:0]                    int_in_18_address0;
    wire                          int_in_18_ce0;
    wire                          int_in_18_we0;
    wire [3:0]                    int_in_18_be0;
    wire [31:0]                   int_in_18_d0;
    wire [31:0]                   int_in_18_q0;
    wire [4:0]                    int_in_18_address1;
    wire                          int_in_18_ce1;
    wire                          int_in_18_we1;
    wire [3:0]                    int_in_18_be1;
    wire [31:0]                   int_in_18_d1;
    wire [31:0]                   int_in_18_q1;
    reg                           int_in_18_read;
    reg                           int_in_18_write;
    reg  [0:0]                    int_in_18_shift;
    wire [4:0]                    int_in_19_address0;
    wire                          int_in_19_ce0;
    wire                          int_in_19_we0;
    wire [3:0]                    int_in_19_be0;
    wire [31:0]                   int_in_19_d0;
    wire [31:0]                   int_in_19_q0;
    wire [4:0]                    int_in_19_address1;
    wire                          int_in_19_ce1;
    wire                          int_in_19_we1;
    wire [3:0]                    int_in_19_be1;
    wire [31:0]                   int_in_19_d1;
    wire [31:0]                   int_in_19_q1;
    reg                           int_in_19_read;
    reg                           int_in_19_write;
    reg  [0:0]                    int_in_19_shift;
    wire [4:0]                    int_in_20_address0;
    wire                          int_in_20_ce0;
    wire                          int_in_20_we0;
    wire [3:0]                    int_in_20_be0;
    wire [31:0]                   int_in_20_d0;
    wire [31:0]                   int_in_20_q0;
    wire [4:0]                    int_in_20_address1;
    wire                          int_in_20_ce1;
    wire                          int_in_20_we1;
    wire [3:0]                    int_in_20_be1;
    wire [31:0]                   int_in_20_d1;
    wire [31:0]                   int_in_20_q1;
    reg                           int_in_20_read;
    reg                           int_in_20_write;
    reg  [0:0]                    int_in_20_shift;
    wire [4:0]                    int_in_21_address0;
    wire                          int_in_21_ce0;
    wire                          int_in_21_we0;
    wire [3:0]                    int_in_21_be0;
    wire [31:0]                   int_in_21_d0;
    wire [31:0]                   int_in_21_q0;
    wire [4:0]                    int_in_21_address1;
    wire                          int_in_21_ce1;
    wire                          int_in_21_we1;
    wire [3:0]                    int_in_21_be1;
    wire [31:0]                   int_in_21_d1;
    wire [31:0]                   int_in_21_q1;
    reg                           int_in_21_read;
    reg                           int_in_21_write;
    reg  [0:0]                    int_in_21_shift;
    wire [4:0]                    int_in_22_address0;
    wire                          int_in_22_ce0;
    wire                          int_in_22_we0;
    wire [3:0]                    int_in_22_be0;
    wire [31:0]                   int_in_22_d0;
    wire [31:0]                   int_in_22_q0;
    wire [4:0]                    int_in_22_address1;
    wire                          int_in_22_ce1;
    wire                          int_in_22_we1;
    wire [3:0]                    int_in_22_be1;
    wire [31:0]                   int_in_22_d1;
    wire [31:0]                   int_in_22_q1;
    reg                           int_in_22_read;
    reg                           int_in_22_write;
    reg  [0:0]                    int_in_22_shift;
    wire [4:0]                    int_in_23_address0;
    wire                          int_in_23_ce0;
    wire                          int_in_23_we0;
    wire [3:0]                    int_in_23_be0;
    wire [31:0]                   int_in_23_d0;
    wire [31:0]                   int_in_23_q0;
    wire [4:0]                    int_in_23_address1;
    wire                          int_in_23_ce1;
    wire                          int_in_23_we1;
    wire [3:0]                    int_in_23_be1;
    wire [31:0]                   int_in_23_d1;
    wire [31:0]                   int_in_23_q1;
    reg                           int_in_23_read;
    reg                           int_in_23_write;
    reg  [0:0]                    int_in_23_shift;
    wire [4:0]                    int_in_24_address0;
    wire                          int_in_24_ce0;
    wire                          int_in_24_we0;
    wire [3:0]                    int_in_24_be0;
    wire [31:0]                   int_in_24_d0;
    wire [31:0]                   int_in_24_q0;
    wire [4:0]                    int_in_24_address1;
    wire                          int_in_24_ce1;
    wire                          int_in_24_we1;
    wire [3:0]                    int_in_24_be1;
    wire [31:0]                   int_in_24_d1;
    wire [31:0]                   int_in_24_q1;
    reg                           int_in_24_read;
    reg                           int_in_24_write;
    reg  [0:0]                    int_in_24_shift;
    wire [4:0]                    int_in_25_address0;
    wire                          int_in_25_ce0;
    wire                          int_in_25_we0;
    wire [3:0]                    int_in_25_be0;
    wire [31:0]                   int_in_25_d0;
    wire [31:0]                   int_in_25_q0;
    wire [4:0]                    int_in_25_address1;
    wire                          int_in_25_ce1;
    wire                          int_in_25_we1;
    wire [3:0]                    int_in_25_be1;
    wire [31:0]                   int_in_25_d1;
    wire [31:0]                   int_in_25_q1;
    reg                           int_in_25_read;
    reg                           int_in_25_write;
    reg  [0:0]                    int_in_25_shift;
    wire [4:0]                    int_in_26_address0;
    wire                          int_in_26_ce0;
    wire                          int_in_26_we0;
    wire [3:0]                    int_in_26_be0;
    wire [31:0]                   int_in_26_d0;
    wire [31:0]                   int_in_26_q0;
    wire [4:0]                    int_in_26_address1;
    wire                          int_in_26_ce1;
    wire                          int_in_26_we1;
    wire [3:0]                    int_in_26_be1;
    wire [31:0]                   int_in_26_d1;
    wire [31:0]                   int_in_26_q1;
    reg                           int_in_26_read;
    reg                           int_in_26_write;
    reg  [0:0]                    int_in_26_shift;
    wire [4:0]                    int_in_27_address0;
    wire                          int_in_27_ce0;
    wire                          int_in_27_we0;
    wire [3:0]                    int_in_27_be0;
    wire [31:0]                   int_in_27_d0;
    wire [31:0]                   int_in_27_q0;
    wire [4:0]                    int_in_27_address1;
    wire                          int_in_27_ce1;
    wire                          int_in_27_we1;
    wire [3:0]                    int_in_27_be1;
    wire [31:0]                   int_in_27_d1;
    wire [31:0]                   int_in_27_q1;
    reg                           int_in_27_read;
    reg                           int_in_27_write;
    reg  [0:0]                    int_in_27_shift;
    wire [4:0]                    int_in_28_address0;
    wire                          int_in_28_ce0;
    wire                          int_in_28_we0;
    wire [3:0]                    int_in_28_be0;
    wire [31:0]                   int_in_28_d0;
    wire [31:0]                   int_in_28_q0;
    wire [4:0]                    int_in_28_address1;
    wire                          int_in_28_ce1;
    wire                          int_in_28_we1;
    wire [3:0]                    int_in_28_be1;
    wire [31:0]                   int_in_28_d1;
    wire [31:0]                   int_in_28_q1;
    reg                           int_in_28_read;
    reg                           int_in_28_write;
    reg  [0:0]                    int_in_28_shift;
    wire [4:0]                    int_in_29_address0;
    wire                          int_in_29_ce0;
    wire                          int_in_29_we0;
    wire [3:0]                    int_in_29_be0;
    wire [31:0]                   int_in_29_d0;
    wire [31:0]                   int_in_29_q0;
    wire [4:0]                    int_in_29_address1;
    wire                          int_in_29_ce1;
    wire                          int_in_29_we1;
    wire [3:0]                    int_in_29_be1;
    wire [31:0]                   int_in_29_d1;
    wire [31:0]                   int_in_29_q1;
    reg                           int_in_29_read;
    reg                           int_in_29_write;
    reg  [0:0]                    int_in_29_shift;
    wire [4:0]                    int_in_30_address0;
    wire                          int_in_30_ce0;
    wire                          int_in_30_we0;
    wire [3:0]                    int_in_30_be0;
    wire [31:0]                   int_in_30_d0;
    wire [31:0]                   int_in_30_q0;
    wire [4:0]                    int_in_30_address1;
    wire                          int_in_30_ce1;
    wire                          int_in_30_we1;
    wire [3:0]                    int_in_30_be1;
    wire [31:0]                   int_in_30_d1;
    wire [31:0]                   int_in_30_q1;
    reg                           int_in_30_read;
    reg                           int_in_30_write;
    reg  [0:0]                    int_in_30_shift;
    wire [4:0]                    int_in_31_address0;
    wire                          int_in_31_ce0;
    wire                          int_in_31_we0;
    wire [3:0]                    int_in_31_be0;
    wire [31:0]                   int_in_31_d0;
    wire [31:0]                   int_in_31_q0;
    wire [4:0]                    int_in_31_address1;
    wire                          int_in_31_ce1;
    wire                          int_in_31_we1;
    wire [3:0]                    int_in_31_be1;
    wire [31:0]                   int_in_31_d1;
    wire [31:0]                   int_in_31_q1;
    reg                           int_in_31_read;
    reg                           int_in_31_write;
    reg  [0:0]                    int_in_31_shift;
    wire [4:0]                    int_in_32_address0;
    wire                          int_in_32_ce0;
    wire                          int_in_32_we0;
    wire [3:0]                    int_in_32_be0;
    wire [31:0]                   int_in_32_d0;
    wire [31:0]                   int_in_32_q0;
    wire [4:0]                    int_in_32_address1;
    wire                          int_in_32_ce1;
    wire                          int_in_32_we1;
    wire [3:0]                    int_in_32_be1;
    wire [31:0]                   int_in_32_d1;
    wire [31:0]                   int_in_32_q1;
    reg                           int_in_32_read;
    reg                           int_in_32_write;
    reg  [0:0]                    int_in_32_shift;
    wire [4:0]                    int_in_33_address0;
    wire                          int_in_33_ce0;
    wire                          int_in_33_we0;
    wire [3:0]                    int_in_33_be0;
    wire [31:0]                   int_in_33_d0;
    wire [31:0]                   int_in_33_q0;
    wire [4:0]                    int_in_33_address1;
    wire                          int_in_33_ce1;
    wire                          int_in_33_we1;
    wire [3:0]                    int_in_33_be1;
    wire [31:0]                   int_in_33_d1;
    wire [31:0]                   int_in_33_q1;
    reg                           int_in_33_read;
    reg                           int_in_33_write;
    reg  [0:0]                    int_in_33_shift;
    wire [4:0]                    int_in_34_address0;
    wire                          int_in_34_ce0;
    wire                          int_in_34_we0;
    wire [3:0]                    int_in_34_be0;
    wire [31:0]                   int_in_34_d0;
    wire [31:0]                   int_in_34_q0;
    wire [4:0]                    int_in_34_address1;
    wire                          int_in_34_ce1;
    wire                          int_in_34_we1;
    wire [3:0]                    int_in_34_be1;
    wire [31:0]                   int_in_34_d1;
    wire [31:0]                   int_in_34_q1;
    reg                           int_in_34_read;
    reg                           int_in_34_write;
    reg  [0:0]                    int_in_34_shift;
    wire [4:0]                    int_in_35_address0;
    wire                          int_in_35_ce0;
    wire                          int_in_35_we0;
    wire [3:0]                    int_in_35_be0;
    wire [31:0]                   int_in_35_d0;
    wire [31:0]                   int_in_35_q0;
    wire [4:0]                    int_in_35_address1;
    wire                          int_in_35_ce1;
    wire                          int_in_35_we1;
    wire [3:0]                    int_in_35_be1;
    wire [31:0]                   int_in_35_d1;
    wire [31:0]                   int_in_35_q1;
    reg                           int_in_35_read;
    reg                           int_in_35_write;
    reg  [0:0]                    int_in_35_shift;
    wire [4:0]                    int_in_36_address0;
    wire                          int_in_36_ce0;
    wire                          int_in_36_we0;
    wire [3:0]                    int_in_36_be0;
    wire [31:0]                   int_in_36_d0;
    wire [31:0]                   int_in_36_q0;
    wire [4:0]                    int_in_36_address1;
    wire                          int_in_36_ce1;
    wire                          int_in_36_we1;
    wire [3:0]                    int_in_36_be1;
    wire [31:0]                   int_in_36_d1;
    wire [31:0]                   int_in_36_q1;
    reg                           int_in_36_read;
    reg                           int_in_36_write;
    reg  [0:0]                    int_in_36_shift;
    wire [4:0]                    int_in_37_address0;
    wire                          int_in_37_ce0;
    wire                          int_in_37_we0;
    wire [3:0]                    int_in_37_be0;
    wire [31:0]                   int_in_37_d0;
    wire [31:0]                   int_in_37_q0;
    wire [4:0]                    int_in_37_address1;
    wire                          int_in_37_ce1;
    wire                          int_in_37_we1;
    wire [3:0]                    int_in_37_be1;
    wire [31:0]                   int_in_37_d1;
    wire [31:0]                   int_in_37_q1;
    reg                           int_in_37_read;
    reg                           int_in_37_write;
    reg  [0:0]                    int_in_37_shift;
    wire [4:0]                    int_in_38_address0;
    wire                          int_in_38_ce0;
    wire                          int_in_38_we0;
    wire [3:0]                    int_in_38_be0;
    wire [31:0]                   int_in_38_d0;
    wire [31:0]                   int_in_38_q0;
    wire [4:0]                    int_in_38_address1;
    wire                          int_in_38_ce1;
    wire                          int_in_38_we1;
    wire [3:0]                    int_in_38_be1;
    wire [31:0]                   int_in_38_d1;
    wire [31:0]                   int_in_38_q1;
    reg                           int_in_38_read;
    reg                           int_in_38_write;
    reg  [0:0]                    int_in_38_shift;
    wire [4:0]                    int_in_39_address0;
    wire                          int_in_39_ce0;
    wire                          int_in_39_we0;
    wire [3:0]                    int_in_39_be0;
    wire [31:0]                   int_in_39_d0;
    wire [31:0]                   int_in_39_q0;
    wire [4:0]                    int_in_39_address1;
    wire                          int_in_39_ce1;
    wire                          int_in_39_we1;
    wire [3:0]                    int_in_39_be1;
    wire [31:0]                   int_in_39_d1;
    wire [31:0]                   int_in_39_q1;
    reg                           int_in_39_read;
    reg                           int_in_39_write;
    reg  [0:0]                    int_in_39_shift;
    wire [4:0]                    int_in_40_address0;
    wire                          int_in_40_ce0;
    wire                          int_in_40_we0;
    wire [3:0]                    int_in_40_be0;
    wire [31:0]                   int_in_40_d0;
    wire [31:0]                   int_in_40_q0;
    wire [4:0]                    int_in_40_address1;
    wire                          int_in_40_ce1;
    wire                          int_in_40_we1;
    wire [3:0]                    int_in_40_be1;
    wire [31:0]                   int_in_40_d1;
    wire [31:0]                   int_in_40_q1;
    reg                           int_in_40_read;
    reg                           int_in_40_write;
    reg  [0:0]                    int_in_40_shift;
    wire [4:0]                    int_in_41_address0;
    wire                          int_in_41_ce0;
    wire                          int_in_41_we0;
    wire [3:0]                    int_in_41_be0;
    wire [31:0]                   int_in_41_d0;
    wire [31:0]                   int_in_41_q0;
    wire [4:0]                    int_in_41_address1;
    wire                          int_in_41_ce1;
    wire                          int_in_41_we1;
    wire [3:0]                    int_in_41_be1;
    wire [31:0]                   int_in_41_d1;
    wire [31:0]                   int_in_41_q1;
    reg                           int_in_41_read;
    reg                           int_in_41_write;
    reg  [0:0]                    int_in_41_shift;
    wire [4:0]                    int_in_42_address0;
    wire                          int_in_42_ce0;
    wire                          int_in_42_we0;
    wire [3:0]                    int_in_42_be0;
    wire [31:0]                   int_in_42_d0;
    wire [31:0]                   int_in_42_q0;
    wire [4:0]                    int_in_42_address1;
    wire                          int_in_42_ce1;
    wire                          int_in_42_we1;
    wire [3:0]                    int_in_42_be1;
    wire [31:0]                   int_in_42_d1;
    wire [31:0]                   int_in_42_q1;
    reg                           int_in_42_read;
    reg                           int_in_42_write;
    reg  [0:0]                    int_in_42_shift;
    wire [4:0]                    int_in_43_address0;
    wire                          int_in_43_ce0;
    wire                          int_in_43_we0;
    wire [3:0]                    int_in_43_be0;
    wire [31:0]                   int_in_43_d0;
    wire [31:0]                   int_in_43_q0;
    wire [4:0]                    int_in_43_address1;
    wire                          int_in_43_ce1;
    wire                          int_in_43_we1;
    wire [3:0]                    int_in_43_be1;
    wire [31:0]                   int_in_43_d1;
    wire [31:0]                   int_in_43_q1;
    reg                           int_in_43_read;
    reg                           int_in_43_write;
    reg  [0:0]                    int_in_43_shift;
    wire [4:0]                    int_in_44_address0;
    wire                          int_in_44_ce0;
    wire                          int_in_44_we0;
    wire [3:0]                    int_in_44_be0;
    wire [31:0]                   int_in_44_d0;
    wire [31:0]                   int_in_44_q0;
    wire [4:0]                    int_in_44_address1;
    wire                          int_in_44_ce1;
    wire                          int_in_44_we1;
    wire [3:0]                    int_in_44_be1;
    wire [31:0]                   int_in_44_d1;
    wire [31:0]                   int_in_44_q1;
    reg                           int_in_44_read;
    reg                           int_in_44_write;
    reg  [0:0]                    int_in_44_shift;
    wire [4:0]                    int_in_45_address0;
    wire                          int_in_45_ce0;
    wire                          int_in_45_we0;
    wire [3:0]                    int_in_45_be0;
    wire [31:0]                   int_in_45_d0;
    wire [31:0]                   int_in_45_q0;
    wire [4:0]                    int_in_45_address1;
    wire                          int_in_45_ce1;
    wire                          int_in_45_we1;
    wire [3:0]                    int_in_45_be1;
    wire [31:0]                   int_in_45_d1;
    wire [31:0]                   int_in_45_q1;
    reg                           int_in_45_read;
    reg                           int_in_45_write;
    reg  [0:0]                    int_in_45_shift;
    wire [4:0]                    int_in_46_address0;
    wire                          int_in_46_ce0;
    wire                          int_in_46_we0;
    wire [3:0]                    int_in_46_be0;
    wire [31:0]                   int_in_46_d0;
    wire [31:0]                   int_in_46_q0;
    wire [4:0]                    int_in_46_address1;
    wire                          int_in_46_ce1;
    wire                          int_in_46_we1;
    wire [3:0]                    int_in_46_be1;
    wire [31:0]                   int_in_46_d1;
    wire [31:0]                   int_in_46_q1;
    reg                           int_in_46_read;
    reg                           int_in_46_write;
    reg  [0:0]                    int_in_46_shift;
    wire [4:0]                    int_in_47_address0;
    wire                          int_in_47_ce0;
    wire                          int_in_47_we0;
    wire [3:0]                    int_in_47_be0;
    wire [31:0]                   int_in_47_d0;
    wire [31:0]                   int_in_47_q0;
    wire [4:0]                    int_in_47_address1;
    wire                          int_in_47_ce1;
    wire                          int_in_47_we1;
    wire [3:0]                    int_in_47_be1;
    wire [31:0]                   int_in_47_d1;
    wire [31:0]                   int_in_47_q1;
    reg                           int_in_47_read;
    reg                           int_in_47_write;
    reg  [0:0]                    int_in_47_shift;
    wire [4:0]                    int_in_48_address0;
    wire                          int_in_48_ce0;
    wire                          int_in_48_we0;
    wire [3:0]                    int_in_48_be0;
    wire [31:0]                   int_in_48_d0;
    wire [31:0]                   int_in_48_q0;
    wire [4:0]                    int_in_48_address1;
    wire                          int_in_48_ce1;
    wire                          int_in_48_we1;
    wire [3:0]                    int_in_48_be1;
    wire [31:0]                   int_in_48_d1;
    wire [31:0]                   int_in_48_q1;
    reg                           int_in_48_read;
    reg                           int_in_48_write;
    reg  [0:0]                    int_in_48_shift;
    wire [4:0]                    int_in_49_address0;
    wire                          int_in_49_ce0;
    wire                          int_in_49_we0;
    wire [3:0]                    int_in_49_be0;
    wire [31:0]                   int_in_49_d0;
    wire [31:0]                   int_in_49_q0;
    wire [4:0]                    int_in_49_address1;
    wire                          int_in_49_ce1;
    wire                          int_in_49_we1;
    wire [3:0]                    int_in_49_be1;
    wire [31:0]                   int_in_49_d1;
    wire [31:0]                   int_in_49_q1;
    reg                           int_in_49_read;
    reg                           int_in_49_write;
    reg  [0:0]                    int_in_49_shift;
    wire [4:0]                    int_out_0_address0;
    wire                          int_out_0_ce0;
    wire                          int_out_0_we0;
    wire [3:0]                    int_out_0_be0;
    wire [31:0]                   int_out_0_d0;
    wire [31:0]                   int_out_0_q0;
    wire [4:0]                    int_out_0_address1;
    wire                          int_out_0_ce1;
    wire                          int_out_0_we1;
    wire [3:0]                    int_out_0_be1;
    wire [31:0]                   int_out_0_d1;
    wire [31:0]                   int_out_0_q1;
    reg                           int_out_0_read;
    reg                           int_out_0_write;
    reg  [0:0]                    int_out_0_shift;
    wire [4:0]                    int_out_1_address0;
    wire                          int_out_1_ce0;
    wire                          int_out_1_we0;
    wire [3:0]                    int_out_1_be0;
    wire [31:0]                   int_out_1_d0;
    wire [31:0]                   int_out_1_q0;
    wire [4:0]                    int_out_1_address1;
    wire                          int_out_1_ce1;
    wire                          int_out_1_we1;
    wire [3:0]                    int_out_1_be1;
    wire [31:0]                   int_out_1_d1;
    wire [31:0]                   int_out_1_q1;
    reg                           int_out_1_read;
    reg                           int_out_1_write;
    reg  [0:0]                    int_out_1_shift;
    wire [4:0]                    int_out_2_address0;
    wire                          int_out_2_ce0;
    wire                          int_out_2_we0;
    wire [3:0]                    int_out_2_be0;
    wire [31:0]                   int_out_2_d0;
    wire [31:0]                   int_out_2_q0;
    wire [4:0]                    int_out_2_address1;
    wire                          int_out_2_ce1;
    wire                          int_out_2_we1;
    wire [3:0]                    int_out_2_be1;
    wire [31:0]                   int_out_2_d1;
    wire [31:0]                   int_out_2_q1;
    reg                           int_out_2_read;
    reg                           int_out_2_write;
    reg  [0:0]                    int_out_2_shift;
    wire [4:0]                    int_out_3_address0;
    wire                          int_out_3_ce0;
    wire                          int_out_3_we0;
    wire [3:0]                    int_out_3_be0;
    wire [31:0]                   int_out_3_d0;
    wire [31:0]                   int_out_3_q0;
    wire [4:0]                    int_out_3_address1;
    wire                          int_out_3_ce1;
    wire                          int_out_3_we1;
    wire [3:0]                    int_out_3_be1;
    wire [31:0]                   int_out_3_d1;
    wire [31:0]                   int_out_3_q1;
    reg                           int_out_3_read;
    reg                           int_out_3_write;
    reg  [0:0]                    int_out_3_shift;
    wire [4:0]                    int_out_4_address0;
    wire                          int_out_4_ce0;
    wire                          int_out_4_we0;
    wire [3:0]                    int_out_4_be0;
    wire [31:0]                   int_out_4_d0;
    wire [31:0]                   int_out_4_q0;
    wire [4:0]                    int_out_4_address1;
    wire                          int_out_4_ce1;
    wire                          int_out_4_we1;
    wire [3:0]                    int_out_4_be1;
    wire [31:0]                   int_out_4_d1;
    wire [31:0]                   int_out_4_q1;
    reg                           int_out_4_read;
    reg                           int_out_4_write;
    reg  [0:0]                    int_out_4_shift;
    wire [4:0]                    int_out_5_address0;
    wire                          int_out_5_ce0;
    wire                          int_out_5_we0;
    wire [3:0]                    int_out_5_be0;
    wire [31:0]                   int_out_5_d0;
    wire [31:0]                   int_out_5_q0;
    wire [4:0]                    int_out_5_address1;
    wire                          int_out_5_ce1;
    wire                          int_out_5_we1;
    wire [3:0]                    int_out_5_be1;
    wire [31:0]                   int_out_5_d1;
    wire [31:0]                   int_out_5_q1;
    reg                           int_out_5_read;
    reg                           int_out_5_write;
    reg  [0:0]                    int_out_5_shift;
    wire [4:0]                    int_out_6_address0;
    wire                          int_out_6_ce0;
    wire                          int_out_6_we0;
    wire [3:0]                    int_out_6_be0;
    wire [31:0]                   int_out_6_d0;
    wire [31:0]                   int_out_6_q0;
    wire [4:0]                    int_out_6_address1;
    wire                          int_out_6_ce1;
    wire                          int_out_6_we1;
    wire [3:0]                    int_out_6_be1;
    wire [31:0]                   int_out_6_d1;
    wire [31:0]                   int_out_6_q1;
    reg                           int_out_6_read;
    reg                           int_out_6_write;
    reg  [0:0]                    int_out_6_shift;
    wire [4:0]                    int_out_7_address0;
    wire                          int_out_7_ce0;
    wire                          int_out_7_we0;
    wire [3:0]                    int_out_7_be0;
    wire [31:0]                   int_out_7_d0;
    wire [31:0]                   int_out_7_q0;
    wire [4:0]                    int_out_7_address1;
    wire                          int_out_7_ce1;
    wire                          int_out_7_we1;
    wire [3:0]                    int_out_7_be1;
    wire [31:0]                   int_out_7_d1;
    wire [31:0]                   int_out_7_q1;
    reg                           int_out_7_read;
    reg                           int_out_7_write;
    reg  [0:0]                    int_out_7_shift;
    wire [4:0]                    int_out_8_address0;
    wire                          int_out_8_ce0;
    wire                          int_out_8_we0;
    wire [3:0]                    int_out_8_be0;
    wire [31:0]                   int_out_8_d0;
    wire [31:0]                   int_out_8_q0;
    wire [4:0]                    int_out_8_address1;
    wire                          int_out_8_ce1;
    wire                          int_out_8_we1;
    wire [3:0]                    int_out_8_be1;
    wire [31:0]                   int_out_8_d1;
    wire [31:0]                   int_out_8_q1;
    reg                           int_out_8_read;
    reg                           int_out_8_write;
    reg  [0:0]                    int_out_8_shift;
    wire [4:0]                    int_out_9_address0;
    wire                          int_out_9_ce0;
    wire                          int_out_9_we0;
    wire [3:0]                    int_out_9_be0;
    wire [31:0]                   int_out_9_d0;
    wire [31:0]                   int_out_9_q0;
    wire [4:0]                    int_out_9_address1;
    wire                          int_out_9_ce1;
    wire                          int_out_9_we1;
    wire [3:0]                    int_out_9_be1;
    wire [31:0]                   int_out_9_d1;
    wire [31:0]                   int_out_9_q1;
    reg                           int_out_9_read;
    reg                           int_out_9_write;
    reg  [0:0]                    int_out_9_shift;
    wire [4:0]                    int_out_10_address0;
    wire                          int_out_10_ce0;
    wire                          int_out_10_we0;
    wire [3:0]                    int_out_10_be0;
    wire [31:0]                   int_out_10_d0;
    wire [31:0]                   int_out_10_q0;
    wire [4:0]                    int_out_10_address1;
    wire                          int_out_10_ce1;
    wire                          int_out_10_we1;
    wire [3:0]                    int_out_10_be1;
    wire [31:0]                   int_out_10_d1;
    wire [31:0]                   int_out_10_q1;
    reg                           int_out_10_read;
    reg                           int_out_10_write;
    reg  [0:0]                    int_out_10_shift;
    wire [4:0]                    int_out_11_address0;
    wire                          int_out_11_ce0;
    wire                          int_out_11_we0;
    wire [3:0]                    int_out_11_be0;
    wire [31:0]                   int_out_11_d0;
    wire [31:0]                   int_out_11_q0;
    wire [4:0]                    int_out_11_address1;
    wire                          int_out_11_ce1;
    wire                          int_out_11_we1;
    wire [3:0]                    int_out_11_be1;
    wire [31:0]                   int_out_11_d1;
    wire [31:0]                   int_out_11_q1;
    reg                           int_out_11_read;
    reg                           int_out_11_write;
    reg  [0:0]                    int_out_11_shift;
    wire [4:0]                    int_out_12_address0;
    wire                          int_out_12_ce0;
    wire                          int_out_12_we0;
    wire [3:0]                    int_out_12_be0;
    wire [31:0]                   int_out_12_d0;
    wire [31:0]                   int_out_12_q0;
    wire [4:0]                    int_out_12_address1;
    wire                          int_out_12_ce1;
    wire                          int_out_12_we1;
    wire [3:0]                    int_out_12_be1;
    wire [31:0]                   int_out_12_d1;
    wire [31:0]                   int_out_12_q1;
    reg                           int_out_12_read;
    reg                           int_out_12_write;
    reg  [0:0]                    int_out_12_shift;
    wire [4:0]                    int_out_13_address0;
    wire                          int_out_13_ce0;
    wire                          int_out_13_we0;
    wire [3:0]                    int_out_13_be0;
    wire [31:0]                   int_out_13_d0;
    wire [31:0]                   int_out_13_q0;
    wire [4:0]                    int_out_13_address1;
    wire                          int_out_13_ce1;
    wire                          int_out_13_we1;
    wire [3:0]                    int_out_13_be1;
    wire [31:0]                   int_out_13_d1;
    wire [31:0]                   int_out_13_q1;
    reg                           int_out_13_read;
    reg                           int_out_13_write;
    reg  [0:0]                    int_out_13_shift;
    wire [4:0]                    int_out_14_address0;
    wire                          int_out_14_ce0;
    wire                          int_out_14_we0;
    wire [3:0]                    int_out_14_be0;
    wire [31:0]                   int_out_14_d0;
    wire [31:0]                   int_out_14_q0;
    wire [4:0]                    int_out_14_address1;
    wire                          int_out_14_ce1;
    wire                          int_out_14_we1;
    wire [3:0]                    int_out_14_be1;
    wire [31:0]                   int_out_14_d1;
    wire [31:0]                   int_out_14_q1;
    reg                           int_out_14_read;
    reg                           int_out_14_write;
    reg  [0:0]                    int_out_14_shift;
    wire [4:0]                    int_out_15_address0;
    wire                          int_out_15_ce0;
    wire                          int_out_15_we0;
    wire [3:0]                    int_out_15_be0;
    wire [31:0]                   int_out_15_d0;
    wire [31:0]                   int_out_15_q0;
    wire [4:0]                    int_out_15_address1;
    wire                          int_out_15_ce1;
    wire                          int_out_15_we1;
    wire [3:0]                    int_out_15_be1;
    wire [31:0]                   int_out_15_d1;
    wire [31:0]                   int_out_15_q1;
    reg                           int_out_15_read;
    reg                           int_out_15_write;
    reg  [0:0]                    int_out_15_shift;
    wire [4:0]                    int_out_16_address0;
    wire                          int_out_16_ce0;
    wire                          int_out_16_we0;
    wire [3:0]                    int_out_16_be0;
    wire [31:0]                   int_out_16_d0;
    wire [31:0]                   int_out_16_q0;
    wire [4:0]                    int_out_16_address1;
    wire                          int_out_16_ce1;
    wire                          int_out_16_we1;
    wire [3:0]                    int_out_16_be1;
    wire [31:0]                   int_out_16_d1;
    wire [31:0]                   int_out_16_q1;
    reg                           int_out_16_read;
    reg                           int_out_16_write;
    reg  [0:0]                    int_out_16_shift;
    wire [4:0]                    int_out_17_address0;
    wire                          int_out_17_ce0;
    wire                          int_out_17_we0;
    wire [3:0]                    int_out_17_be0;
    wire [31:0]                   int_out_17_d0;
    wire [31:0]                   int_out_17_q0;
    wire [4:0]                    int_out_17_address1;
    wire                          int_out_17_ce1;
    wire                          int_out_17_we1;
    wire [3:0]                    int_out_17_be1;
    wire [31:0]                   int_out_17_d1;
    wire [31:0]                   int_out_17_q1;
    reg                           int_out_17_read;
    reg                           int_out_17_write;
    reg  [0:0]                    int_out_17_shift;
    wire [4:0]                    int_out_18_address0;
    wire                          int_out_18_ce0;
    wire                          int_out_18_we0;
    wire [3:0]                    int_out_18_be0;
    wire [31:0]                   int_out_18_d0;
    wire [31:0]                   int_out_18_q0;
    wire [4:0]                    int_out_18_address1;
    wire                          int_out_18_ce1;
    wire                          int_out_18_we1;
    wire [3:0]                    int_out_18_be1;
    wire [31:0]                   int_out_18_d1;
    wire [31:0]                   int_out_18_q1;
    reg                           int_out_18_read;
    reg                           int_out_18_write;
    reg  [0:0]                    int_out_18_shift;
    wire [4:0]                    int_out_19_address0;
    wire                          int_out_19_ce0;
    wire                          int_out_19_we0;
    wire [3:0]                    int_out_19_be0;
    wire [31:0]                   int_out_19_d0;
    wire [31:0]                   int_out_19_q0;
    wire [4:0]                    int_out_19_address1;
    wire                          int_out_19_ce1;
    wire                          int_out_19_we1;
    wire [3:0]                    int_out_19_be1;
    wire [31:0]                   int_out_19_d1;
    wire [31:0]                   int_out_19_q1;
    reg                           int_out_19_read;
    reg                           int_out_19_write;
    reg  [0:0]                    int_out_19_shift;
    wire [4:0]                    int_out_20_address0;
    wire                          int_out_20_ce0;
    wire                          int_out_20_we0;
    wire [3:0]                    int_out_20_be0;
    wire [31:0]                   int_out_20_d0;
    wire [31:0]                   int_out_20_q0;
    wire [4:0]                    int_out_20_address1;
    wire                          int_out_20_ce1;
    wire                          int_out_20_we1;
    wire [3:0]                    int_out_20_be1;
    wire [31:0]                   int_out_20_d1;
    wire [31:0]                   int_out_20_q1;
    reg                           int_out_20_read;
    reg                           int_out_20_write;
    reg  [0:0]                    int_out_20_shift;
    wire [4:0]                    int_out_21_address0;
    wire                          int_out_21_ce0;
    wire                          int_out_21_we0;
    wire [3:0]                    int_out_21_be0;
    wire [31:0]                   int_out_21_d0;
    wire [31:0]                   int_out_21_q0;
    wire [4:0]                    int_out_21_address1;
    wire                          int_out_21_ce1;
    wire                          int_out_21_we1;
    wire [3:0]                    int_out_21_be1;
    wire [31:0]                   int_out_21_d1;
    wire [31:0]                   int_out_21_q1;
    reg                           int_out_21_read;
    reg                           int_out_21_write;
    reg  [0:0]                    int_out_21_shift;
    wire [4:0]                    int_out_22_address0;
    wire                          int_out_22_ce0;
    wire                          int_out_22_we0;
    wire [3:0]                    int_out_22_be0;
    wire [31:0]                   int_out_22_d0;
    wire [31:0]                   int_out_22_q0;
    wire [4:0]                    int_out_22_address1;
    wire                          int_out_22_ce1;
    wire                          int_out_22_we1;
    wire [3:0]                    int_out_22_be1;
    wire [31:0]                   int_out_22_d1;
    wire [31:0]                   int_out_22_q1;
    reg                           int_out_22_read;
    reg                           int_out_22_write;
    reg  [0:0]                    int_out_22_shift;
    wire [4:0]                    int_out_23_address0;
    wire                          int_out_23_ce0;
    wire                          int_out_23_we0;
    wire [3:0]                    int_out_23_be0;
    wire [31:0]                   int_out_23_d0;
    wire [31:0]                   int_out_23_q0;
    wire [4:0]                    int_out_23_address1;
    wire                          int_out_23_ce1;
    wire                          int_out_23_we1;
    wire [3:0]                    int_out_23_be1;
    wire [31:0]                   int_out_23_d1;
    wire [31:0]                   int_out_23_q1;
    reg                           int_out_23_read;
    reg                           int_out_23_write;
    reg  [0:0]                    int_out_23_shift;
    wire [4:0]                    int_out_24_address0;
    wire                          int_out_24_ce0;
    wire                          int_out_24_we0;
    wire [3:0]                    int_out_24_be0;
    wire [31:0]                   int_out_24_d0;
    wire [31:0]                   int_out_24_q0;
    wire [4:0]                    int_out_24_address1;
    wire                          int_out_24_ce1;
    wire                          int_out_24_we1;
    wire [3:0]                    int_out_24_be1;
    wire [31:0]                   int_out_24_d1;
    wire [31:0]                   int_out_24_q1;
    reg                           int_out_24_read;
    reg                           int_out_24_write;
    reg  [0:0]                    int_out_24_shift;
    wire [4:0]                    int_out_25_address0;
    wire                          int_out_25_ce0;
    wire                          int_out_25_we0;
    wire [3:0]                    int_out_25_be0;
    wire [31:0]                   int_out_25_d0;
    wire [31:0]                   int_out_25_q0;
    wire [4:0]                    int_out_25_address1;
    wire                          int_out_25_ce1;
    wire                          int_out_25_we1;
    wire [3:0]                    int_out_25_be1;
    wire [31:0]                   int_out_25_d1;
    wire [31:0]                   int_out_25_q1;
    reg                           int_out_25_read;
    reg                           int_out_25_write;
    reg  [0:0]                    int_out_25_shift;
    wire [4:0]                    int_out_26_address0;
    wire                          int_out_26_ce0;
    wire                          int_out_26_we0;
    wire [3:0]                    int_out_26_be0;
    wire [31:0]                   int_out_26_d0;
    wire [31:0]                   int_out_26_q0;
    wire [4:0]                    int_out_26_address1;
    wire                          int_out_26_ce1;
    wire                          int_out_26_we1;
    wire [3:0]                    int_out_26_be1;
    wire [31:0]                   int_out_26_d1;
    wire [31:0]                   int_out_26_q1;
    reg                           int_out_26_read;
    reg                           int_out_26_write;
    reg  [0:0]                    int_out_26_shift;
    wire [4:0]                    int_out_27_address0;
    wire                          int_out_27_ce0;
    wire                          int_out_27_we0;
    wire [3:0]                    int_out_27_be0;
    wire [31:0]                   int_out_27_d0;
    wire [31:0]                   int_out_27_q0;
    wire [4:0]                    int_out_27_address1;
    wire                          int_out_27_ce1;
    wire                          int_out_27_we1;
    wire [3:0]                    int_out_27_be1;
    wire [31:0]                   int_out_27_d1;
    wire [31:0]                   int_out_27_q1;
    reg                           int_out_27_read;
    reg                           int_out_27_write;
    reg  [0:0]                    int_out_27_shift;
    wire [4:0]                    int_out_28_address0;
    wire                          int_out_28_ce0;
    wire                          int_out_28_we0;
    wire [3:0]                    int_out_28_be0;
    wire [31:0]                   int_out_28_d0;
    wire [31:0]                   int_out_28_q0;
    wire [4:0]                    int_out_28_address1;
    wire                          int_out_28_ce1;
    wire                          int_out_28_we1;
    wire [3:0]                    int_out_28_be1;
    wire [31:0]                   int_out_28_d1;
    wire [31:0]                   int_out_28_q1;
    reg                           int_out_28_read;
    reg                           int_out_28_write;
    reg  [0:0]                    int_out_28_shift;
    wire [4:0]                    int_out_29_address0;
    wire                          int_out_29_ce0;
    wire                          int_out_29_we0;
    wire [3:0]                    int_out_29_be0;
    wire [31:0]                   int_out_29_d0;
    wire [31:0]                   int_out_29_q0;
    wire [4:0]                    int_out_29_address1;
    wire                          int_out_29_ce1;
    wire                          int_out_29_we1;
    wire [3:0]                    int_out_29_be1;
    wire [31:0]                   int_out_29_d1;
    wire [31:0]                   int_out_29_q1;
    reg                           int_out_29_read;
    reg                           int_out_29_write;
    reg  [0:0]                    int_out_29_shift;
    wire [4:0]                    int_out_30_address0;
    wire                          int_out_30_ce0;
    wire                          int_out_30_we0;
    wire [3:0]                    int_out_30_be0;
    wire [31:0]                   int_out_30_d0;
    wire [31:0]                   int_out_30_q0;
    wire [4:0]                    int_out_30_address1;
    wire                          int_out_30_ce1;
    wire                          int_out_30_we1;
    wire [3:0]                    int_out_30_be1;
    wire [31:0]                   int_out_30_d1;
    wire [31:0]                   int_out_30_q1;
    reg                           int_out_30_read;
    reg                           int_out_30_write;
    reg  [0:0]                    int_out_30_shift;
    wire [4:0]                    int_out_31_address0;
    wire                          int_out_31_ce0;
    wire                          int_out_31_we0;
    wire [3:0]                    int_out_31_be0;
    wire [31:0]                   int_out_31_d0;
    wire [31:0]                   int_out_31_q0;
    wire [4:0]                    int_out_31_address1;
    wire                          int_out_31_ce1;
    wire                          int_out_31_we1;
    wire [3:0]                    int_out_31_be1;
    wire [31:0]                   int_out_31_d1;
    wire [31:0]                   int_out_31_q1;
    reg                           int_out_31_read;
    reg                           int_out_31_write;
    reg  [0:0]                    int_out_31_shift;
    wire [4:0]                    int_out_32_address0;
    wire                          int_out_32_ce0;
    wire                          int_out_32_we0;
    wire [3:0]                    int_out_32_be0;
    wire [31:0]                   int_out_32_d0;
    wire [31:0]                   int_out_32_q0;
    wire [4:0]                    int_out_32_address1;
    wire                          int_out_32_ce1;
    wire                          int_out_32_we1;
    wire [3:0]                    int_out_32_be1;
    wire [31:0]                   int_out_32_d1;
    wire [31:0]                   int_out_32_q1;
    reg                           int_out_32_read;
    reg                           int_out_32_write;
    reg  [0:0]                    int_out_32_shift;
    wire [4:0]                    int_out_33_address0;
    wire                          int_out_33_ce0;
    wire                          int_out_33_we0;
    wire [3:0]                    int_out_33_be0;
    wire [31:0]                   int_out_33_d0;
    wire [31:0]                   int_out_33_q0;
    wire [4:0]                    int_out_33_address1;
    wire                          int_out_33_ce1;
    wire                          int_out_33_we1;
    wire [3:0]                    int_out_33_be1;
    wire [31:0]                   int_out_33_d1;
    wire [31:0]                   int_out_33_q1;
    reg                           int_out_33_read;
    reg                           int_out_33_write;
    reg  [0:0]                    int_out_33_shift;
    wire [4:0]                    int_out_34_address0;
    wire                          int_out_34_ce0;
    wire                          int_out_34_we0;
    wire [3:0]                    int_out_34_be0;
    wire [31:0]                   int_out_34_d0;
    wire [31:0]                   int_out_34_q0;
    wire [4:0]                    int_out_34_address1;
    wire                          int_out_34_ce1;
    wire                          int_out_34_we1;
    wire [3:0]                    int_out_34_be1;
    wire [31:0]                   int_out_34_d1;
    wire [31:0]                   int_out_34_q1;
    reg                           int_out_34_read;
    reg                           int_out_34_write;
    reg  [0:0]                    int_out_34_shift;
    wire [4:0]                    int_out_35_address0;
    wire                          int_out_35_ce0;
    wire                          int_out_35_we0;
    wire [3:0]                    int_out_35_be0;
    wire [31:0]                   int_out_35_d0;
    wire [31:0]                   int_out_35_q0;
    wire [4:0]                    int_out_35_address1;
    wire                          int_out_35_ce1;
    wire                          int_out_35_we1;
    wire [3:0]                    int_out_35_be1;
    wire [31:0]                   int_out_35_d1;
    wire [31:0]                   int_out_35_q1;
    reg                           int_out_35_read;
    reg                           int_out_35_write;
    reg  [0:0]                    int_out_35_shift;
    wire [4:0]                    int_out_36_address0;
    wire                          int_out_36_ce0;
    wire                          int_out_36_we0;
    wire [3:0]                    int_out_36_be0;
    wire [31:0]                   int_out_36_d0;
    wire [31:0]                   int_out_36_q0;
    wire [4:0]                    int_out_36_address1;
    wire                          int_out_36_ce1;
    wire                          int_out_36_we1;
    wire [3:0]                    int_out_36_be1;
    wire [31:0]                   int_out_36_d1;
    wire [31:0]                   int_out_36_q1;
    reg                           int_out_36_read;
    reg                           int_out_36_write;
    reg  [0:0]                    int_out_36_shift;
    wire [4:0]                    int_out_37_address0;
    wire                          int_out_37_ce0;
    wire                          int_out_37_we0;
    wire [3:0]                    int_out_37_be0;
    wire [31:0]                   int_out_37_d0;
    wire [31:0]                   int_out_37_q0;
    wire [4:0]                    int_out_37_address1;
    wire                          int_out_37_ce1;
    wire                          int_out_37_we1;
    wire [3:0]                    int_out_37_be1;
    wire [31:0]                   int_out_37_d1;
    wire [31:0]                   int_out_37_q1;
    reg                           int_out_37_read;
    reg                           int_out_37_write;
    reg  [0:0]                    int_out_37_shift;
    wire [4:0]                    int_out_38_address0;
    wire                          int_out_38_ce0;
    wire                          int_out_38_we0;
    wire [3:0]                    int_out_38_be0;
    wire [31:0]                   int_out_38_d0;
    wire [31:0]                   int_out_38_q0;
    wire [4:0]                    int_out_38_address1;
    wire                          int_out_38_ce1;
    wire                          int_out_38_we1;
    wire [3:0]                    int_out_38_be1;
    wire [31:0]                   int_out_38_d1;
    wire [31:0]                   int_out_38_q1;
    reg                           int_out_38_read;
    reg                           int_out_38_write;
    reg  [0:0]                    int_out_38_shift;
    wire [4:0]                    int_out_39_address0;
    wire                          int_out_39_ce0;
    wire                          int_out_39_we0;
    wire [3:0]                    int_out_39_be0;
    wire [31:0]                   int_out_39_d0;
    wire [31:0]                   int_out_39_q0;
    wire [4:0]                    int_out_39_address1;
    wire                          int_out_39_ce1;
    wire                          int_out_39_we1;
    wire [3:0]                    int_out_39_be1;
    wire [31:0]                   int_out_39_d1;
    wire [31:0]                   int_out_39_q1;
    reg                           int_out_39_read;
    reg                           int_out_39_write;
    reg  [0:0]                    int_out_39_shift;
    wire [4:0]                    int_out_40_address0;
    wire                          int_out_40_ce0;
    wire                          int_out_40_we0;
    wire [3:0]                    int_out_40_be0;
    wire [31:0]                   int_out_40_d0;
    wire [31:0]                   int_out_40_q0;
    wire [4:0]                    int_out_40_address1;
    wire                          int_out_40_ce1;
    wire                          int_out_40_we1;
    wire [3:0]                    int_out_40_be1;
    wire [31:0]                   int_out_40_d1;
    wire [31:0]                   int_out_40_q1;
    reg                           int_out_40_read;
    reg                           int_out_40_write;
    reg  [0:0]                    int_out_40_shift;
    wire [4:0]                    int_out_41_address0;
    wire                          int_out_41_ce0;
    wire                          int_out_41_we0;
    wire [3:0]                    int_out_41_be0;
    wire [31:0]                   int_out_41_d0;
    wire [31:0]                   int_out_41_q0;
    wire [4:0]                    int_out_41_address1;
    wire                          int_out_41_ce1;
    wire                          int_out_41_we1;
    wire [3:0]                    int_out_41_be1;
    wire [31:0]                   int_out_41_d1;
    wire [31:0]                   int_out_41_q1;
    reg                           int_out_41_read;
    reg                           int_out_41_write;
    reg  [0:0]                    int_out_41_shift;
    wire [4:0]                    int_out_42_address0;
    wire                          int_out_42_ce0;
    wire                          int_out_42_we0;
    wire [3:0]                    int_out_42_be0;
    wire [31:0]                   int_out_42_d0;
    wire [31:0]                   int_out_42_q0;
    wire [4:0]                    int_out_42_address1;
    wire                          int_out_42_ce1;
    wire                          int_out_42_we1;
    wire [3:0]                    int_out_42_be1;
    wire [31:0]                   int_out_42_d1;
    wire [31:0]                   int_out_42_q1;
    reg                           int_out_42_read;
    reg                           int_out_42_write;
    reg  [0:0]                    int_out_42_shift;
    wire [4:0]                    int_out_43_address0;
    wire                          int_out_43_ce0;
    wire                          int_out_43_we0;
    wire [3:0]                    int_out_43_be0;
    wire [31:0]                   int_out_43_d0;
    wire [31:0]                   int_out_43_q0;
    wire [4:0]                    int_out_43_address1;
    wire                          int_out_43_ce1;
    wire                          int_out_43_we1;
    wire [3:0]                    int_out_43_be1;
    wire [31:0]                   int_out_43_d1;
    wire [31:0]                   int_out_43_q1;
    reg                           int_out_43_read;
    reg                           int_out_43_write;
    reg  [0:0]                    int_out_43_shift;
    wire [4:0]                    int_out_44_address0;
    wire                          int_out_44_ce0;
    wire                          int_out_44_we0;
    wire [3:0]                    int_out_44_be0;
    wire [31:0]                   int_out_44_d0;
    wire [31:0]                   int_out_44_q0;
    wire [4:0]                    int_out_44_address1;
    wire                          int_out_44_ce1;
    wire                          int_out_44_we1;
    wire [3:0]                    int_out_44_be1;
    wire [31:0]                   int_out_44_d1;
    wire [31:0]                   int_out_44_q1;
    reg                           int_out_44_read;
    reg                           int_out_44_write;
    reg  [0:0]                    int_out_44_shift;
    wire [4:0]                    int_out_45_address0;
    wire                          int_out_45_ce0;
    wire                          int_out_45_we0;
    wire [3:0]                    int_out_45_be0;
    wire [31:0]                   int_out_45_d0;
    wire [31:0]                   int_out_45_q0;
    wire [4:0]                    int_out_45_address1;
    wire                          int_out_45_ce1;
    wire                          int_out_45_we1;
    wire [3:0]                    int_out_45_be1;
    wire [31:0]                   int_out_45_d1;
    wire [31:0]                   int_out_45_q1;
    reg                           int_out_45_read;
    reg                           int_out_45_write;
    reg  [0:0]                    int_out_45_shift;
    wire [4:0]                    int_out_46_address0;
    wire                          int_out_46_ce0;
    wire                          int_out_46_we0;
    wire [3:0]                    int_out_46_be0;
    wire [31:0]                   int_out_46_d0;
    wire [31:0]                   int_out_46_q0;
    wire [4:0]                    int_out_46_address1;
    wire                          int_out_46_ce1;
    wire                          int_out_46_we1;
    wire [3:0]                    int_out_46_be1;
    wire [31:0]                   int_out_46_d1;
    wire [31:0]                   int_out_46_q1;
    reg                           int_out_46_read;
    reg                           int_out_46_write;
    reg  [0:0]                    int_out_46_shift;
    wire [4:0]                    int_out_47_address0;
    wire                          int_out_47_ce0;
    wire                          int_out_47_we0;
    wire [3:0]                    int_out_47_be0;
    wire [31:0]                   int_out_47_d0;
    wire [31:0]                   int_out_47_q0;
    wire [4:0]                    int_out_47_address1;
    wire                          int_out_47_ce1;
    wire                          int_out_47_we1;
    wire [3:0]                    int_out_47_be1;
    wire [31:0]                   int_out_47_d1;
    wire [31:0]                   int_out_47_q1;
    reg                           int_out_47_read;
    reg                           int_out_47_write;
    reg  [0:0]                    int_out_47_shift;
    wire [4:0]                    int_out_48_address0;
    wire                          int_out_48_ce0;
    wire                          int_out_48_we0;
    wire [3:0]                    int_out_48_be0;
    wire [31:0]                   int_out_48_d0;
    wire [31:0]                   int_out_48_q0;
    wire [4:0]                    int_out_48_address1;
    wire                          int_out_48_ce1;
    wire                          int_out_48_we1;
    wire [3:0]                    int_out_48_be1;
    wire [31:0]                   int_out_48_d1;
    wire [31:0]                   int_out_48_q1;
    reg                           int_out_48_read;
    reg                           int_out_48_write;
    reg  [0:0]                    int_out_48_shift;
    wire [4:0]                    int_out_49_address0;
    wire                          int_out_49_ce0;
    wire                          int_out_49_we0;
    wire [3:0]                    int_out_49_be0;
    wire [31:0]                   int_out_49_d0;
    wire [31:0]                   int_out_49_q0;
    wire [4:0]                    int_out_49_address1;
    wire                          int_out_49_ce1;
    wire                          int_out_49_we1;
    wire [3:0]                    int_out_49_be1;
    wire [31:0]                   int_out_49_d1;
    wire [31:0]                   int_out_49_q1;
    reg                           int_out_49_read;
    reg                           int_out_49_write;
    reg  [0:0]                    int_out_49_shift;
    wire [3:0]                    int_krnl_address0;
    wire                          int_krnl_ce0;
    wire                          int_krnl_we0;
    wire [3:0]                    int_krnl_be0;
    wire [31:0]                   int_krnl_d0;
    wire [31:0]                   int_krnl_q0;
    wire [3:0]                    int_krnl_address1;
    wire                          int_krnl_ce1;
    wire                          int_krnl_we1;
    wire [3:0]                    int_krnl_be1;
    wire [31:0]                   int_krnl_d1;
    wire [31:0]                   int_krnl_q1;
    reg                           int_krnl_read;
    reg                           int_krnl_write;

//------------------------Instantiation------------------
// int_in_0
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_0 (
    .clk0     ( ACLK ),
    .address0 ( int_in_0_address0 ),
    .ce0      ( int_in_0_ce0 ),
    .we0      ( int_in_0_we0 ),
    .be0      ( int_in_0_be0 ),
    .d0       ( int_in_0_d0 ),
    .q0       ( int_in_0_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_0_address1 ),
    .ce1      ( int_in_0_ce1 ),
    .we1      ( int_in_0_we1 ),
    .be1      ( int_in_0_be1 ),
    .d1       ( int_in_0_d1 ),
    .q1       ( int_in_0_q1 )
);
// int_in_1
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_1 (
    .clk0     ( ACLK ),
    .address0 ( int_in_1_address0 ),
    .ce0      ( int_in_1_ce0 ),
    .we0      ( int_in_1_we0 ),
    .be0      ( int_in_1_be0 ),
    .d0       ( int_in_1_d0 ),
    .q0       ( int_in_1_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_1_address1 ),
    .ce1      ( int_in_1_ce1 ),
    .we1      ( int_in_1_we1 ),
    .be1      ( int_in_1_be1 ),
    .d1       ( int_in_1_d1 ),
    .q1       ( int_in_1_q1 )
);
// int_in_2
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_2 (
    .clk0     ( ACLK ),
    .address0 ( int_in_2_address0 ),
    .ce0      ( int_in_2_ce0 ),
    .we0      ( int_in_2_we0 ),
    .be0      ( int_in_2_be0 ),
    .d0       ( int_in_2_d0 ),
    .q0       ( int_in_2_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_2_address1 ),
    .ce1      ( int_in_2_ce1 ),
    .we1      ( int_in_2_we1 ),
    .be1      ( int_in_2_be1 ),
    .d1       ( int_in_2_d1 ),
    .q1       ( int_in_2_q1 )
);
// int_in_3
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_3 (
    .clk0     ( ACLK ),
    .address0 ( int_in_3_address0 ),
    .ce0      ( int_in_3_ce0 ),
    .we0      ( int_in_3_we0 ),
    .be0      ( int_in_3_be0 ),
    .d0       ( int_in_3_d0 ),
    .q0       ( int_in_3_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_3_address1 ),
    .ce1      ( int_in_3_ce1 ),
    .we1      ( int_in_3_we1 ),
    .be1      ( int_in_3_be1 ),
    .d1       ( int_in_3_d1 ),
    .q1       ( int_in_3_q1 )
);
// int_in_4
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_4 (
    .clk0     ( ACLK ),
    .address0 ( int_in_4_address0 ),
    .ce0      ( int_in_4_ce0 ),
    .we0      ( int_in_4_we0 ),
    .be0      ( int_in_4_be0 ),
    .d0       ( int_in_4_d0 ),
    .q0       ( int_in_4_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_4_address1 ),
    .ce1      ( int_in_4_ce1 ),
    .we1      ( int_in_4_we1 ),
    .be1      ( int_in_4_be1 ),
    .d1       ( int_in_4_d1 ),
    .q1       ( int_in_4_q1 )
);
// int_in_5
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_5 (
    .clk0     ( ACLK ),
    .address0 ( int_in_5_address0 ),
    .ce0      ( int_in_5_ce0 ),
    .we0      ( int_in_5_we0 ),
    .be0      ( int_in_5_be0 ),
    .d0       ( int_in_5_d0 ),
    .q0       ( int_in_5_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_5_address1 ),
    .ce1      ( int_in_5_ce1 ),
    .we1      ( int_in_5_we1 ),
    .be1      ( int_in_5_be1 ),
    .d1       ( int_in_5_d1 ),
    .q1       ( int_in_5_q1 )
);
// int_in_6
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_6 (
    .clk0     ( ACLK ),
    .address0 ( int_in_6_address0 ),
    .ce0      ( int_in_6_ce0 ),
    .we0      ( int_in_6_we0 ),
    .be0      ( int_in_6_be0 ),
    .d0       ( int_in_6_d0 ),
    .q0       ( int_in_6_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_6_address1 ),
    .ce1      ( int_in_6_ce1 ),
    .we1      ( int_in_6_we1 ),
    .be1      ( int_in_6_be1 ),
    .d1       ( int_in_6_d1 ),
    .q1       ( int_in_6_q1 )
);
// int_in_7
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_7 (
    .clk0     ( ACLK ),
    .address0 ( int_in_7_address0 ),
    .ce0      ( int_in_7_ce0 ),
    .we0      ( int_in_7_we0 ),
    .be0      ( int_in_7_be0 ),
    .d0       ( int_in_7_d0 ),
    .q0       ( int_in_7_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_7_address1 ),
    .ce1      ( int_in_7_ce1 ),
    .we1      ( int_in_7_we1 ),
    .be1      ( int_in_7_be1 ),
    .d1       ( int_in_7_d1 ),
    .q1       ( int_in_7_q1 )
);
// int_in_8
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_8 (
    .clk0     ( ACLK ),
    .address0 ( int_in_8_address0 ),
    .ce0      ( int_in_8_ce0 ),
    .we0      ( int_in_8_we0 ),
    .be0      ( int_in_8_be0 ),
    .d0       ( int_in_8_d0 ),
    .q0       ( int_in_8_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_8_address1 ),
    .ce1      ( int_in_8_ce1 ),
    .we1      ( int_in_8_we1 ),
    .be1      ( int_in_8_be1 ),
    .d1       ( int_in_8_d1 ),
    .q1       ( int_in_8_q1 )
);
// int_in_9
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_9 (
    .clk0     ( ACLK ),
    .address0 ( int_in_9_address0 ),
    .ce0      ( int_in_9_ce0 ),
    .we0      ( int_in_9_we0 ),
    .be0      ( int_in_9_be0 ),
    .d0       ( int_in_9_d0 ),
    .q0       ( int_in_9_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_9_address1 ),
    .ce1      ( int_in_9_ce1 ),
    .we1      ( int_in_9_we1 ),
    .be1      ( int_in_9_be1 ),
    .d1       ( int_in_9_d1 ),
    .q1       ( int_in_9_q1 )
);
// int_in_10
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_10 (
    .clk0     ( ACLK ),
    .address0 ( int_in_10_address0 ),
    .ce0      ( int_in_10_ce0 ),
    .we0      ( int_in_10_we0 ),
    .be0      ( int_in_10_be0 ),
    .d0       ( int_in_10_d0 ),
    .q0       ( int_in_10_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_10_address1 ),
    .ce1      ( int_in_10_ce1 ),
    .we1      ( int_in_10_we1 ),
    .be1      ( int_in_10_be1 ),
    .d1       ( int_in_10_d1 ),
    .q1       ( int_in_10_q1 )
);
// int_in_11
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_11 (
    .clk0     ( ACLK ),
    .address0 ( int_in_11_address0 ),
    .ce0      ( int_in_11_ce0 ),
    .we0      ( int_in_11_we0 ),
    .be0      ( int_in_11_be0 ),
    .d0       ( int_in_11_d0 ),
    .q0       ( int_in_11_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_11_address1 ),
    .ce1      ( int_in_11_ce1 ),
    .we1      ( int_in_11_we1 ),
    .be1      ( int_in_11_be1 ),
    .d1       ( int_in_11_d1 ),
    .q1       ( int_in_11_q1 )
);
// int_in_12
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_12 (
    .clk0     ( ACLK ),
    .address0 ( int_in_12_address0 ),
    .ce0      ( int_in_12_ce0 ),
    .we0      ( int_in_12_we0 ),
    .be0      ( int_in_12_be0 ),
    .d0       ( int_in_12_d0 ),
    .q0       ( int_in_12_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_12_address1 ),
    .ce1      ( int_in_12_ce1 ),
    .we1      ( int_in_12_we1 ),
    .be1      ( int_in_12_be1 ),
    .d1       ( int_in_12_d1 ),
    .q1       ( int_in_12_q1 )
);
// int_in_13
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_13 (
    .clk0     ( ACLK ),
    .address0 ( int_in_13_address0 ),
    .ce0      ( int_in_13_ce0 ),
    .we0      ( int_in_13_we0 ),
    .be0      ( int_in_13_be0 ),
    .d0       ( int_in_13_d0 ),
    .q0       ( int_in_13_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_13_address1 ),
    .ce1      ( int_in_13_ce1 ),
    .we1      ( int_in_13_we1 ),
    .be1      ( int_in_13_be1 ),
    .d1       ( int_in_13_d1 ),
    .q1       ( int_in_13_q1 )
);
// int_in_14
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_14 (
    .clk0     ( ACLK ),
    .address0 ( int_in_14_address0 ),
    .ce0      ( int_in_14_ce0 ),
    .we0      ( int_in_14_we0 ),
    .be0      ( int_in_14_be0 ),
    .d0       ( int_in_14_d0 ),
    .q0       ( int_in_14_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_14_address1 ),
    .ce1      ( int_in_14_ce1 ),
    .we1      ( int_in_14_we1 ),
    .be1      ( int_in_14_be1 ),
    .d1       ( int_in_14_d1 ),
    .q1       ( int_in_14_q1 )
);
// int_in_15
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_15 (
    .clk0     ( ACLK ),
    .address0 ( int_in_15_address0 ),
    .ce0      ( int_in_15_ce0 ),
    .we0      ( int_in_15_we0 ),
    .be0      ( int_in_15_be0 ),
    .d0       ( int_in_15_d0 ),
    .q0       ( int_in_15_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_15_address1 ),
    .ce1      ( int_in_15_ce1 ),
    .we1      ( int_in_15_we1 ),
    .be1      ( int_in_15_be1 ),
    .d1       ( int_in_15_d1 ),
    .q1       ( int_in_15_q1 )
);
// int_in_16
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_16 (
    .clk0     ( ACLK ),
    .address0 ( int_in_16_address0 ),
    .ce0      ( int_in_16_ce0 ),
    .we0      ( int_in_16_we0 ),
    .be0      ( int_in_16_be0 ),
    .d0       ( int_in_16_d0 ),
    .q0       ( int_in_16_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_16_address1 ),
    .ce1      ( int_in_16_ce1 ),
    .we1      ( int_in_16_we1 ),
    .be1      ( int_in_16_be1 ),
    .d1       ( int_in_16_d1 ),
    .q1       ( int_in_16_q1 )
);
// int_in_17
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_17 (
    .clk0     ( ACLK ),
    .address0 ( int_in_17_address0 ),
    .ce0      ( int_in_17_ce0 ),
    .we0      ( int_in_17_we0 ),
    .be0      ( int_in_17_be0 ),
    .d0       ( int_in_17_d0 ),
    .q0       ( int_in_17_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_17_address1 ),
    .ce1      ( int_in_17_ce1 ),
    .we1      ( int_in_17_we1 ),
    .be1      ( int_in_17_be1 ),
    .d1       ( int_in_17_d1 ),
    .q1       ( int_in_17_q1 )
);
// int_in_18
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_18 (
    .clk0     ( ACLK ),
    .address0 ( int_in_18_address0 ),
    .ce0      ( int_in_18_ce0 ),
    .we0      ( int_in_18_we0 ),
    .be0      ( int_in_18_be0 ),
    .d0       ( int_in_18_d0 ),
    .q0       ( int_in_18_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_18_address1 ),
    .ce1      ( int_in_18_ce1 ),
    .we1      ( int_in_18_we1 ),
    .be1      ( int_in_18_be1 ),
    .d1       ( int_in_18_d1 ),
    .q1       ( int_in_18_q1 )
);
// int_in_19
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_19 (
    .clk0     ( ACLK ),
    .address0 ( int_in_19_address0 ),
    .ce0      ( int_in_19_ce0 ),
    .we0      ( int_in_19_we0 ),
    .be0      ( int_in_19_be0 ),
    .d0       ( int_in_19_d0 ),
    .q0       ( int_in_19_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_19_address1 ),
    .ce1      ( int_in_19_ce1 ),
    .we1      ( int_in_19_we1 ),
    .be1      ( int_in_19_be1 ),
    .d1       ( int_in_19_d1 ),
    .q1       ( int_in_19_q1 )
);
// int_in_20
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_20 (
    .clk0     ( ACLK ),
    .address0 ( int_in_20_address0 ),
    .ce0      ( int_in_20_ce0 ),
    .we0      ( int_in_20_we0 ),
    .be0      ( int_in_20_be0 ),
    .d0       ( int_in_20_d0 ),
    .q0       ( int_in_20_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_20_address1 ),
    .ce1      ( int_in_20_ce1 ),
    .we1      ( int_in_20_we1 ),
    .be1      ( int_in_20_be1 ),
    .d1       ( int_in_20_d1 ),
    .q1       ( int_in_20_q1 )
);
// int_in_21
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_21 (
    .clk0     ( ACLK ),
    .address0 ( int_in_21_address0 ),
    .ce0      ( int_in_21_ce0 ),
    .we0      ( int_in_21_we0 ),
    .be0      ( int_in_21_be0 ),
    .d0       ( int_in_21_d0 ),
    .q0       ( int_in_21_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_21_address1 ),
    .ce1      ( int_in_21_ce1 ),
    .we1      ( int_in_21_we1 ),
    .be1      ( int_in_21_be1 ),
    .d1       ( int_in_21_d1 ),
    .q1       ( int_in_21_q1 )
);
// int_in_22
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_22 (
    .clk0     ( ACLK ),
    .address0 ( int_in_22_address0 ),
    .ce0      ( int_in_22_ce0 ),
    .we0      ( int_in_22_we0 ),
    .be0      ( int_in_22_be0 ),
    .d0       ( int_in_22_d0 ),
    .q0       ( int_in_22_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_22_address1 ),
    .ce1      ( int_in_22_ce1 ),
    .we1      ( int_in_22_we1 ),
    .be1      ( int_in_22_be1 ),
    .d1       ( int_in_22_d1 ),
    .q1       ( int_in_22_q1 )
);
// int_in_23
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_23 (
    .clk0     ( ACLK ),
    .address0 ( int_in_23_address0 ),
    .ce0      ( int_in_23_ce0 ),
    .we0      ( int_in_23_we0 ),
    .be0      ( int_in_23_be0 ),
    .d0       ( int_in_23_d0 ),
    .q0       ( int_in_23_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_23_address1 ),
    .ce1      ( int_in_23_ce1 ),
    .we1      ( int_in_23_we1 ),
    .be1      ( int_in_23_be1 ),
    .d1       ( int_in_23_d1 ),
    .q1       ( int_in_23_q1 )
);
// int_in_24
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_24 (
    .clk0     ( ACLK ),
    .address0 ( int_in_24_address0 ),
    .ce0      ( int_in_24_ce0 ),
    .we0      ( int_in_24_we0 ),
    .be0      ( int_in_24_be0 ),
    .d0       ( int_in_24_d0 ),
    .q0       ( int_in_24_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_24_address1 ),
    .ce1      ( int_in_24_ce1 ),
    .we1      ( int_in_24_we1 ),
    .be1      ( int_in_24_be1 ),
    .d1       ( int_in_24_d1 ),
    .q1       ( int_in_24_q1 )
);
// int_in_25
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_25 (
    .clk0     ( ACLK ),
    .address0 ( int_in_25_address0 ),
    .ce0      ( int_in_25_ce0 ),
    .we0      ( int_in_25_we0 ),
    .be0      ( int_in_25_be0 ),
    .d0       ( int_in_25_d0 ),
    .q0       ( int_in_25_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_25_address1 ),
    .ce1      ( int_in_25_ce1 ),
    .we1      ( int_in_25_we1 ),
    .be1      ( int_in_25_be1 ),
    .d1       ( int_in_25_d1 ),
    .q1       ( int_in_25_q1 )
);
// int_in_26
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_26 (
    .clk0     ( ACLK ),
    .address0 ( int_in_26_address0 ),
    .ce0      ( int_in_26_ce0 ),
    .we0      ( int_in_26_we0 ),
    .be0      ( int_in_26_be0 ),
    .d0       ( int_in_26_d0 ),
    .q0       ( int_in_26_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_26_address1 ),
    .ce1      ( int_in_26_ce1 ),
    .we1      ( int_in_26_we1 ),
    .be1      ( int_in_26_be1 ),
    .d1       ( int_in_26_d1 ),
    .q1       ( int_in_26_q1 )
);
// int_in_27
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_27 (
    .clk0     ( ACLK ),
    .address0 ( int_in_27_address0 ),
    .ce0      ( int_in_27_ce0 ),
    .we0      ( int_in_27_we0 ),
    .be0      ( int_in_27_be0 ),
    .d0       ( int_in_27_d0 ),
    .q0       ( int_in_27_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_27_address1 ),
    .ce1      ( int_in_27_ce1 ),
    .we1      ( int_in_27_we1 ),
    .be1      ( int_in_27_be1 ),
    .d1       ( int_in_27_d1 ),
    .q1       ( int_in_27_q1 )
);
// int_in_28
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_28 (
    .clk0     ( ACLK ),
    .address0 ( int_in_28_address0 ),
    .ce0      ( int_in_28_ce0 ),
    .we0      ( int_in_28_we0 ),
    .be0      ( int_in_28_be0 ),
    .d0       ( int_in_28_d0 ),
    .q0       ( int_in_28_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_28_address1 ),
    .ce1      ( int_in_28_ce1 ),
    .we1      ( int_in_28_we1 ),
    .be1      ( int_in_28_be1 ),
    .d1       ( int_in_28_d1 ),
    .q1       ( int_in_28_q1 )
);
// int_in_29
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_29 (
    .clk0     ( ACLK ),
    .address0 ( int_in_29_address0 ),
    .ce0      ( int_in_29_ce0 ),
    .we0      ( int_in_29_we0 ),
    .be0      ( int_in_29_be0 ),
    .d0       ( int_in_29_d0 ),
    .q0       ( int_in_29_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_29_address1 ),
    .ce1      ( int_in_29_ce1 ),
    .we1      ( int_in_29_we1 ),
    .be1      ( int_in_29_be1 ),
    .d1       ( int_in_29_d1 ),
    .q1       ( int_in_29_q1 )
);
// int_in_30
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_30 (
    .clk0     ( ACLK ),
    .address0 ( int_in_30_address0 ),
    .ce0      ( int_in_30_ce0 ),
    .we0      ( int_in_30_we0 ),
    .be0      ( int_in_30_be0 ),
    .d0       ( int_in_30_d0 ),
    .q0       ( int_in_30_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_30_address1 ),
    .ce1      ( int_in_30_ce1 ),
    .we1      ( int_in_30_we1 ),
    .be1      ( int_in_30_be1 ),
    .d1       ( int_in_30_d1 ),
    .q1       ( int_in_30_q1 )
);
// int_in_31
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_31 (
    .clk0     ( ACLK ),
    .address0 ( int_in_31_address0 ),
    .ce0      ( int_in_31_ce0 ),
    .we0      ( int_in_31_we0 ),
    .be0      ( int_in_31_be0 ),
    .d0       ( int_in_31_d0 ),
    .q0       ( int_in_31_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_31_address1 ),
    .ce1      ( int_in_31_ce1 ),
    .we1      ( int_in_31_we1 ),
    .be1      ( int_in_31_be1 ),
    .d1       ( int_in_31_d1 ),
    .q1       ( int_in_31_q1 )
);
// int_in_32
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_32 (
    .clk0     ( ACLK ),
    .address0 ( int_in_32_address0 ),
    .ce0      ( int_in_32_ce0 ),
    .we0      ( int_in_32_we0 ),
    .be0      ( int_in_32_be0 ),
    .d0       ( int_in_32_d0 ),
    .q0       ( int_in_32_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_32_address1 ),
    .ce1      ( int_in_32_ce1 ),
    .we1      ( int_in_32_we1 ),
    .be1      ( int_in_32_be1 ),
    .d1       ( int_in_32_d1 ),
    .q1       ( int_in_32_q1 )
);
// int_in_33
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_33 (
    .clk0     ( ACLK ),
    .address0 ( int_in_33_address0 ),
    .ce0      ( int_in_33_ce0 ),
    .we0      ( int_in_33_we0 ),
    .be0      ( int_in_33_be0 ),
    .d0       ( int_in_33_d0 ),
    .q0       ( int_in_33_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_33_address1 ),
    .ce1      ( int_in_33_ce1 ),
    .we1      ( int_in_33_we1 ),
    .be1      ( int_in_33_be1 ),
    .d1       ( int_in_33_d1 ),
    .q1       ( int_in_33_q1 )
);
// int_in_34
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_34 (
    .clk0     ( ACLK ),
    .address0 ( int_in_34_address0 ),
    .ce0      ( int_in_34_ce0 ),
    .we0      ( int_in_34_we0 ),
    .be0      ( int_in_34_be0 ),
    .d0       ( int_in_34_d0 ),
    .q0       ( int_in_34_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_34_address1 ),
    .ce1      ( int_in_34_ce1 ),
    .we1      ( int_in_34_we1 ),
    .be1      ( int_in_34_be1 ),
    .d1       ( int_in_34_d1 ),
    .q1       ( int_in_34_q1 )
);
// int_in_35
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_35 (
    .clk0     ( ACLK ),
    .address0 ( int_in_35_address0 ),
    .ce0      ( int_in_35_ce0 ),
    .we0      ( int_in_35_we0 ),
    .be0      ( int_in_35_be0 ),
    .d0       ( int_in_35_d0 ),
    .q0       ( int_in_35_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_35_address1 ),
    .ce1      ( int_in_35_ce1 ),
    .we1      ( int_in_35_we1 ),
    .be1      ( int_in_35_be1 ),
    .d1       ( int_in_35_d1 ),
    .q1       ( int_in_35_q1 )
);
// int_in_36
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_36 (
    .clk0     ( ACLK ),
    .address0 ( int_in_36_address0 ),
    .ce0      ( int_in_36_ce0 ),
    .we0      ( int_in_36_we0 ),
    .be0      ( int_in_36_be0 ),
    .d0       ( int_in_36_d0 ),
    .q0       ( int_in_36_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_36_address1 ),
    .ce1      ( int_in_36_ce1 ),
    .we1      ( int_in_36_we1 ),
    .be1      ( int_in_36_be1 ),
    .d1       ( int_in_36_d1 ),
    .q1       ( int_in_36_q1 )
);
// int_in_37
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_37 (
    .clk0     ( ACLK ),
    .address0 ( int_in_37_address0 ),
    .ce0      ( int_in_37_ce0 ),
    .we0      ( int_in_37_we0 ),
    .be0      ( int_in_37_be0 ),
    .d0       ( int_in_37_d0 ),
    .q0       ( int_in_37_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_37_address1 ),
    .ce1      ( int_in_37_ce1 ),
    .we1      ( int_in_37_we1 ),
    .be1      ( int_in_37_be1 ),
    .d1       ( int_in_37_d1 ),
    .q1       ( int_in_37_q1 )
);
// int_in_38
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_38 (
    .clk0     ( ACLK ),
    .address0 ( int_in_38_address0 ),
    .ce0      ( int_in_38_ce0 ),
    .we0      ( int_in_38_we0 ),
    .be0      ( int_in_38_be0 ),
    .d0       ( int_in_38_d0 ),
    .q0       ( int_in_38_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_38_address1 ),
    .ce1      ( int_in_38_ce1 ),
    .we1      ( int_in_38_we1 ),
    .be1      ( int_in_38_be1 ),
    .d1       ( int_in_38_d1 ),
    .q1       ( int_in_38_q1 )
);
// int_in_39
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_39 (
    .clk0     ( ACLK ),
    .address0 ( int_in_39_address0 ),
    .ce0      ( int_in_39_ce0 ),
    .we0      ( int_in_39_we0 ),
    .be0      ( int_in_39_be0 ),
    .d0       ( int_in_39_d0 ),
    .q0       ( int_in_39_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_39_address1 ),
    .ce1      ( int_in_39_ce1 ),
    .we1      ( int_in_39_we1 ),
    .be1      ( int_in_39_be1 ),
    .d1       ( int_in_39_d1 ),
    .q1       ( int_in_39_q1 )
);
// int_in_40
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_40 (
    .clk0     ( ACLK ),
    .address0 ( int_in_40_address0 ),
    .ce0      ( int_in_40_ce0 ),
    .we0      ( int_in_40_we0 ),
    .be0      ( int_in_40_be0 ),
    .d0       ( int_in_40_d0 ),
    .q0       ( int_in_40_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_40_address1 ),
    .ce1      ( int_in_40_ce1 ),
    .we1      ( int_in_40_we1 ),
    .be1      ( int_in_40_be1 ),
    .d1       ( int_in_40_d1 ),
    .q1       ( int_in_40_q1 )
);
// int_in_41
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_41 (
    .clk0     ( ACLK ),
    .address0 ( int_in_41_address0 ),
    .ce0      ( int_in_41_ce0 ),
    .we0      ( int_in_41_we0 ),
    .be0      ( int_in_41_be0 ),
    .d0       ( int_in_41_d0 ),
    .q0       ( int_in_41_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_41_address1 ),
    .ce1      ( int_in_41_ce1 ),
    .we1      ( int_in_41_we1 ),
    .be1      ( int_in_41_be1 ),
    .d1       ( int_in_41_d1 ),
    .q1       ( int_in_41_q1 )
);
// int_in_42
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_42 (
    .clk0     ( ACLK ),
    .address0 ( int_in_42_address0 ),
    .ce0      ( int_in_42_ce0 ),
    .we0      ( int_in_42_we0 ),
    .be0      ( int_in_42_be0 ),
    .d0       ( int_in_42_d0 ),
    .q0       ( int_in_42_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_42_address1 ),
    .ce1      ( int_in_42_ce1 ),
    .we1      ( int_in_42_we1 ),
    .be1      ( int_in_42_be1 ),
    .d1       ( int_in_42_d1 ),
    .q1       ( int_in_42_q1 )
);
// int_in_43
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_43 (
    .clk0     ( ACLK ),
    .address0 ( int_in_43_address0 ),
    .ce0      ( int_in_43_ce0 ),
    .we0      ( int_in_43_we0 ),
    .be0      ( int_in_43_be0 ),
    .d0       ( int_in_43_d0 ),
    .q0       ( int_in_43_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_43_address1 ),
    .ce1      ( int_in_43_ce1 ),
    .we1      ( int_in_43_we1 ),
    .be1      ( int_in_43_be1 ),
    .d1       ( int_in_43_d1 ),
    .q1       ( int_in_43_q1 )
);
// int_in_44
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_44 (
    .clk0     ( ACLK ),
    .address0 ( int_in_44_address0 ),
    .ce0      ( int_in_44_ce0 ),
    .we0      ( int_in_44_we0 ),
    .be0      ( int_in_44_be0 ),
    .d0       ( int_in_44_d0 ),
    .q0       ( int_in_44_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_44_address1 ),
    .ce1      ( int_in_44_ce1 ),
    .we1      ( int_in_44_we1 ),
    .be1      ( int_in_44_be1 ),
    .d1       ( int_in_44_d1 ),
    .q1       ( int_in_44_q1 )
);
// int_in_45
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_45 (
    .clk0     ( ACLK ),
    .address0 ( int_in_45_address0 ),
    .ce0      ( int_in_45_ce0 ),
    .we0      ( int_in_45_we0 ),
    .be0      ( int_in_45_be0 ),
    .d0       ( int_in_45_d0 ),
    .q0       ( int_in_45_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_45_address1 ),
    .ce1      ( int_in_45_ce1 ),
    .we1      ( int_in_45_we1 ),
    .be1      ( int_in_45_be1 ),
    .d1       ( int_in_45_d1 ),
    .q1       ( int_in_45_q1 )
);
// int_in_46
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_46 (
    .clk0     ( ACLK ),
    .address0 ( int_in_46_address0 ),
    .ce0      ( int_in_46_ce0 ),
    .we0      ( int_in_46_we0 ),
    .be0      ( int_in_46_be0 ),
    .d0       ( int_in_46_d0 ),
    .q0       ( int_in_46_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_46_address1 ),
    .ce1      ( int_in_46_ce1 ),
    .we1      ( int_in_46_we1 ),
    .be1      ( int_in_46_be1 ),
    .d1       ( int_in_46_d1 ),
    .q1       ( int_in_46_q1 )
);
// int_in_47
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_47 (
    .clk0     ( ACLK ),
    .address0 ( int_in_47_address0 ),
    .ce0      ( int_in_47_ce0 ),
    .we0      ( int_in_47_we0 ),
    .be0      ( int_in_47_be0 ),
    .d0       ( int_in_47_d0 ),
    .q0       ( int_in_47_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_47_address1 ),
    .ce1      ( int_in_47_ce1 ),
    .we1      ( int_in_47_we1 ),
    .be1      ( int_in_47_be1 ),
    .d1       ( int_in_47_d1 ),
    .q1       ( int_in_47_q1 )
);
// int_in_48
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_48 (
    .clk0     ( ACLK ),
    .address0 ( int_in_48_address0 ),
    .ce0      ( int_in_48_ce0 ),
    .we0      ( int_in_48_we0 ),
    .be0      ( int_in_48_be0 ),
    .d0       ( int_in_48_d0 ),
    .q0       ( int_in_48_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_48_address1 ),
    .ce1      ( int_in_48_ce1 ),
    .we1      ( int_in_48_we1 ),
    .be1      ( int_in_48_be1 ),
    .d1       ( int_in_48_d1 ),
    .q1       ( int_in_48_q1 )
);
// int_in_49
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_in_49 (
    .clk0     ( ACLK ),
    .address0 ( int_in_49_address0 ),
    .ce0      ( int_in_49_ce0 ),
    .we0      ( int_in_49_we0 ),
    .be0      ( int_in_49_be0 ),
    .d0       ( int_in_49_d0 ),
    .q0       ( int_in_49_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_in_49_address1 ),
    .ce1      ( int_in_49_ce1 ),
    .we1      ( int_in_49_we1 ),
    .be1      ( int_in_49_be1 ),
    .d1       ( int_in_49_d1 ),
    .q1       ( int_in_49_q1 )
);
// int_out_0
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_0 (
    .clk0     ( ACLK ),
    .address0 ( int_out_0_address0 ),
    .ce0      ( int_out_0_ce0 ),
    .we0      ( int_out_0_we0 ),
    .be0      ( int_out_0_be0 ),
    .d0       ( int_out_0_d0 ),
    .q0       ( int_out_0_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_0_address1 ),
    .ce1      ( int_out_0_ce1 ),
    .we1      ( int_out_0_we1 ),
    .be1      ( int_out_0_be1 ),
    .d1       ( int_out_0_d1 ),
    .q1       ( int_out_0_q1 )
);
// int_out_1
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_1 (
    .clk0     ( ACLK ),
    .address0 ( int_out_1_address0 ),
    .ce0      ( int_out_1_ce0 ),
    .we0      ( int_out_1_we0 ),
    .be0      ( int_out_1_be0 ),
    .d0       ( int_out_1_d0 ),
    .q0       ( int_out_1_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_1_address1 ),
    .ce1      ( int_out_1_ce1 ),
    .we1      ( int_out_1_we1 ),
    .be1      ( int_out_1_be1 ),
    .d1       ( int_out_1_d1 ),
    .q1       ( int_out_1_q1 )
);
// int_out_2
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_2 (
    .clk0     ( ACLK ),
    .address0 ( int_out_2_address0 ),
    .ce0      ( int_out_2_ce0 ),
    .we0      ( int_out_2_we0 ),
    .be0      ( int_out_2_be0 ),
    .d0       ( int_out_2_d0 ),
    .q0       ( int_out_2_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_2_address1 ),
    .ce1      ( int_out_2_ce1 ),
    .we1      ( int_out_2_we1 ),
    .be1      ( int_out_2_be1 ),
    .d1       ( int_out_2_d1 ),
    .q1       ( int_out_2_q1 )
);
// int_out_3
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_3 (
    .clk0     ( ACLK ),
    .address0 ( int_out_3_address0 ),
    .ce0      ( int_out_3_ce0 ),
    .we0      ( int_out_3_we0 ),
    .be0      ( int_out_3_be0 ),
    .d0       ( int_out_3_d0 ),
    .q0       ( int_out_3_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_3_address1 ),
    .ce1      ( int_out_3_ce1 ),
    .we1      ( int_out_3_we1 ),
    .be1      ( int_out_3_be1 ),
    .d1       ( int_out_3_d1 ),
    .q1       ( int_out_3_q1 )
);
// int_out_4
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_4 (
    .clk0     ( ACLK ),
    .address0 ( int_out_4_address0 ),
    .ce0      ( int_out_4_ce0 ),
    .we0      ( int_out_4_we0 ),
    .be0      ( int_out_4_be0 ),
    .d0       ( int_out_4_d0 ),
    .q0       ( int_out_4_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_4_address1 ),
    .ce1      ( int_out_4_ce1 ),
    .we1      ( int_out_4_we1 ),
    .be1      ( int_out_4_be1 ),
    .d1       ( int_out_4_d1 ),
    .q1       ( int_out_4_q1 )
);
// int_out_5
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_5 (
    .clk0     ( ACLK ),
    .address0 ( int_out_5_address0 ),
    .ce0      ( int_out_5_ce0 ),
    .we0      ( int_out_5_we0 ),
    .be0      ( int_out_5_be0 ),
    .d0       ( int_out_5_d0 ),
    .q0       ( int_out_5_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_5_address1 ),
    .ce1      ( int_out_5_ce1 ),
    .we1      ( int_out_5_we1 ),
    .be1      ( int_out_5_be1 ),
    .d1       ( int_out_5_d1 ),
    .q1       ( int_out_5_q1 )
);
// int_out_6
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_6 (
    .clk0     ( ACLK ),
    .address0 ( int_out_6_address0 ),
    .ce0      ( int_out_6_ce0 ),
    .we0      ( int_out_6_we0 ),
    .be0      ( int_out_6_be0 ),
    .d0       ( int_out_6_d0 ),
    .q0       ( int_out_6_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_6_address1 ),
    .ce1      ( int_out_6_ce1 ),
    .we1      ( int_out_6_we1 ),
    .be1      ( int_out_6_be1 ),
    .d1       ( int_out_6_d1 ),
    .q1       ( int_out_6_q1 )
);
// int_out_7
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_7 (
    .clk0     ( ACLK ),
    .address0 ( int_out_7_address0 ),
    .ce0      ( int_out_7_ce0 ),
    .we0      ( int_out_7_we0 ),
    .be0      ( int_out_7_be0 ),
    .d0       ( int_out_7_d0 ),
    .q0       ( int_out_7_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_7_address1 ),
    .ce1      ( int_out_7_ce1 ),
    .we1      ( int_out_7_we1 ),
    .be1      ( int_out_7_be1 ),
    .d1       ( int_out_7_d1 ),
    .q1       ( int_out_7_q1 )
);
// int_out_8
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_8 (
    .clk0     ( ACLK ),
    .address0 ( int_out_8_address0 ),
    .ce0      ( int_out_8_ce0 ),
    .we0      ( int_out_8_we0 ),
    .be0      ( int_out_8_be0 ),
    .d0       ( int_out_8_d0 ),
    .q0       ( int_out_8_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_8_address1 ),
    .ce1      ( int_out_8_ce1 ),
    .we1      ( int_out_8_we1 ),
    .be1      ( int_out_8_be1 ),
    .d1       ( int_out_8_d1 ),
    .q1       ( int_out_8_q1 )
);
// int_out_9
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_9 (
    .clk0     ( ACLK ),
    .address0 ( int_out_9_address0 ),
    .ce0      ( int_out_9_ce0 ),
    .we0      ( int_out_9_we0 ),
    .be0      ( int_out_9_be0 ),
    .d0       ( int_out_9_d0 ),
    .q0       ( int_out_9_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_9_address1 ),
    .ce1      ( int_out_9_ce1 ),
    .we1      ( int_out_9_we1 ),
    .be1      ( int_out_9_be1 ),
    .d1       ( int_out_9_d1 ),
    .q1       ( int_out_9_q1 )
);
// int_out_10
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_10 (
    .clk0     ( ACLK ),
    .address0 ( int_out_10_address0 ),
    .ce0      ( int_out_10_ce0 ),
    .we0      ( int_out_10_we0 ),
    .be0      ( int_out_10_be0 ),
    .d0       ( int_out_10_d0 ),
    .q0       ( int_out_10_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_10_address1 ),
    .ce1      ( int_out_10_ce1 ),
    .we1      ( int_out_10_we1 ),
    .be1      ( int_out_10_be1 ),
    .d1       ( int_out_10_d1 ),
    .q1       ( int_out_10_q1 )
);
// int_out_11
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_11 (
    .clk0     ( ACLK ),
    .address0 ( int_out_11_address0 ),
    .ce0      ( int_out_11_ce0 ),
    .we0      ( int_out_11_we0 ),
    .be0      ( int_out_11_be0 ),
    .d0       ( int_out_11_d0 ),
    .q0       ( int_out_11_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_11_address1 ),
    .ce1      ( int_out_11_ce1 ),
    .we1      ( int_out_11_we1 ),
    .be1      ( int_out_11_be1 ),
    .d1       ( int_out_11_d1 ),
    .q1       ( int_out_11_q1 )
);
// int_out_12
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_12 (
    .clk0     ( ACLK ),
    .address0 ( int_out_12_address0 ),
    .ce0      ( int_out_12_ce0 ),
    .we0      ( int_out_12_we0 ),
    .be0      ( int_out_12_be0 ),
    .d0       ( int_out_12_d0 ),
    .q0       ( int_out_12_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_12_address1 ),
    .ce1      ( int_out_12_ce1 ),
    .we1      ( int_out_12_we1 ),
    .be1      ( int_out_12_be1 ),
    .d1       ( int_out_12_d1 ),
    .q1       ( int_out_12_q1 )
);
// int_out_13
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_13 (
    .clk0     ( ACLK ),
    .address0 ( int_out_13_address0 ),
    .ce0      ( int_out_13_ce0 ),
    .we0      ( int_out_13_we0 ),
    .be0      ( int_out_13_be0 ),
    .d0       ( int_out_13_d0 ),
    .q0       ( int_out_13_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_13_address1 ),
    .ce1      ( int_out_13_ce1 ),
    .we1      ( int_out_13_we1 ),
    .be1      ( int_out_13_be1 ),
    .d1       ( int_out_13_d1 ),
    .q1       ( int_out_13_q1 )
);
// int_out_14
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_14 (
    .clk0     ( ACLK ),
    .address0 ( int_out_14_address0 ),
    .ce0      ( int_out_14_ce0 ),
    .we0      ( int_out_14_we0 ),
    .be0      ( int_out_14_be0 ),
    .d0       ( int_out_14_d0 ),
    .q0       ( int_out_14_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_14_address1 ),
    .ce1      ( int_out_14_ce1 ),
    .we1      ( int_out_14_we1 ),
    .be1      ( int_out_14_be1 ),
    .d1       ( int_out_14_d1 ),
    .q1       ( int_out_14_q1 )
);
// int_out_15
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_15 (
    .clk0     ( ACLK ),
    .address0 ( int_out_15_address0 ),
    .ce0      ( int_out_15_ce0 ),
    .we0      ( int_out_15_we0 ),
    .be0      ( int_out_15_be0 ),
    .d0       ( int_out_15_d0 ),
    .q0       ( int_out_15_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_15_address1 ),
    .ce1      ( int_out_15_ce1 ),
    .we1      ( int_out_15_we1 ),
    .be1      ( int_out_15_be1 ),
    .d1       ( int_out_15_d1 ),
    .q1       ( int_out_15_q1 )
);
// int_out_16
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_16 (
    .clk0     ( ACLK ),
    .address0 ( int_out_16_address0 ),
    .ce0      ( int_out_16_ce0 ),
    .we0      ( int_out_16_we0 ),
    .be0      ( int_out_16_be0 ),
    .d0       ( int_out_16_d0 ),
    .q0       ( int_out_16_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_16_address1 ),
    .ce1      ( int_out_16_ce1 ),
    .we1      ( int_out_16_we1 ),
    .be1      ( int_out_16_be1 ),
    .d1       ( int_out_16_d1 ),
    .q1       ( int_out_16_q1 )
);
// int_out_17
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_17 (
    .clk0     ( ACLK ),
    .address0 ( int_out_17_address0 ),
    .ce0      ( int_out_17_ce0 ),
    .we0      ( int_out_17_we0 ),
    .be0      ( int_out_17_be0 ),
    .d0       ( int_out_17_d0 ),
    .q0       ( int_out_17_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_17_address1 ),
    .ce1      ( int_out_17_ce1 ),
    .we1      ( int_out_17_we1 ),
    .be1      ( int_out_17_be1 ),
    .d1       ( int_out_17_d1 ),
    .q1       ( int_out_17_q1 )
);
// int_out_18
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_18 (
    .clk0     ( ACLK ),
    .address0 ( int_out_18_address0 ),
    .ce0      ( int_out_18_ce0 ),
    .we0      ( int_out_18_we0 ),
    .be0      ( int_out_18_be0 ),
    .d0       ( int_out_18_d0 ),
    .q0       ( int_out_18_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_18_address1 ),
    .ce1      ( int_out_18_ce1 ),
    .we1      ( int_out_18_we1 ),
    .be1      ( int_out_18_be1 ),
    .d1       ( int_out_18_d1 ),
    .q1       ( int_out_18_q1 )
);
// int_out_19
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_19 (
    .clk0     ( ACLK ),
    .address0 ( int_out_19_address0 ),
    .ce0      ( int_out_19_ce0 ),
    .we0      ( int_out_19_we0 ),
    .be0      ( int_out_19_be0 ),
    .d0       ( int_out_19_d0 ),
    .q0       ( int_out_19_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_19_address1 ),
    .ce1      ( int_out_19_ce1 ),
    .we1      ( int_out_19_we1 ),
    .be1      ( int_out_19_be1 ),
    .d1       ( int_out_19_d1 ),
    .q1       ( int_out_19_q1 )
);
// int_out_20
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_20 (
    .clk0     ( ACLK ),
    .address0 ( int_out_20_address0 ),
    .ce0      ( int_out_20_ce0 ),
    .we0      ( int_out_20_we0 ),
    .be0      ( int_out_20_be0 ),
    .d0       ( int_out_20_d0 ),
    .q0       ( int_out_20_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_20_address1 ),
    .ce1      ( int_out_20_ce1 ),
    .we1      ( int_out_20_we1 ),
    .be1      ( int_out_20_be1 ),
    .d1       ( int_out_20_d1 ),
    .q1       ( int_out_20_q1 )
);
// int_out_21
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_21 (
    .clk0     ( ACLK ),
    .address0 ( int_out_21_address0 ),
    .ce0      ( int_out_21_ce0 ),
    .we0      ( int_out_21_we0 ),
    .be0      ( int_out_21_be0 ),
    .d0       ( int_out_21_d0 ),
    .q0       ( int_out_21_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_21_address1 ),
    .ce1      ( int_out_21_ce1 ),
    .we1      ( int_out_21_we1 ),
    .be1      ( int_out_21_be1 ),
    .d1       ( int_out_21_d1 ),
    .q1       ( int_out_21_q1 )
);
// int_out_22
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_22 (
    .clk0     ( ACLK ),
    .address0 ( int_out_22_address0 ),
    .ce0      ( int_out_22_ce0 ),
    .we0      ( int_out_22_we0 ),
    .be0      ( int_out_22_be0 ),
    .d0       ( int_out_22_d0 ),
    .q0       ( int_out_22_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_22_address1 ),
    .ce1      ( int_out_22_ce1 ),
    .we1      ( int_out_22_we1 ),
    .be1      ( int_out_22_be1 ),
    .d1       ( int_out_22_d1 ),
    .q1       ( int_out_22_q1 )
);
// int_out_23
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_23 (
    .clk0     ( ACLK ),
    .address0 ( int_out_23_address0 ),
    .ce0      ( int_out_23_ce0 ),
    .we0      ( int_out_23_we0 ),
    .be0      ( int_out_23_be0 ),
    .d0       ( int_out_23_d0 ),
    .q0       ( int_out_23_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_23_address1 ),
    .ce1      ( int_out_23_ce1 ),
    .we1      ( int_out_23_we1 ),
    .be1      ( int_out_23_be1 ),
    .d1       ( int_out_23_d1 ),
    .q1       ( int_out_23_q1 )
);
// int_out_24
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_24 (
    .clk0     ( ACLK ),
    .address0 ( int_out_24_address0 ),
    .ce0      ( int_out_24_ce0 ),
    .we0      ( int_out_24_we0 ),
    .be0      ( int_out_24_be0 ),
    .d0       ( int_out_24_d0 ),
    .q0       ( int_out_24_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_24_address1 ),
    .ce1      ( int_out_24_ce1 ),
    .we1      ( int_out_24_we1 ),
    .be1      ( int_out_24_be1 ),
    .d1       ( int_out_24_d1 ),
    .q1       ( int_out_24_q1 )
);
// int_out_25
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_25 (
    .clk0     ( ACLK ),
    .address0 ( int_out_25_address0 ),
    .ce0      ( int_out_25_ce0 ),
    .we0      ( int_out_25_we0 ),
    .be0      ( int_out_25_be0 ),
    .d0       ( int_out_25_d0 ),
    .q0       ( int_out_25_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_25_address1 ),
    .ce1      ( int_out_25_ce1 ),
    .we1      ( int_out_25_we1 ),
    .be1      ( int_out_25_be1 ),
    .d1       ( int_out_25_d1 ),
    .q1       ( int_out_25_q1 )
);
// int_out_26
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_26 (
    .clk0     ( ACLK ),
    .address0 ( int_out_26_address0 ),
    .ce0      ( int_out_26_ce0 ),
    .we0      ( int_out_26_we0 ),
    .be0      ( int_out_26_be0 ),
    .d0       ( int_out_26_d0 ),
    .q0       ( int_out_26_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_26_address1 ),
    .ce1      ( int_out_26_ce1 ),
    .we1      ( int_out_26_we1 ),
    .be1      ( int_out_26_be1 ),
    .d1       ( int_out_26_d1 ),
    .q1       ( int_out_26_q1 )
);
// int_out_27
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_27 (
    .clk0     ( ACLK ),
    .address0 ( int_out_27_address0 ),
    .ce0      ( int_out_27_ce0 ),
    .we0      ( int_out_27_we0 ),
    .be0      ( int_out_27_be0 ),
    .d0       ( int_out_27_d0 ),
    .q0       ( int_out_27_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_27_address1 ),
    .ce1      ( int_out_27_ce1 ),
    .we1      ( int_out_27_we1 ),
    .be1      ( int_out_27_be1 ),
    .d1       ( int_out_27_d1 ),
    .q1       ( int_out_27_q1 )
);
// int_out_28
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_28 (
    .clk0     ( ACLK ),
    .address0 ( int_out_28_address0 ),
    .ce0      ( int_out_28_ce0 ),
    .we0      ( int_out_28_we0 ),
    .be0      ( int_out_28_be0 ),
    .d0       ( int_out_28_d0 ),
    .q0       ( int_out_28_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_28_address1 ),
    .ce1      ( int_out_28_ce1 ),
    .we1      ( int_out_28_we1 ),
    .be1      ( int_out_28_be1 ),
    .d1       ( int_out_28_d1 ),
    .q1       ( int_out_28_q1 )
);
// int_out_29
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_29 (
    .clk0     ( ACLK ),
    .address0 ( int_out_29_address0 ),
    .ce0      ( int_out_29_ce0 ),
    .we0      ( int_out_29_we0 ),
    .be0      ( int_out_29_be0 ),
    .d0       ( int_out_29_d0 ),
    .q0       ( int_out_29_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_29_address1 ),
    .ce1      ( int_out_29_ce1 ),
    .we1      ( int_out_29_we1 ),
    .be1      ( int_out_29_be1 ),
    .d1       ( int_out_29_d1 ),
    .q1       ( int_out_29_q1 )
);
// int_out_30
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_30 (
    .clk0     ( ACLK ),
    .address0 ( int_out_30_address0 ),
    .ce0      ( int_out_30_ce0 ),
    .we0      ( int_out_30_we0 ),
    .be0      ( int_out_30_be0 ),
    .d0       ( int_out_30_d0 ),
    .q0       ( int_out_30_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_30_address1 ),
    .ce1      ( int_out_30_ce1 ),
    .we1      ( int_out_30_we1 ),
    .be1      ( int_out_30_be1 ),
    .d1       ( int_out_30_d1 ),
    .q1       ( int_out_30_q1 )
);
// int_out_31
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_31 (
    .clk0     ( ACLK ),
    .address0 ( int_out_31_address0 ),
    .ce0      ( int_out_31_ce0 ),
    .we0      ( int_out_31_we0 ),
    .be0      ( int_out_31_be0 ),
    .d0       ( int_out_31_d0 ),
    .q0       ( int_out_31_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_31_address1 ),
    .ce1      ( int_out_31_ce1 ),
    .we1      ( int_out_31_we1 ),
    .be1      ( int_out_31_be1 ),
    .d1       ( int_out_31_d1 ),
    .q1       ( int_out_31_q1 )
);
// int_out_32
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_32 (
    .clk0     ( ACLK ),
    .address0 ( int_out_32_address0 ),
    .ce0      ( int_out_32_ce0 ),
    .we0      ( int_out_32_we0 ),
    .be0      ( int_out_32_be0 ),
    .d0       ( int_out_32_d0 ),
    .q0       ( int_out_32_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_32_address1 ),
    .ce1      ( int_out_32_ce1 ),
    .we1      ( int_out_32_we1 ),
    .be1      ( int_out_32_be1 ),
    .d1       ( int_out_32_d1 ),
    .q1       ( int_out_32_q1 )
);
// int_out_33
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_33 (
    .clk0     ( ACLK ),
    .address0 ( int_out_33_address0 ),
    .ce0      ( int_out_33_ce0 ),
    .we0      ( int_out_33_we0 ),
    .be0      ( int_out_33_be0 ),
    .d0       ( int_out_33_d0 ),
    .q0       ( int_out_33_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_33_address1 ),
    .ce1      ( int_out_33_ce1 ),
    .we1      ( int_out_33_we1 ),
    .be1      ( int_out_33_be1 ),
    .d1       ( int_out_33_d1 ),
    .q1       ( int_out_33_q1 )
);
// int_out_34
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_34 (
    .clk0     ( ACLK ),
    .address0 ( int_out_34_address0 ),
    .ce0      ( int_out_34_ce0 ),
    .we0      ( int_out_34_we0 ),
    .be0      ( int_out_34_be0 ),
    .d0       ( int_out_34_d0 ),
    .q0       ( int_out_34_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_34_address1 ),
    .ce1      ( int_out_34_ce1 ),
    .we1      ( int_out_34_we1 ),
    .be1      ( int_out_34_be1 ),
    .d1       ( int_out_34_d1 ),
    .q1       ( int_out_34_q1 )
);
// int_out_35
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_35 (
    .clk0     ( ACLK ),
    .address0 ( int_out_35_address0 ),
    .ce0      ( int_out_35_ce0 ),
    .we0      ( int_out_35_we0 ),
    .be0      ( int_out_35_be0 ),
    .d0       ( int_out_35_d0 ),
    .q0       ( int_out_35_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_35_address1 ),
    .ce1      ( int_out_35_ce1 ),
    .we1      ( int_out_35_we1 ),
    .be1      ( int_out_35_be1 ),
    .d1       ( int_out_35_d1 ),
    .q1       ( int_out_35_q1 )
);
// int_out_36
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_36 (
    .clk0     ( ACLK ),
    .address0 ( int_out_36_address0 ),
    .ce0      ( int_out_36_ce0 ),
    .we0      ( int_out_36_we0 ),
    .be0      ( int_out_36_be0 ),
    .d0       ( int_out_36_d0 ),
    .q0       ( int_out_36_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_36_address1 ),
    .ce1      ( int_out_36_ce1 ),
    .we1      ( int_out_36_we1 ),
    .be1      ( int_out_36_be1 ),
    .d1       ( int_out_36_d1 ),
    .q1       ( int_out_36_q1 )
);
// int_out_37
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_37 (
    .clk0     ( ACLK ),
    .address0 ( int_out_37_address0 ),
    .ce0      ( int_out_37_ce0 ),
    .we0      ( int_out_37_we0 ),
    .be0      ( int_out_37_be0 ),
    .d0       ( int_out_37_d0 ),
    .q0       ( int_out_37_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_37_address1 ),
    .ce1      ( int_out_37_ce1 ),
    .we1      ( int_out_37_we1 ),
    .be1      ( int_out_37_be1 ),
    .d1       ( int_out_37_d1 ),
    .q1       ( int_out_37_q1 )
);
// int_out_38
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_38 (
    .clk0     ( ACLK ),
    .address0 ( int_out_38_address0 ),
    .ce0      ( int_out_38_ce0 ),
    .we0      ( int_out_38_we0 ),
    .be0      ( int_out_38_be0 ),
    .d0       ( int_out_38_d0 ),
    .q0       ( int_out_38_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_38_address1 ),
    .ce1      ( int_out_38_ce1 ),
    .we1      ( int_out_38_we1 ),
    .be1      ( int_out_38_be1 ),
    .d1       ( int_out_38_d1 ),
    .q1       ( int_out_38_q1 )
);
// int_out_39
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_39 (
    .clk0     ( ACLK ),
    .address0 ( int_out_39_address0 ),
    .ce0      ( int_out_39_ce0 ),
    .we0      ( int_out_39_we0 ),
    .be0      ( int_out_39_be0 ),
    .d0       ( int_out_39_d0 ),
    .q0       ( int_out_39_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_39_address1 ),
    .ce1      ( int_out_39_ce1 ),
    .we1      ( int_out_39_we1 ),
    .be1      ( int_out_39_be1 ),
    .d1       ( int_out_39_d1 ),
    .q1       ( int_out_39_q1 )
);
// int_out_40
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_40 (
    .clk0     ( ACLK ),
    .address0 ( int_out_40_address0 ),
    .ce0      ( int_out_40_ce0 ),
    .we0      ( int_out_40_we0 ),
    .be0      ( int_out_40_be0 ),
    .d0       ( int_out_40_d0 ),
    .q0       ( int_out_40_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_40_address1 ),
    .ce1      ( int_out_40_ce1 ),
    .we1      ( int_out_40_we1 ),
    .be1      ( int_out_40_be1 ),
    .d1       ( int_out_40_d1 ),
    .q1       ( int_out_40_q1 )
);
// int_out_41
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_41 (
    .clk0     ( ACLK ),
    .address0 ( int_out_41_address0 ),
    .ce0      ( int_out_41_ce0 ),
    .we0      ( int_out_41_we0 ),
    .be0      ( int_out_41_be0 ),
    .d0       ( int_out_41_d0 ),
    .q0       ( int_out_41_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_41_address1 ),
    .ce1      ( int_out_41_ce1 ),
    .we1      ( int_out_41_we1 ),
    .be1      ( int_out_41_be1 ),
    .d1       ( int_out_41_d1 ),
    .q1       ( int_out_41_q1 )
);
// int_out_42
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_42 (
    .clk0     ( ACLK ),
    .address0 ( int_out_42_address0 ),
    .ce0      ( int_out_42_ce0 ),
    .we0      ( int_out_42_we0 ),
    .be0      ( int_out_42_be0 ),
    .d0       ( int_out_42_d0 ),
    .q0       ( int_out_42_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_42_address1 ),
    .ce1      ( int_out_42_ce1 ),
    .we1      ( int_out_42_we1 ),
    .be1      ( int_out_42_be1 ),
    .d1       ( int_out_42_d1 ),
    .q1       ( int_out_42_q1 )
);
// int_out_43
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_43 (
    .clk0     ( ACLK ),
    .address0 ( int_out_43_address0 ),
    .ce0      ( int_out_43_ce0 ),
    .we0      ( int_out_43_we0 ),
    .be0      ( int_out_43_be0 ),
    .d0       ( int_out_43_d0 ),
    .q0       ( int_out_43_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_43_address1 ),
    .ce1      ( int_out_43_ce1 ),
    .we1      ( int_out_43_we1 ),
    .be1      ( int_out_43_be1 ),
    .d1       ( int_out_43_d1 ),
    .q1       ( int_out_43_q1 )
);
// int_out_44
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_44 (
    .clk0     ( ACLK ),
    .address0 ( int_out_44_address0 ),
    .ce0      ( int_out_44_ce0 ),
    .we0      ( int_out_44_we0 ),
    .be0      ( int_out_44_be0 ),
    .d0       ( int_out_44_d0 ),
    .q0       ( int_out_44_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_44_address1 ),
    .ce1      ( int_out_44_ce1 ),
    .we1      ( int_out_44_we1 ),
    .be1      ( int_out_44_be1 ),
    .d1       ( int_out_44_d1 ),
    .q1       ( int_out_44_q1 )
);
// int_out_45
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_45 (
    .clk0     ( ACLK ),
    .address0 ( int_out_45_address0 ),
    .ce0      ( int_out_45_ce0 ),
    .we0      ( int_out_45_we0 ),
    .be0      ( int_out_45_be0 ),
    .d0       ( int_out_45_d0 ),
    .q0       ( int_out_45_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_45_address1 ),
    .ce1      ( int_out_45_ce1 ),
    .we1      ( int_out_45_we1 ),
    .be1      ( int_out_45_be1 ),
    .d1       ( int_out_45_d1 ),
    .q1       ( int_out_45_q1 )
);
// int_out_46
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_46 (
    .clk0     ( ACLK ),
    .address0 ( int_out_46_address0 ),
    .ce0      ( int_out_46_ce0 ),
    .we0      ( int_out_46_we0 ),
    .be0      ( int_out_46_be0 ),
    .d0       ( int_out_46_d0 ),
    .q0       ( int_out_46_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_46_address1 ),
    .ce1      ( int_out_46_ce1 ),
    .we1      ( int_out_46_we1 ),
    .be1      ( int_out_46_be1 ),
    .d1       ( int_out_46_d1 ),
    .q1       ( int_out_46_q1 )
);
// int_out_47
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_47 (
    .clk0     ( ACLK ),
    .address0 ( int_out_47_address0 ),
    .ce0      ( int_out_47_ce0 ),
    .we0      ( int_out_47_we0 ),
    .be0      ( int_out_47_be0 ),
    .d0       ( int_out_47_d0 ),
    .q0       ( int_out_47_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_47_address1 ),
    .ce1      ( int_out_47_ce1 ),
    .we1      ( int_out_47_we1 ),
    .be1      ( int_out_47_be1 ),
    .d1       ( int_out_47_d1 ),
    .q1       ( int_out_47_q1 )
);
// int_out_48
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_48 (
    .clk0     ( ACLK ),
    .address0 ( int_out_48_address0 ),
    .ce0      ( int_out_48_ce0 ),
    .we0      ( int_out_48_we0 ),
    .be0      ( int_out_48_be0 ),
    .d0       ( int_out_48_d0 ),
    .q0       ( int_out_48_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_48_address1 ),
    .ce1      ( int_out_48_ce1 ),
    .we1      ( int_out_48_we1 ),
    .be1      ( int_out_48_be1 ),
    .d1       ( int_out_48_d1 ),
    .q1       ( int_out_48_q1 )
);
// int_out_49
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25 )
) int_out_49 (
    .clk0     ( ACLK ),
    .address0 ( int_out_49_address0 ),
    .ce0      ( int_out_49_ce0 ),
    .we0      ( int_out_49_we0 ),
    .be0      ( int_out_49_be0 ),
    .d0       ( int_out_49_d0 ),
    .q0       ( int_out_49_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_out_49_address1 ),
    .ce1      ( int_out_49_ce1 ),
    .we1      ( int_out_49_we1 ),
    .be1      ( int_out_49_be1 ),
    .d1       ( int_out_49_d1 ),
    .q1       ( int_out_49_q1 )
);
// int_krnl
convolve_conv_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 9 )
) int_krnl (
    .clk0     ( ACLK ),
    .address0 ( int_krnl_address0 ),
    .ce0      ( int_krnl_ce0 ),
    .we0      ( int_krnl_we0 ),
    .be0      ( int_krnl_be0 ),
    .d0       ( int_krnl_d0 ),
    .q0       ( int_krnl_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_krnl_address1 ),
    .ce1      ( int_krnl_ce1 ),
    .we1      ( int_krnl_we1 ),
    .be1      ( int_krnl_be1 ),
    .d1       ( int_krnl_d1 ),
    .q1       ( int_krnl_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_in_0_read & !int_in_1_read & !int_in_2_read & !int_in_3_read & !int_in_4_read & !int_in_5_read & !int_in_6_read & !int_in_7_read & !int_in_8_read & !int_in_9_read & !int_in_10_read & !int_in_11_read & !int_in_12_read & !int_in_13_read & !int_in_14_read & !int_in_15_read & !int_in_16_read & !int_in_17_read & !int_in_18_read & !int_in_19_read & !int_in_20_read & !int_in_21_read & !int_in_22_read & !int_in_23_read & !int_in_24_read & !int_in_25_read & !int_in_26_read & !int_in_27_read & !int_in_28_read & !int_in_29_read & !int_in_30_read & !int_in_31_read & !int_in_32_read & !int_in_33_read & !int_in_34_read & !int_in_35_read & !int_in_36_read & !int_in_37_read & !int_in_38_read & !int_in_39_read & !int_in_40_read & !int_in_41_read & !int_in_42_read & !int_in_43_read & !int_in_44_read & !int_in_45_read & !int_in_46_read & !int_in_47_read & !int_in_48_read & !int_in_49_read & !int_out_0_read & !int_out_1_read & !int_out_2_read & !int_out_3_read & !int_out_4_read & !int_out_5_read & !int_out_6_read & !int_out_7_read & !int_out_8_read & !int_out_9_read & !int_out_10_read & !int_out_11_read & !int_out_12_read & !int_out_13_read & !int_out_14_read & !int_out_15_read & !int_out_16_read & !int_out_17_read & !int_out_18_read & !int_out_19_read & !int_out_20_read & !int_out_21_read & !int_out_22_read & !int_out_23_read & !int_out_24_read & !int_out_25_read & !int_out_26_read & !int_out_27_read & !int_out_28_read & !int_out_29_read & !int_out_30_read & !int_out_31_read & !int_out_32_read & !int_out_33_read & !int_out_34_read & !int_out_35_read & !int_out_36_read & !int_out_37_read & !int_out_38_read & !int_out_39_read & !int_out_40_read & !int_out_41_read & !int_out_42_read & !int_out_43_read & !int_out_44_read & !int_out_45_read & !int_out_46_read & !int_out_47_read & !int_out_48_read & !int_out_49_read & !int_krnl_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
            endcase
        end
        else if (int_in_0_read) begin
            rdata <= int_in_0_q1;
        end
        else if (int_in_1_read) begin
            rdata <= int_in_1_q1;
        end
        else if (int_in_2_read) begin
            rdata <= int_in_2_q1;
        end
        else if (int_in_3_read) begin
            rdata <= int_in_3_q1;
        end
        else if (int_in_4_read) begin
            rdata <= int_in_4_q1;
        end
        else if (int_in_5_read) begin
            rdata <= int_in_5_q1;
        end
        else if (int_in_6_read) begin
            rdata <= int_in_6_q1;
        end
        else if (int_in_7_read) begin
            rdata <= int_in_7_q1;
        end
        else if (int_in_8_read) begin
            rdata <= int_in_8_q1;
        end
        else if (int_in_9_read) begin
            rdata <= int_in_9_q1;
        end
        else if (int_in_10_read) begin
            rdata <= int_in_10_q1;
        end
        else if (int_in_11_read) begin
            rdata <= int_in_11_q1;
        end
        else if (int_in_12_read) begin
            rdata <= int_in_12_q1;
        end
        else if (int_in_13_read) begin
            rdata <= int_in_13_q1;
        end
        else if (int_in_14_read) begin
            rdata <= int_in_14_q1;
        end
        else if (int_in_15_read) begin
            rdata <= int_in_15_q1;
        end
        else if (int_in_16_read) begin
            rdata <= int_in_16_q1;
        end
        else if (int_in_17_read) begin
            rdata <= int_in_17_q1;
        end
        else if (int_in_18_read) begin
            rdata <= int_in_18_q1;
        end
        else if (int_in_19_read) begin
            rdata <= int_in_19_q1;
        end
        else if (int_in_20_read) begin
            rdata <= int_in_20_q1;
        end
        else if (int_in_21_read) begin
            rdata <= int_in_21_q1;
        end
        else if (int_in_22_read) begin
            rdata <= int_in_22_q1;
        end
        else if (int_in_23_read) begin
            rdata <= int_in_23_q1;
        end
        else if (int_in_24_read) begin
            rdata <= int_in_24_q1;
        end
        else if (int_in_25_read) begin
            rdata <= int_in_25_q1;
        end
        else if (int_in_26_read) begin
            rdata <= int_in_26_q1;
        end
        else if (int_in_27_read) begin
            rdata <= int_in_27_q1;
        end
        else if (int_in_28_read) begin
            rdata <= int_in_28_q1;
        end
        else if (int_in_29_read) begin
            rdata <= int_in_29_q1;
        end
        else if (int_in_30_read) begin
            rdata <= int_in_30_q1;
        end
        else if (int_in_31_read) begin
            rdata <= int_in_31_q1;
        end
        else if (int_in_32_read) begin
            rdata <= int_in_32_q1;
        end
        else if (int_in_33_read) begin
            rdata <= int_in_33_q1;
        end
        else if (int_in_34_read) begin
            rdata <= int_in_34_q1;
        end
        else if (int_in_35_read) begin
            rdata <= int_in_35_q1;
        end
        else if (int_in_36_read) begin
            rdata <= int_in_36_q1;
        end
        else if (int_in_37_read) begin
            rdata <= int_in_37_q1;
        end
        else if (int_in_38_read) begin
            rdata <= int_in_38_q1;
        end
        else if (int_in_39_read) begin
            rdata <= int_in_39_q1;
        end
        else if (int_in_40_read) begin
            rdata <= int_in_40_q1;
        end
        else if (int_in_41_read) begin
            rdata <= int_in_41_q1;
        end
        else if (int_in_42_read) begin
            rdata <= int_in_42_q1;
        end
        else if (int_in_43_read) begin
            rdata <= int_in_43_q1;
        end
        else if (int_in_44_read) begin
            rdata <= int_in_44_q1;
        end
        else if (int_in_45_read) begin
            rdata <= int_in_45_q1;
        end
        else if (int_in_46_read) begin
            rdata <= int_in_46_q1;
        end
        else if (int_in_47_read) begin
            rdata <= int_in_47_q1;
        end
        else if (int_in_48_read) begin
            rdata <= int_in_48_q1;
        end
        else if (int_in_49_read) begin
            rdata <= int_in_49_q1;
        end
        else if (int_out_0_read) begin
            rdata <= int_out_0_q1;
        end
        else if (int_out_1_read) begin
            rdata <= int_out_1_q1;
        end
        else if (int_out_2_read) begin
            rdata <= int_out_2_q1;
        end
        else if (int_out_3_read) begin
            rdata <= int_out_3_q1;
        end
        else if (int_out_4_read) begin
            rdata <= int_out_4_q1;
        end
        else if (int_out_5_read) begin
            rdata <= int_out_5_q1;
        end
        else if (int_out_6_read) begin
            rdata <= int_out_6_q1;
        end
        else if (int_out_7_read) begin
            rdata <= int_out_7_q1;
        end
        else if (int_out_8_read) begin
            rdata <= int_out_8_q1;
        end
        else if (int_out_9_read) begin
            rdata <= int_out_9_q1;
        end
        else if (int_out_10_read) begin
            rdata <= int_out_10_q1;
        end
        else if (int_out_11_read) begin
            rdata <= int_out_11_q1;
        end
        else if (int_out_12_read) begin
            rdata <= int_out_12_q1;
        end
        else if (int_out_13_read) begin
            rdata <= int_out_13_q1;
        end
        else if (int_out_14_read) begin
            rdata <= int_out_14_q1;
        end
        else if (int_out_15_read) begin
            rdata <= int_out_15_q1;
        end
        else if (int_out_16_read) begin
            rdata <= int_out_16_q1;
        end
        else if (int_out_17_read) begin
            rdata <= int_out_17_q1;
        end
        else if (int_out_18_read) begin
            rdata <= int_out_18_q1;
        end
        else if (int_out_19_read) begin
            rdata <= int_out_19_q1;
        end
        else if (int_out_20_read) begin
            rdata <= int_out_20_q1;
        end
        else if (int_out_21_read) begin
            rdata <= int_out_21_q1;
        end
        else if (int_out_22_read) begin
            rdata <= int_out_22_q1;
        end
        else if (int_out_23_read) begin
            rdata <= int_out_23_q1;
        end
        else if (int_out_24_read) begin
            rdata <= int_out_24_q1;
        end
        else if (int_out_25_read) begin
            rdata <= int_out_25_q1;
        end
        else if (int_out_26_read) begin
            rdata <= int_out_26_q1;
        end
        else if (int_out_27_read) begin
            rdata <= int_out_27_q1;
        end
        else if (int_out_28_read) begin
            rdata <= int_out_28_q1;
        end
        else if (int_out_29_read) begin
            rdata <= int_out_29_q1;
        end
        else if (int_out_30_read) begin
            rdata <= int_out_30_q1;
        end
        else if (int_out_31_read) begin
            rdata <= int_out_31_q1;
        end
        else if (int_out_32_read) begin
            rdata <= int_out_32_q1;
        end
        else if (int_out_33_read) begin
            rdata <= int_out_33_q1;
        end
        else if (int_out_34_read) begin
            rdata <= int_out_34_q1;
        end
        else if (int_out_35_read) begin
            rdata <= int_out_35_q1;
        end
        else if (int_out_36_read) begin
            rdata <= int_out_36_q1;
        end
        else if (int_out_37_read) begin
            rdata <= int_out_37_q1;
        end
        else if (int_out_38_read) begin
            rdata <= int_out_38_q1;
        end
        else if (int_out_39_read) begin
            rdata <= int_out_39_q1;
        end
        else if (int_out_40_read) begin
            rdata <= int_out_40_q1;
        end
        else if (int_out_41_read) begin
            rdata <= int_out_41_q1;
        end
        else if (int_out_42_read) begin
            rdata <= int_out_42_q1;
        end
        else if (int_out_43_read) begin
            rdata <= int_out_43_q1;
        end
        else if (int_out_44_read) begin
            rdata <= int_out_44_q1;
        end
        else if (int_out_45_read) begin
            rdata <= int_out_45_q1;
        end
        else if (int_out_46_read) begin
            rdata <= int_out_46_q1;
        end
        else if (int_out_47_read) begin
            rdata <= int_out_47_q1;
        end
        else if (int_out_48_read) begin
            rdata <= int_out_48_q1;
        end
        else if (int_out_49_read) begin
            rdata <= int_out_49_q1;
        end
        else if (int_krnl_read) begin
            rdata <= int_krnl_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end


//------------------------Memory logic-------------------
// in_0
assign int_in_0_address0   = in_0_address0 >> 1;
assign int_in_0_ce0        = in_0_ce0;
assign int_in_0_we0        = 1'b0;
assign int_in_0_be0        = 1'b0;
assign int_in_0_d0         = 1'b0;
assign in_0_q0             = int_in_0_q0 >> (int_in_0_shift * 16);
assign int_in_0_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_0_ce1        = ar_hs | (int_in_0_write & WVALID);
assign int_in_0_we1        = int_in_0_write & WVALID;
assign int_in_0_be1        = WSTRB;
assign int_in_0_d1         = WDATA;
// in_1
assign int_in_1_address0   = in_1_address0 >> 1;
assign int_in_1_ce0        = in_1_ce0;
assign int_in_1_we0        = 1'b0;
assign int_in_1_be0        = 1'b0;
assign int_in_1_d0         = 1'b0;
assign in_1_q0             = int_in_1_q0 >> (int_in_1_shift * 16);
assign int_in_1_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_1_ce1        = ar_hs | (int_in_1_write & WVALID);
assign int_in_1_we1        = int_in_1_write & WVALID;
assign int_in_1_be1        = WSTRB;
assign int_in_1_d1         = WDATA;
// in_2
assign int_in_2_address0   = in_2_address0 >> 1;
assign int_in_2_ce0        = in_2_ce0;
assign int_in_2_we0        = 1'b0;
assign int_in_2_be0        = 1'b0;
assign int_in_2_d0         = 1'b0;
assign in_2_q0             = int_in_2_q0 >> (int_in_2_shift * 16);
assign int_in_2_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_2_ce1        = ar_hs | (int_in_2_write & WVALID);
assign int_in_2_we1        = int_in_2_write & WVALID;
assign int_in_2_be1        = WSTRB;
assign int_in_2_d1         = WDATA;
// in_3
assign int_in_3_address0   = in_3_address0 >> 1;
assign int_in_3_ce0        = in_3_ce0;
assign int_in_3_we0        = 1'b0;
assign int_in_3_be0        = 1'b0;
assign int_in_3_d0         = 1'b0;
assign in_3_q0             = int_in_3_q0 >> (int_in_3_shift * 16);
assign int_in_3_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_3_ce1        = ar_hs | (int_in_3_write & WVALID);
assign int_in_3_we1        = int_in_3_write & WVALID;
assign int_in_3_be1        = WSTRB;
assign int_in_3_d1         = WDATA;
// in_4
assign int_in_4_address0   = in_4_address0 >> 1;
assign int_in_4_ce0        = in_4_ce0;
assign int_in_4_we0        = 1'b0;
assign int_in_4_be0        = 1'b0;
assign int_in_4_d0         = 1'b0;
assign in_4_q0             = int_in_4_q0 >> (int_in_4_shift * 16);
assign int_in_4_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_4_ce1        = ar_hs | (int_in_4_write & WVALID);
assign int_in_4_we1        = int_in_4_write & WVALID;
assign int_in_4_be1        = WSTRB;
assign int_in_4_d1         = WDATA;
// in_5
assign int_in_5_address0   = in_5_address0 >> 1;
assign int_in_5_ce0        = in_5_ce0;
assign int_in_5_we0        = 1'b0;
assign int_in_5_be0        = 1'b0;
assign int_in_5_d0         = 1'b0;
assign in_5_q0             = int_in_5_q0 >> (int_in_5_shift * 16);
assign int_in_5_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_5_ce1        = ar_hs | (int_in_5_write & WVALID);
assign int_in_5_we1        = int_in_5_write & WVALID;
assign int_in_5_be1        = WSTRB;
assign int_in_5_d1         = WDATA;
// in_6
assign int_in_6_address0   = in_6_address0 >> 1;
assign int_in_6_ce0        = in_6_ce0;
assign int_in_6_we0        = 1'b0;
assign int_in_6_be0        = 1'b0;
assign int_in_6_d0         = 1'b0;
assign in_6_q0             = int_in_6_q0 >> (int_in_6_shift * 16);
assign int_in_6_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_6_ce1        = ar_hs | (int_in_6_write & WVALID);
assign int_in_6_we1        = int_in_6_write & WVALID;
assign int_in_6_be1        = WSTRB;
assign int_in_6_d1         = WDATA;
// in_7
assign int_in_7_address0   = in_7_address0 >> 1;
assign int_in_7_ce0        = in_7_ce0;
assign int_in_7_we0        = 1'b0;
assign int_in_7_be0        = 1'b0;
assign int_in_7_d0         = 1'b0;
assign in_7_q0             = int_in_7_q0 >> (int_in_7_shift * 16);
assign int_in_7_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_7_ce1        = ar_hs | (int_in_7_write & WVALID);
assign int_in_7_we1        = int_in_7_write & WVALID;
assign int_in_7_be1        = WSTRB;
assign int_in_7_d1         = WDATA;
// in_8
assign int_in_8_address0   = in_8_address0 >> 1;
assign int_in_8_ce0        = in_8_ce0;
assign int_in_8_we0        = 1'b0;
assign int_in_8_be0        = 1'b0;
assign int_in_8_d0         = 1'b0;
assign in_8_q0             = int_in_8_q0 >> (int_in_8_shift * 16);
assign int_in_8_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_8_ce1        = ar_hs | (int_in_8_write & WVALID);
assign int_in_8_we1        = int_in_8_write & WVALID;
assign int_in_8_be1        = WSTRB;
assign int_in_8_d1         = WDATA;
// in_9
assign int_in_9_address0   = in_9_address0 >> 1;
assign int_in_9_ce0        = in_9_ce0;
assign int_in_9_we0        = 1'b0;
assign int_in_9_be0        = 1'b0;
assign int_in_9_d0         = 1'b0;
assign in_9_q0             = int_in_9_q0 >> (int_in_9_shift * 16);
assign int_in_9_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_9_ce1        = ar_hs | (int_in_9_write & WVALID);
assign int_in_9_we1        = int_in_9_write & WVALID;
assign int_in_9_be1        = WSTRB;
assign int_in_9_d1         = WDATA;
// in_10
assign int_in_10_address0  = in_10_address0 >> 1;
assign int_in_10_ce0       = in_10_ce0;
assign int_in_10_we0       = 1'b0;
assign int_in_10_be0       = 1'b0;
assign int_in_10_d0        = 1'b0;
assign in_10_q0            = int_in_10_q0 >> (int_in_10_shift * 16);
assign int_in_10_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_10_ce1       = ar_hs | (int_in_10_write & WVALID);
assign int_in_10_we1       = int_in_10_write & WVALID;
assign int_in_10_be1       = WSTRB;
assign int_in_10_d1        = WDATA;
// in_11
assign int_in_11_address0  = in_11_address0 >> 1;
assign int_in_11_ce0       = in_11_ce0;
assign int_in_11_we0       = 1'b0;
assign int_in_11_be0       = 1'b0;
assign int_in_11_d0        = 1'b0;
assign in_11_q0            = int_in_11_q0 >> (int_in_11_shift * 16);
assign int_in_11_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_11_ce1       = ar_hs | (int_in_11_write & WVALID);
assign int_in_11_we1       = int_in_11_write & WVALID;
assign int_in_11_be1       = WSTRB;
assign int_in_11_d1        = WDATA;
// in_12
assign int_in_12_address0  = in_12_address0 >> 1;
assign int_in_12_ce0       = in_12_ce0;
assign int_in_12_we0       = 1'b0;
assign int_in_12_be0       = 1'b0;
assign int_in_12_d0        = 1'b0;
assign in_12_q0            = int_in_12_q0 >> (int_in_12_shift * 16);
assign int_in_12_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_12_ce1       = ar_hs | (int_in_12_write & WVALID);
assign int_in_12_we1       = int_in_12_write & WVALID;
assign int_in_12_be1       = WSTRB;
assign int_in_12_d1        = WDATA;
// in_13
assign int_in_13_address0  = in_13_address0 >> 1;
assign int_in_13_ce0       = in_13_ce0;
assign int_in_13_we0       = 1'b0;
assign int_in_13_be0       = 1'b0;
assign int_in_13_d0        = 1'b0;
assign in_13_q0            = int_in_13_q0 >> (int_in_13_shift * 16);
assign int_in_13_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_13_ce1       = ar_hs | (int_in_13_write & WVALID);
assign int_in_13_we1       = int_in_13_write & WVALID;
assign int_in_13_be1       = WSTRB;
assign int_in_13_d1        = WDATA;
// in_14
assign int_in_14_address0  = in_14_address0 >> 1;
assign int_in_14_ce0       = in_14_ce0;
assign int_in_14_we0       = 1'b0;
assign int_in_14_be0       = 1'b0;
assign int_in_14_d0        = 1'b0;
assign in_14_q0            = int_in_14_q0 >> (int_in_14_shift * 16);
assign int_in_14_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_14_ce1       = ar_hs | (int_in_14_write & WVALID);
assign int_in_14_we1       = int_in_14_write & WVALID;
assign int_in_14_be1       = WSTRB;
assign int_in_14_d1        = WDATA;
// in_15
assign int_in_15_address0  = in_15_address0 >> 1;
assign int_in_15_ce0       = in_15_ce0;
assign int_in_15_we0       = 1'b0;
assign int_in_15_be0       = 1'b0;
assign int_in_15_d0        = 1'b0;
assign in_15_q0            = int_in_15_q0 >> (int_in_15_shift * 16);
assign int_in_15_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_15_ce1       = ar_hs | (int_in_15_write & WVALID);
assign int_in_15_we1       = int_in_15_write & WVALID;
assign int_in_15_be1       = WSTRB;
assign int_in_15_d1        = WDATA;
// in_16
assign int_in_16_address0  = in_16_address0 >> 1;
assign int_in_16_ce0       = in_16_ce0;
assign int_in_16_we0       = 1'b0;
assign int_in_16_be0       = 1'b0;
assign int_in_16_d0        = 1'b0;
assign in_16_q0            = int_in_16_q0 >> (int_in_16_shift * 16);
assign int_in_16_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_16_ce1       = ar_hs | (int_in_16_write & WVALID);
assign int_in_16_we1       = int_in_16_write & WVALID;
assign int_in_16_be1       = WSTRB;
assign int_in_16_d1        = WDATA;
// in_17
assign int_in_17_address0  = in_17_address0 >> 1;
assign int_in_17_ce0       = in_17_ce0;
assign int_in_17_we0       = 1'b0;
assign int_in_17_be0       = 1'b0;
assign int_in_17_d0        = 1'b0;
assign in_17_q0            = int_in_17_q0 >> (int_in_17_shift * 16);
assign int_in_17_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_17_ce1       = ar_hs | (int_in_17_write & WVALID);
assign int_in_17_we1       = int_in_17_write & WVALID;
assign int_in_17_be1       = WSTRB;
assign int_in_17_d1        = WDATA;
// in_18
assign int_in_18_address0  = in_18_address0 >> 1;
assign int_in_18_ce0       = in_18_ce0;
assign int_in_18_we0       = 1'b0;
assign int_in_18_be0       = 1'b0;
assign int_in_18_d0        = 1'b0;
assign in_18_q0            = int_in_18_q0 >> (int_in_18_shift * 16);
assign int_in_18_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_18_ce1       = ar_hs | (int_in_18_write & WVALID);
assign int_in_18_we1       = int_in_18_write & WVALID;
assign int_in_18_be1       = WSTRB;
assign int_in_18_d1        = WDATA;
// in_19
assign int_in_19_address0  = in_19_address0 >> 1;
assign int_in_19_ce0       = in_19_ce0;
assign int_in_19_we0       = 1'b0;
assign int_in_19_be0       = 1'b0;
assign int_in_19_d0        = 1'b0;
assign in_19_q0            = int_in_19_q0 >> (int_in_19_shift * 16);
assign int_in_19_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_19_ce1       = ar_hs | (int_in_19_write & WVALID);
assign int_in_19_we1       = int_in_19_write & WVALID;
assign int_in_19_be1       = WSTRB;
assign int_in_19_d1        = WDATA;
// in_20
assign int_in_20_address0  = in_20_address0 >> 1;
assign int_in_20_ce0       = in_20_ce0;
assign int_in_20_we0       = 1'b0;
assign int_in_20_be0       = 1'b0;
assign int_in_20_d0        = 1'b0;
assign in_20_q0            = int_in_20_q0 >> (int_in_20_shift * 16);
assign int_in_20_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_20_ce1       = ar_hs | (int_in_20_write & WVALID);
assign int_in_20_we1       = int_in_20_write & WVALID;
assign int_in_20_be1       = WSTRB;
assign int_in_20_d1        = WDATA;
// in_21
assign int_in_21_address0  = in_21_address0 >> 1;
assign int_in_21_ce0       = in_21_ce0;
assign int_in_21_we0       = 1'b0;
assign int_in_21_be0       = 1'b0;
assign int_in_21_d0        = 1'b0;
assign in_21_q0            = int_in_21_q0 >> (int_in_21_shift * 16);
assign int_in_21_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_21_ce1       = ar_hs | (int_in_21_write & WVALID);
assign int_in_21_we1       = int_in_21_write & WVALID;
assign int_in_21_be1       = WSTRB;
assign int_in_21_d1        = WDATA;
// in_22
assign int_in_22_address0  = in_22_address0 >> 1;
assign int_in_22_ce0       = in_22_ce0;
assign int_in_22_we0       = 1'b0;
assign int_in_22_be0       = 1'b0;
assign int_in_22_d0        = 1'b0;
assign in_22_q0            = int_in_22_q0 >> (int_in_22_shift * 16);
assign int_in_22_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_22_ce1       = ar_hs | (int_in_22_write & WVALID);
assign int_in_22_we1       = int_in_22_write & WVALID;
assign int_in_22_be1       = WSTRB;
assign int_in_22_d1        = WDATA;
// in_23
assign int_in_23_address0  = in_23_address0 >> 1;
assign int_in_23_ce0       = in_23_ce0;
assign int_in_23_we0       = 1'b0;
assign int_in_23_be0       = 1'b0;
assign int_in_23_d0        = 1'b0;
assign in_23_q0            = int_in_23_q0 >> (int_in_23_shift * 16);
assign int_in_23_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_23_ce1       = ar_hs | (int_in_23_write & WVALID);
assign int_in_23_we1       = int_in_23_write & WVALID;
assign int_in_23_be1       = WSTRB;
assign int_in_23_d1        = WDATA;
// in_24
assign int_in_24_address0  = in_24_address0 >> 1;
assign int_in_24_ce0       = in_24_ce0;
assign int_in_24_we0       = 1'b0;
assign int_in_24_be0       = 1'b0;
assign int_in_24_d0        = 1'b0;
assign in_24_q0            = int_in_24_q0 >> (int_in_24_shift * 16);
assign int_in_24_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_24_ce1       = ar_hs | (int_in_24_write & WVALID);
assign int_in_24_we1       = int_in_24_write & WVALID;
assign int_in_24_be1       = WSTRB;
assign int_in_24_d1        = WDATA;
// in_25
assign int_in_25_address0  = in_25_address0 >> 1;
assign int_in_25_ce0       = in_25_ce0;
assign int_in_25_we0       = 1'b0;
assign int_in_25_be0       = 1'b0;
assign int_in_25_d0        = 1'b0;
assign in_25_q0            = int_in_25_q0 >> (int_in_25_shift * 16);
assign int_in_25_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_25_ce1       = ar_hs | (int_in_25_write & WVALID);
assign int_in_25_we1       = int_in_25_write & WVALID;
assign int_in_25_be1       = WSTRB;
assign int_in_25_d1        = WDATA;
// in_26
assign int_in_26_address0  = in_26_address0 >> 1;
assign int_in_26_ce0       = in_26_ce0;
assign int_in_26_we0       = 1'b0;
assign int_in_26_be0       = 1'b0;
assign int_in_26_d0        = 1'b0;
assign in_26_q0            = int_in_26_q0 >> (int_in_26_shift * 16);
assign int_in_26_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_26_ce1       = ar_hs | (int_in_26_write & WVALID);
assign int_in_26_we1       = int_in_26_write & WVALID;
assign int_in_26_be1       = WSTRB;
assign int_in_26_d1        = WDATA;
// in_27
assign int_in_27_address0  = in_27_address0 >> 1;
assign int_in_27_ce0       = in_27_ce0;
assign int_in_27_we0       = 1'b0;
assign int_in_27_be0       = 1'b0;
assign int_in_27_d0        = 1'b0;
assign in_27_q0            = int_in_27_q0 >> (int_in_27_shift * 16);
assign int_in_27_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_27_ce1       = ar_hs | (int_in_27_write & WVALID);
assign int_in_27_we1       = int_in_27_write & WVALID;
assign int_in_27_be1       = WSTRB;
assign int_in_27_d1        = WDATA;
// in_28
assign int_in_28_address0  = in_28_address0 >> 1;
assign int_in_28_ce0       = in_28_ce0;
assign int_in_28_we0       = 1'b0;
assign int_in_28_be0       = 1'b0;
assign int_in_28_d0        = 1'b0;
assign in_28_q0            = int_in_28_q0 >> (int_in_28_shift * 16);
assign int_in_28_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_28_ce1       = ar_hs | (int_in_28_write & WVALID);
assign int_in_28_we1       = int_in_28_write & WVALID;
assign int_in_28_be1       = WSTRB;
assign int_in_28_d1        = WDATA;
// in_29
assign int_in_29_address0  = in_29_address0 >> 1;
assign int_in_29_ce0       = in_29_ce0;
assign int_in_29_we0       = 1'b0;
assign int_in_29_be0       = 1'b0;
assign int_in_29_d0        = 1'b0;
assign in_29_q0            = int_in_29_q0 >> (int_in_29_shift * 16);
assign int_in_29_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_29_ce1       = ar_hs | (int_in_29_write & WVALID);
assign int_in_29_we1       = int_in_29_write & WVALID;
assign int_in_29_be1       = WSTRB;
assign int_in_29_d1        = WDATA;
// in_30
assign int_in_30_address0  = in_30_address0 >> 1;
assign int_in_30_ce0       = in_30_ce0;
assign int_in_30_we0       = 1'b0;
assign int_in_30_be0       = 1'b0;
assign int_in_30_d0        = 1'b0;
assign in_30_q0            = int_in_30_q0 >> (int_in_30_shift * 16);
assign int_in_30_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_30_ce1       = ar_hs | (int_in_30_write & WVALID);
assign int_in_30_we1       = int_in_30_write & WVALID;
assign int_in_30_be1       = WSTRB;
assign int_in_30_d1        = WDATA;
// in_31
assign int_in_31_address0  = in_31_address0 >> 1;
assign int_in_31_ce0       = in_31_ce0;
assign int_in_31_we0       = 1'b0;
assign int_in_31_be0       = 1'b0;
assign int_in_31_d0        = 1'b0;
assign in_31_q0            = int_in_31_q0 >> (int_in_31_shift * 16);
assign int_in_31_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_31_ce1       = ar_hs | (int_in_31_write & WVALID);
assign int_in_31_we1       = int_in_31_write & WVALID;
assign int_in_31_be1       = WSTRB;
assign int_in_31_d1        = WDATA;
// in_32
assign int_in_32_address0  = in_32_address0 >> 1;
assign int_in_32_ce0       = in_32_ce0;
assign int_in_32_we0       = 1'b0;
assign int_in_32_be0       = 1'b0;
assign int_in_32_d0        = 1'b0;
assign in_32_q0            = int_in_32_q0 >> (int_in_32_shift * 16);
assign int_in_32_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_32_ce1       = ar_hs | (int_in_32_write & WVALID);
assign int_in_32_we1       = int_in_32_write & WVALID;
assign int_in_32_be1       = WSTRB;
assign int_in_32_d1        = WDATA;
// in_33
assign int_in_33_address0  = in_33_address0 >> 1;
assign int_in_33_ce0       = in_33_ce0;
assign int_in_33_we0       = 1'b0;
assign int_in_33_be0       = 1'b0;
assign int_in_33_d0        = 1'b0;
assign in_33_q0            = int_in_33_q0 >> (int_in_33_shift * 16);
assign int_in_33_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_33_ce1       = ar_hs | (int_in_33_write & WVALID);
assign int_in_33_we1       = int_in_33_write & WVALID;
assign int_in_33_be1       = WSTRB;
assign int_in_33_d1        = WDATA;
// in_34
assign int_in_34_address0  = in_34_address0 >> 1;
assign int_in_34_ce0       = in_34_ce0;
assign int_in_34_we0       = 1'b0;
assign int_in_34_be0       = 1'b0;
assign int_in_34_d0        = 1'b0;
assign in_34_q0            = int_in_34_q0 >> (int_in_34_shift * 16);
assign int_in_34_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_34_ce1       = ar_hs | (int_in_34_write & WVALID);
assign int_in_34_we1       = int_in_34_write & WVALID;
assign int_in_34_be1       = WSTRB;
assign int_in_34_d1        = WDATA;
// in_35
assign int_in_35_address0  = in_35_address0 >> 1;
assign int_in_35_ce0       = in_35_ce0;
assign int_in_35_we0       = 1'b0;
assign int_in_35_be0       = 1'b0;
assign int_in_35_d0        = 1'b0;
assign in_35_q0            = int_in_35_q0 >> (int_in_35_shift * 16);
assign int_in_35_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_35_ce1       = ar_hs | (int_in_35_write & WVALID);
assign int_in_35_we1       = int_in_35_write & WVALID;
assign int_in_35_be1       = WSTRB;
assign int_in_35_d1        = WDATA;
// in_36
assign int_in_36_address0  = in_36_address0 >> 1;
assign int_in_36_ce0       = in_36_ce0;
assign int_in_36_we0       = 1'b0;
assign int_in_36_be0       = 1'b0;
assign int_in_36_d0        = 1'b0;
assign in_36_q0            = int_in_36_q0 >> (int_in_36_shift * 16);
assign int_in_36_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_36_ce1       = ar_hs | (int_in_36_write & WVALID);
assign int_in_36_we1       = int_in_36_write & WVALID;
assign int_in_36_be1       = WSTRB;
assign int_in_36_d1        = WDATA;
// in_37
assign int_in_37_address0  = in_37_address0 >> 1;
assign int_in_37_ce0       = in_37_ce0;
assign int_in_37_we0       = 1'b0;
assign int_in_37_be0       = 1'b0;
assign int_in_37_d0        = 1'b0;
assign in_37_q0            = int_in_37_q0 >> (int_in_37_shift * 16);
assign int_in_37_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_37_ce1       = ar_hs | (int_in_37_write & WVALID);
assign int_in_37_we1       = int_in_37_write & WVALID;
assign int_in_37_be1       = WSTRB;
assign int_in_37_d1        = WDATA;
// in_38
assign int_in_38_address0  = in_38_address0 >> 1;
assign int_in_38_ce0       = in_38_ce0;
assign int_in_38_we0       = 1'b0;
assign int_in_38_be0       = 1'b0;
assign int_in_38_d0        = 1'b0;
assign in_38_q0            = int_in_38_q0 >> (int_in_38_shift * 16);
assign int_in_38_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_38_ce1       = ar_hs | (int_in_38_write & WVALID);
assign int_in_38_we1       = int_in_38_write & WVALID;
assign int_in_38_be1       = WSTRB;
assign int_in_38_d1        = WDATA;
// in_39
assign int_in_39_address0  = in_39_address0 >> 1;
assign int_in_39_ce0       = in_39_ce0;
assign int_in_39_we0       = 1'b0;
assign int_in_39_be0       = 1'b0;
assign int_in_39_d0        = 1'b0;
assign in_39_q0            = int_in_39_q0 >> (int_in_39_shift * 16);
assign int_in_39_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_39_ce1       = ar_hs | (int_in_39_write & WVALID);
assign int_in_39_we1       = int_in_39_write & WVALID;
assign int_in_39_be1       = WSTRB;
assign int_in_39_d1        = WDATA;
// in_40
assign int_in_40_address0  = in_40_address0 >> 1;
assign int_in_40_ce0       = in_40_ce0;
assign int_in_40_we0       = 1'b0;
assign int_in_40_be0       = 1'b0;
assign int_in_40_d0        = 1'b0;
assign in_40_q0            = int_in_40_q0 >> (int_in_40_shift * 16);
assign int_in_40_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_40_ce1       = ar_hs | (int_in_40_write & WVALID);
assign int_in_40_we1       = int_in_40_write & WVALID;
assign int_in_40_be1       = WSTRB;
assign int_in_40_d1        = WDATA;
// in_41
assign int_in_41_address0  = in_41_address0 >> 1;
assign int_in_41_ce0       = in_41_ce0;
assign int_in_41_we0       = 1'b0;
assign int_in_41_be0       = 1'b0;
assign int_in_41_d0        = 1'b0;
assign in_41_q0            = int_in_41_q0 >> (int_in_41_shift * 16);
assign int_in_41_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_41_ce1       = ar_hs | (int_in_41_write & WVALID);
assign int_in_41_we1       = int_in_41_write & WVALID;
assign int_in_41_be1       = WSTRB;
assign int_in_41_d1        = WDATA;
// in_42
assign int_in_42_address0  = in_42_address0 >> 1;
assign int_in_42_ce0       = in_42_ce0;
assign int_in_42_we0       = 1'b0;
assign int_in_42_be0       = 1'b0;
assign int_in_42_d0        = 1'b0;
assign in_42_q0            = int_in_42_q0 >> (int_in_42_shift * 16);
assign int_in_42_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_42_ce1       = ar_hs | (int_in_42_write & WVALID);
assign int_in_42_we1       = int_in_42_write & WVALID;
assign int_in_42_be1       = WSTRB;
assign int_in_42_d1        = WDATA;
// in_43
assign int_in_43_address0  = in_43_address0 >> 1;
assign int_in_43_ce0       = in_43_ce0;
assign int_in_43_we0       = 1'b0;
assign int_in_43_be0       = 1'b0;
assign int_in_43_d0        = 1'b0;
assign in_43_q0            = int_in_43_q0 >> (int_in_43_shift * 16);
assign int_in_43_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_43_ce1       = ar_hs | (int_in_43_write & WVALID);
assign int_in_43_we1       = int_in_43_write & WVALID;
assign int_in_43_be1       = WSTRB;
assign int_in_43_d1        = WDATA;
// in_44
assign int_in_44_address0  = in_44_address0 >> 1;
assign int_in_44_ce0       = in_44_ce0;
assign int_in_44_we0       = 1'b0;
assign int_in_44_be0       = 1'b0;
assign int_in_44_d0        = 1'b0;
assign in_44_q0            = int_in_44_q0 >> (int_in_44_shift * 16);
assign int_in_44_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_44_ce1       = ar_hs | (int_in_44_write & WVALID);
assign int_in_44_we1       = int_in_44_write & WVALID;
assign int_in_44_be1       = WSTRB;
assign int_in_44_d1        = WDATA;
// in_45
assign int_in_45_address0  = in_45_address0 >> 1;
assign int_in_45_ce0       = in_45_ce0;
assign int_in_45_we0       = 1'b0;
assign int_in_45_be0       = 1'b0;
assign int_in_45_d0        = 1'b0;
assign in_45_q0            = int_in_45_q0 >> (int_in_45_shift * 16);
assign int_in_45_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_45_ce1       = ar_hs | (int_in_45_write & WVALID);
assign int_in_45_we1       = int_in_45_write & WVALID;
assign int_in_45_be1       = WSTRB;
assign int_in_45_d1        = WDATA;
// in_46
assign int_in_46_address0  = in_46_address0 >> 1;
assign int_in_46_ce0       = in_46_ce0;
assign int_in_46_we0       = 1'b0;
assign int_in_46_be0       = 1'b0;
assign int_in_46_d0        = 1'b0;
assign in_46_q0            = int_in_46_q0 >> (int_in_46_shift * 16);
assign int_in_46_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_46_ce1       = ar_hs | (int_in_46_write & WVALID);
assign int_in_46_we1       = int_in_46_write & WVALID;
assign int_in_46_be1       = WSTRB;
assign int_in_46_d1        = WDATA;
// in_47
assign int_in_47_address0  = in_47_address0 >> 1;
assign int_in_47_ce0       = in_47_ce0;
assign int_in_47_we0       = 1'b0;
assign int_in_47_be0       = 1'b0;
assign int_in_47_d0        = 1'b0;
assign in_47_q0            = int_in_47_q0 >> (int_in_47_shift * 16);
assign int_in_47_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_47_ce1       = ar_hs | (int_in_47_write & WVALID);
assign int_in_47_we1       = int_in_47_write & WVALID;
assign int_in_47_be1       = WSTRB;
assign int_in_47_d1        = WDATA;
// in_48
assign int_in_48_address0  = in_48_address0 >> 1;
assign int_in_48_ce0       = in_48_ce0;
assign int_in_48_we0       = 1'b0;
assign int_in_48_be0       = 1'b0;
assign int_in_48_d0        = 1'b0;
assign in_48_q0            = int_in_48_q0 >> (int_in_48_shift * 16);
assign int_in_48_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_48_ce1       = ar_hs | (int_in_48_write & WVALID);
assign int_in_48_we1       = int_in_48_write & WVALID;
assign int_in_48_be1       = WSTRB;
assign int_in_48_d1        = WDATA;
// in_49
assign int_in_49_address0  = in_49_address0 >> 1;
assign int_in_49_ce0       = in_49_ce0;
assign int_in_49_we0       = 1'b0;
assign int_in_49_be0       = 1'b0;
assign int_in_49_d0        = 1'b0;
assign in_49_q0            = int_in_49_q0 >> (int_in_49_shift * 16);
assign int_in_49_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_in_49_ce1       = ar_hs | (int_in_49_write & WVALID);
assign int_in_49_we1       = int_in_49_write & WVALID;
assign int_in_49_be1       = WSTRB;
assign int_in_49_d1        = WDATA;
// out_0
assign int_out_0_address0  = out_0_address0 >> 1;
assign int_out_0_ce0       = out_0_ce0;
assign int_out_0_we0       = out_0_we0;
assign int_out_0_be0       = 3 << (out_0_address0[0] * 2);
assign int_out_0_d0        = {2{out_0_d0}};
assign int_out_0_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_0_ce1       = ar_hs | (int_out_0_write & WVALID);
assign int_out_0_we1       = int_out_0_write & WVALID;
assign int_out_0_be1       = WSTRB;
assign int_out_0_d1        = WDATA;
// out_1
assign int_out_1_address0  = out_1_address0 >> 1;
assign int_out_1_ce0       = out_1_ce0;
assign int_out_1_we0       = out_1_we0;
assign int_out_1_be0       = 3 << (out_1_address0[0] * 2);
assign int_out_1_d0        = {2{out_1_d0}};
assign int_out_1_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_1_ce1       = ar_hs | (int_out_1_write & WVALID);
assign int_out_1_we1       = int_out_1_write & WVALID;
assign int_out_1_be1       = WSTRB;
assign int_out_1_d1        = WDATA;
// out_2
assign int_out_2_address0  = out_2_address0 >> 1;
assign int_out_2_ce0       = out_2_ce0;
assign int_out_2_we0       = out_2_we0;
assign int_out_2_be0       = 3 << (out_2_address0[0] * 2);
assign int_out_2_d0        = {2{out_2_d0}};
assign int_out_2_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_2_ce1       = ar_hs | (int_out_2_write & WVALID);
assign int_out_2_we1       = int_out_2_write & WVALID;
assign int_out_2_be1       = WSTRB;
assign int_out_2_d1        = WDATA;
// out_3
assign int_out_3_address0  = out_3_address0 >> 1;
assign int_out_3_ce0       = out_3_ce0;
assign int_out_3_we0       = out_3_we0;
assign int_out_3_be0       = 3 << (out_3_address0[0] * 2);
assign int_out_3_d0        = {2{out_3_d0}};
assign int_out_3_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_3_ce1       = ar_hs | (int_out_3_write & WVALID);
assign int_out_3_we1       = int_out_3_write & WVALID;
assign int_out_3_be1       = WSTRB;
assign int_out_3_d1        = WDATA;
// out_4
assign int_out_4_address0  = out_4_address0 >> 1;
assign int_out_4_ce0       = out_4_ce0;
assign int_out_4_we0       = out_4_we0;
assign int_out_4_be0       = 3 << (out_4_address0[0] * 2);
assign int_out_4_d0        = {2{out_4_d0}};
assign int_out_4_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_4_ce1       = ar_hs | (int_out_4_write & WVALID);
assign int_out_4_we1       = int_out_4_write & WVALID;
assign int_out_4_be1       = WSTRB;
assign int_out_4_d1        = WDATA;
// out_5
assign int_out_5_address0  = out_5_address0 >> 1;
assign int_out_5_ce0       = out_5_ce0;
assign int_out_5_we0       = out_5_we0;
assign int_out_5_be0       = 3 << (out_5_address0[0] * 2);
assign int_out_5_d0        = {2{out_5_d0}};
assign int_out_5_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_5_ce1       = ar_hs | (int_out_5_write & WVALID);
assign int_out_5_we1       = int_out_5_write & WVALID;
assign int_out_5_be1       = WSTRB;
assign int_out_5_d1        = WDATA;
// out_6
assign int_out_6_address0  = out_6_address0 >> 1;
assign int_out_6_ce0       = out_6_ce0;
assign int_out_6_we0       = out_6_we0;
assign int_out_6_be0       = 3 << (out_6_address0[0] * 2);
assign int_out_6_d0        = {2{out_6_d0}};
assign int_out_6_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_6_ce1       = ar_hs | (int_out_6_write & WVALID);
assign int_out_6_we1       = int_out_6_write & WVALID;
assign int_out_6_be1       = WSTRB;
assign int_out_6_d1        = WDATA;
// out_7
assign int_out_7_address0  = out_7_address0 >> 1;
assign int_out_7_ce0       = out_7_ce0;
assign int_out_7_we0       = out_7_we0;
assign int_out_7_be0       = 3 << (out_7_address0[0] * 2);
assign int_out_7_d0        = {2{out_7_d0}};
assign int_out_7_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_7_ce1       = ar_hs | (int_out_7_write & WVALID);
assign int_out_7_we1       = int_out_7_write & WVALID;
assign int_out_7_be1       = WSTRB;
assign int_out_7_d1        = WDATA;
// out_8
assign int_out_8_address0  = out_8_address0 >> 1;
assign int_out_8_ce0       = out_8_ce0;
assign int_out_8_we0       = out_8_we0;
assign int_out_8_be0       = 3 << (out_8_address0[0] * 2);
assign int_out_8_d0        = {2{out_8_d0}};
assign int_out_8_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_8_ce1       = ar_hs | (int_out_8_write & WVALID);
assign int_out_8_we1       = int_out_8_write & WVALID;
assign int_out_8_be1       = WSTRB;
assign int_out_8_d1        = WDATA;
// out_9
assign int_out_9_address0  = out_9_address0 >> 1;
assign int_out_9_ce0       = out_9_ce0;
assign int_out_9_we0       = out_9_we0;
assign int_out_9_be0       = 3 << (out_9_address0[0] * 2);
assign int_out_9_d0        = {2{out_9_d0}};
assign int_out_9_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_9_ce1       = ar_hs | (int_out_9_write & WVALID);
assign int_out_9_we1       = int_out_9_write & WVALID;
assign int_out_9_be1       = WSTRB;
assign int_out_9_d1        = WDATA;
// out_10
assign int_out_10_address0 = out_10_address0 >> 1;
assign int_out_10_ce0      = out_10_ce0;
assign int_out_10_we0      = out_10_we0;
assign int_out_10_be0      = 3 << (out_10_address0[0] * 2);
assign int_out_10_d0       = {2{out_10_d0}};
assign int_out_10_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_10_ce1      = ar_hs | (int_out_10_write & WVALID);
assign int_out_10_we1      = int_out_10_write & WVALID;
assign int_out_10_be1      = WSTRB;
assign int_out_10_d1       = WDATA;
// out_11
assign int_out_11_address0 = out_11_address0 >> 1;
assign int_out_11_ce0      = out_11_ce0;
assign int_out_11_we0      = out_11_we0;
assign int_out_11_be0      = 3 << (out_11_address0[0] * 2);
assign int_out_11_d0       = {2{out_11_d0}};
assign int_out_11_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_11_ce1      = ar_hs | (int_out_11_write & WVALID);
assign int_out_11_we1      = int_out_11_write & WVALID;
assign int_out_11_be1      = WSTRB;
assign int_out_11_d1       = WDATA;
// out_12
assign int_out_12_address0 = out_12_address0 >> 1;
assign int_out_12_ce0      = out_12_ce0;
assign int_out_12_we0      = out_12_we0;
assign int_out_12_be0      = 3 << (out_12_address0[0] * 2);
assign int_out_12_d0       = {2{out_12_d0}};
assign int_out_12_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_12_ce1      = ar_hs | (int_out_12_write & WVALID);
assign int_out_12_we1      = int_out_12_write & WVALID;
assign int_out_12_be1      = WSTRB;
assign int_out_12_d1       = WDATA;
// out_13
assign int_out_13_address0 = out_13_address0 >> 1;
assign int_out_13_ce0      = out_13_ce0;
assign int_out_13_we0      = out_13_we0;
assign int_out_13_be0      = 3 << (out_13_address0[0] * 2);
assign int_out_13_d0       = {2{out_13_d0}};
assign int_out_13_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_13_ce1      = ar_hs | (int_out_13_write & WVALID);
assign int_out_13_we1      = int_out_13_write & WVALID;
assign int_out_13_be1      = WSTRB;
assign int_out_13_d1       = WDATA;
// out_14
assign int_out_14_address0 = out_14_address0 >> 1;
assign int_out_14_ce0      = out_14_ce0;
assign int_out_14_we0      = out_14_we0;
assign int_out_14_be0      = 3 << (out_14_address0[0] * 2);
assign int_out_14_d0       = {2{out_14_d0}};
assign int_out_14_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_14_ce1      = ar_hs | (int_out_14_write & WVALID);
assign int_out_14_we1      = int_out_14_write & WVALID;
assign int_out_14_be1      = WSTRB;
assign int_out_14_d1       = WDATA;
// out_15
assign int_out_15_address0 = out_15_address0 >> 1;
assign int_out_15_ce0      = out_15_ce0;
assign int_out_15_we0      = out_15_we0;
assign int_out_15_be0      = 3 << (out_15_address0[0] * 2);
assign int_out_15_d0       = {2{out_15_d0}};
assign int_out_15_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_15_ce1      = ar_hs | (int_out_15_write & WVALID);
assign int_out_15_we1      = int_out_15_write & WVALID;
assign int_out_15_be1      = WSTRB;
assign int_out_15_d1       = WDATA;
// out_16
assign int_out_16_address0 = out_16_address0 >> 1;
assign int_out_16_ce0      = out_16_ce0;
assign int_out_16_we0      = out_16_we0;
assign int_out_16_be0      = 3 << (out_16_address0[0] * 2);
assign int_out_16_d0       = {2{out_16_d0}};
assign int_out_16_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_16_ce1      = ar_hs | (int_out_16_write & WVALID);
assign int_out_16_we1      = int_out_16_write & WVALID;
assign int_out_16_be1      = WSTRB;
assign int_out_16_d1       = WDATA;
// out_17
assign int_out_17_address0 = out_17_address0 >> 1;
assign int_out_17_ce0      = out_17_ce0;
assign int_out_17_we0      = out_17_we0;
assign int_out_17_be0      = 3 << (out_17_address0[0] * 2);
assign int_out_17_d0       = {2{out_17_d0}};
assign int_out_17_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_17_ce1      = ar_hs | (int_out_17_write & WVALID);
assign int_out_17_we1      = int_out_17_write & WVALID;
assign int_out_17_be1      = WSTRB;
assign int_out_17_d1       = WDATA;
// out_18
assign int_out_18_address0 = out_18_address0 >> 1;
assign int_out_18_ce0      = out_18_ce0;
assign int_out_18_we0      = out_18_we0;
assign int_out_18_be0      = 3 << (out_18_address0[0] * 2);
assign int_out_18_d0       = {2{out_18_d0}};
assign int_out_18_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_18_ce1      = ar_hs | (int_out_18_write & WVALID);
assign int_out_18_we1      = int_out_18_write & WVALID;
assign int_out_18_be1      = WSTRB;
assign int_out_18_d1       = WDATA;
// out_19
assign int_out_19_address0 = out_19_address0 >> 1;
assign int_out_19_ce0      = out_19_ce0;
assign int_out_19_we0      = out_19_we0;
assign int_out_19_be0      = 3 << (out_19_address0[0] * 2);
assign int_out_19_d0       = {2{out_19_d0}};
assign int_out_19_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_19_ce1      = ar_hs | (int_out_19_write & WVALID);
assign int_out_19_we1      = int_out_19_write & WVALID;
assign int_out_19_be1      = WSTRB;
assign int_out_19_d1       = WDATA;
// out_20
assign int_out_20_address0 = out_20_address0 >> 1;
assign int_out_20_ce0      = out_20_ce0;
assign int_out_20_we0      = out_20_we0;
assign int_out_20_be0      = 3 << (out_20_address0[0] * 2);
assign int_out_20_d0       = {2{out_20_d0}};
assign int_out_20_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_20_ce1      = ar_hs | (int_out_20_write & WVALID);
assign int_out_20_we1      = int_out_20_write & WVALID;
assign int_out_20_be1      = WSTRB;
assign int_out_20_d1       = WDATA;
// out_21
assign int_out_21_address0 = out_21_address0 >> 1;
assign int_out_21_ce0      = out_21_ce0;
assign int_out_21_we0      = out_21_we0;
assign int_out_21_be0      = 3 << (out_21_address0[0] * 2);
assign int_out_21_d0       = {2{out_21_d0}};
assign int_out_21_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_21_ce1      = ar_hs | (int_out_21_write & WVALID);
assign int_out_21_we1      = int_out_21_write & WVALID;
assign int_out_21_be1      = WSTRB;
assign int_out_21_d1       = WDATA;
// out_22
assign int_out_22_address0 = out_22_address0 >> 1;
assign int_out_22_ce0      = out_22_ce0;
assign int_out_22_we0      = out_22_we0;
assign int_out_22_be0      = 3 << (out_22_address0[0] * 2);
assign int_out_22_d0       = {2{out_22_d0}};
assign int_out_22_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_22_ce1      = ar_hs | (int_out_22_write & WVALID);
assign int_out_22_we1      = int_out_22_write & WVALID;
assign int_out_22_be1      = WSTRB;
assign int_out_22_d1       = WDATA;
// out_23
assign int_out_23_address0 = out_23_address0 >> 1;
assign int_out_23_ce0      = out_23_ce0;
assign int_out_23_we0      = out_23_we0;
assign int_out_23_be0      = 3 << (out_23_address0[0] * 2);
assign int_out_23_d0       = {2{out_23_d0}};
assign int_out_23_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_23_ce1      = ar_hs | (int_out_23_write & WVALID);
assign int_out_23_we1      = int_out_23_write & WVALID;
assign int_out_23_be1      = WSTRB;
assign int_out_23_d1       = WDATA;
// out_24
assign int_out_24_address0 = out_24_address0 >> 1;
assign int_out_24_ce0      = out_24_ce0;
assign int_out_24_we0      = out_24_we0;
assign int_out_24_be0      = 3 << (out_24_address0[0] * 2);
assign int_out_24_d0       = {2{out_24_d0}};
assign int_out_24_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_24_ce1      = ar_hs | (int_out_24_write & WVALID);
assign int_out_24_we1      = int_out_24_write & WVALID;
assign int_out_24_be1      = WSTRB;
assign int_out_24_d1       = WDATA;
// out_25
assign int_out_25_address0 = out_25_address0 >> 1;
assign int_out_25_ce0      = out_25_ce0;
assign int_out_25_we0      = out_25_we0;
assign int_out_25_be0      = 3 << (out_25_address0[0] * 2);
assign int_out_25_d0       = {2{out_25_d0}};
assign int_out_25_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_25_ce1      = ar_hs | (int_out_25_write & WVALID);
assign int_out_25_we1      = int_out_25_write & WVALID;
assign int_out_25_be1      = WSTRB;
assign int_out_25_d1       = WDATA;
// out_26
assign int_out_26_address0 = out_26_address0 >> 1;
assign int_out_26_ce0      = out_26_ce0;
assign int_out_26_we0      = out_26_we0;
assign int_out_26_be0      = 3 << (out_26_address0[0] * 2);
assign int_out_26_d0       = {2{out_26_d0}};
assign int_out_26_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_26_ce1      = ar_hs | (int_out_26_write & WVALID);
assign int_out_26_we1      = int_out_26_write & WVALID;
assign int_out_26_be1      = WSTRB;
assign int_out_26_d1       = WDATA;
// out_27
assign int_out_27_address0 = out_27_address0 >> 1;
assign int_out_27_ce0      = out_27_ce0;
assign int_out_27_we0      = out_27_we0;
assign int_out_27_be0      = 3 << (out_27_address0[0] * 2);
assign int_out_27_d0       = {2{out_27_d0}};
assign int_out_27_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_27_ce1      = ar_hs | (int_out_27_write & WVALID);
assign int_out_27_we1      = int_out_27_write & WVALID;
assign int_out_27_be1      = WSTRB;
assign int_out_27_d1       = WDATA;
// out_28
assign int_out_28_address0 = out_28_address0 >> 1;
assign int_out_28_ce0      = out_28_ce0;
assign int_out_28_we0      = out_28_we0;
assign int_out_28_be0      = 3 << (out_28_address0[0] * 2);
assign int_out_28_d0       = {2{out_28_d0}};
assign int_out_28_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_28_ce1      = ar_hs | (int_out_28_write & WVALID);
assign int_out_28_we1      = int_out_28_write & WVALID;
assign int_out_28_be1      = WSTRB;
assign int_out_28_d1       = WDATA;
// out_29
assign int_out_29_address0 = out_29_address0 >> 1;
assign int_out_29_ce0      = out_29_ce0;
assign int_out_29_we0      = out_29_we0;
assign int_out_29_be0      = 3 << (out_29_address0[0] * 2);
assign int_out_29_d0       = {2{out_29_d0}};
assign int_out_29_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_29_ce1      = ar_hs | (int_out_29_write & WVALID);
assign int_out_29_we1      = int_out_29_write & WVALID;
assign int_out_29_be1      = WSTRB;
assign int_out_29_d1       = WDATA;
// out_30
assign int_out_30_address0 = out_30_address0 >> 1;
assign int_out_30_ce0      = out_30_ce0;
assign int_out_30_we0      = out_30_we0;
assign int_out_30_be0      = 3 << (out_30_address0[0] * 2);
assign int_out_30_d0       = {2{out_30_d0}};
assign int_out_30_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_30_ce1      = ar_hs | (int_out_30_write & WVALID);
assign int_out_30_we1      = int_out_30_write & WVALID;
assign int_out_30_be1      = WSTRB;
assign int_out_30_d1       = WDATA;
// out_31
assign int_out_31_address0 = out_31_address0 >> 1;
assign int_out_31_ce0      = out_31_ce0;
assign int_out_31_we0      = out_31_we0;
assign int_out_31_be0      = 3 << (out_31_address0[0] * 2);
assign int_out_31_d0       = {2{out_31_d0}};
assign int_out_31_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_31_ce1      = ar_hs | (int_out_31_write & WVALID);
assign int_out_31_we1      = int_out_31_write & WVALID;
assign int_out_31_be1      = WSTRB;
assign int_out_31_d1       = WDATA;
// out_32
assign int_out_32_address0 = out_32_address0 >> 1;
assign int_out_32_ce0      = out_32_ce0;
assign int_out_32_we0      = out_32_we0;
assign int_out_32_be0      = 3 << (out_32_address0[0] * 2);
assign int_out_32_d0       = {2{out_32_d0}};
assign int_out_32_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_32_ce1      = ar_hs | (int_out_32_write & WVALID);
assign int_out_32_we1      = int_out_32_write & WVALID;
assign int_out_32_be1      = WSTRB;
assign int_out_32_d1       = WDATA;
// out_33
assign int_out_33_address0 = out_33_address0 >> 1;
assign int_out_33_ce0      = out_33_ce0;
assign int_out_33_we0      = out_33_we0;
assign int_out_33_be0      = 3 << (out_33_address0[0] * 2);
assign int_out_33_d0       = {2{out_33_d0}};
assign int_out_33_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_33_ce1      = ar_hs | (int_out_33_write & WVALID);
assign int_out_33_we1      = int_out_33_write & WVALID;
assign int_out_33_be1      = WSTRB;
assign int_out_33_d1       = WDATA;
// out_34
assign int_out_34_address0 = out_34_address0 >> 1;
assign int_out_34_ce0      = out_34_ce0;
assign int_out_34_we0      = out_34_we0;
assign int_out_34_be0      = 3 << (out_34_address0[0] * 2);
assign int_out_34_d0       = {2{out_34_d0}};
assign int_out_34_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_34_ce1      = ar_hs | (int_out_34_write & WVALID);
assign int_out_34_we1      = int_out_34_write & WVALID;
assign int_out_34_be1      = WSTRB;
assign int_out_34_d1       = WDATA;
// out_35
assign int_out_35_address0 = out_35_address0 >> 1;
assign int_out_35_ce0      = out_35_ce0;
assign int_out_35_we0      = out_35_we0;
assign int_out_35_be0      = 3 << (out_35_address0[0] * 2);
assign int_out_35_d0       = {2{out_35_d0}};
assign int_out_35_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_35_ce1      = ar_hs | (int_out_35_write & WVALID);
assign int_out_35_we1      = int_out_35_write & WVALID;
assign int_out_35_be1      = WSTRB;
assign int_out_35_d1       = WDATA;
// out_36
assign int_out_36_address0 = out_36_address0 >> 1;
assign int_out_36_ce0      = out_36_ce0;
assign int_out_36_we0      = out_36_we0;
assign int_out_36_be0      = 3 << (out_36_address0[0] * 2);
assign int_out_36_d0       = {2{out_36_d0}};
assign int_out_36_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_36_ce1      = ar_hs | (int_out_36_write & WVALID);
assign int_out_36_we1      = int_out_36_write & WVALID;
assign int_out_36_be1      = WSTRB;
assign int_out_36_d1       = WDATA;
// out_37
assign int_out_37_address0 = out_37_address0 >> 1;
assign int_out_37_ce0      = out_37_ce0;
assign int_out_37_we0      = out_37_we0;
assign int_out_37_be0      = 3 << (out_37_address0[0] * 2);
assign int_out_37_d0       = {2{out_37_d0}};
assign int_out_37_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_37_ce1      = ar_hs | (int_out_37_write & WVALID);
assign int_out_37_we1      = int_out_37_write & WVALID;
assign int_out_37_be1      = WSTRB;
assign int_out_37_d1       = WDATA;
// out_38
assign int_out_38_address0 = out_38_address0 >> 1;
assign int_out_38_ce0      = out_38_ce0;
assign int_out_38_we0      = out_38_we0;
assign int_out_38_be0      = 3 << (out_38_address0[0] * 2);
assign int_out_38_d0       = {2{out_38_d0}};
assign int_out_38_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_38_ce1      = ar_hs | (int_out_38_write & WVALID);
assign int_out_38_we1      = int_out_38_write & WVALID;
assign int_out_38_be1      = WSTRB;
assign int_out_38_d1       = WDATA;
// out_39
assign int_out_39_address0 = out_39_address0 >> 1;
assign int_out_39_ce0      = out_39_ce0;
assign int_out_39_we0      = out_39_we0;
assign int_out_39_be0      = 3 << (out_39_address0[0] * 2);
assign int_out_39_d0       = {2{out_39_d0}};
assign int_out_39_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_39_ce1      = ar_hs | (int_out_39_write & WVALID);
assign int_out_39_we1      = int_out_39_write & WVALID;
assign int_out_39_be1      = WSTRB;
assign int_out_39_d1       = WDATA;
// out_40
assign int_out_40_address0 = out_40_address0 >> 1;
assign int_out_40_ce0      = out_40_ce0;
assign int_out_40_we0      = out_40_we0;
assign int_out_40_be0      = 3 << (out_40_address0[0] * 2);
assign int_out_40_d0       = {2{out_40_d0}};
assign int_out_40_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_40_ce1      = ar_hs | (int_out_40_write & WVALID);
assign int_out_40_we1      = int_out_40_write & WVALID;
assign int_out_40_be1      = WSTRB;
assign int_out_40_d1       = WDATA;
// out_41
assign int_out_41_address0 = out_41_address0 >> 1;
assign int_out_41_ce0      = out_41_ce0;
assign int_out_41_we0      = out_41_we0;
assign int_out_41_be0      = 3 << (out_41_address0[0] * 2);
assign int_out_41_d0       = {2{out_41_d0}};
assign int_out_41_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_41_ce1      = ar_hs | (int_out_41_write & WVALID);
assign int_out_41_we1      = int_out_41_write & WVALID;
assign int_out_41_be1      = WSTRB;
assign int_out_41_d1       = WDATA;
// out_42
assign int_out_42_address0 = out_42_address0 >> 1;
assign int_out_42_ce0      = out_42_ce0;
assign int_out_42_we0      = out_42_we0;
assign int_out_42_be0      = 3 << (out_42_address0[0] * 2);
assign int_out_42_d0       = {2{out_42_d0}};
assign int_out_42_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_42_ce1      = ar_hs | (int_out_42_write & WVALID);
assign int_out_42_we1      = int_out_42_write & WVALID;
assign int_out_42_be1      = WSTRB;
assign int_out_42_d1       = WDATA;
// out_43
assign int_out_43_address0 = out_43_address0 >> 1;
assign int_out_43_ce0      = out_43_ce0;
assign int_out_43_we0      = out_43_we0;
assign int_out_43_be0      = 3 << (out_43_address0[0] * 2);
assign int_out_43_d0       = {2{out_43_d0}};
assign int_out_43_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_43_ce1      = ar_hs | (int_out_43_write & WVALID);
assign int_out_43_we1      = int_out_43_write & WVALID;
assign int_out_43_be1      = WSTRB;
assign int_out_43_d1       = WDATA;
// out_44
assign int_out_44_address0 = out_44_address0 >> 1;
assign int_out_44_ce0      = out_44_ce0;
assign int_out_44_we0      = out_44_we0;
assign int_out_44_be0      = 3 << (out_44_address0[0] * 2);
assign int_out_44_d0       = {2{out_44_d0}};
assign int_out_44_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_44_ce1      = ar_hs | (int_out_44_write & WVALID);
assign int_out_44_we1      = int_out_44_write & WVALID;
assign int_out_44_be1      = WSTRB;
assign int_out_44_d1       = WDATA;
// out_45
assign int_out_45_address0 = out_45_address0 >> 1;
assign int_out_45_ce0      = out_45_ce0;
assign int_out_45_we0      = out_45_we0;
assign int_out_45_be0      = 3 << (out_45_address0[0] * 2);
assign int_out_45_d0       = {2{out_45_d0}};
assign int_out_45_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_45_ce1      = ar_hs | (int_out_45_write & WVALID);
assign int_out_45_we1      = int_out_45_write & WVALID;
assign int_out_45_be1      = WSTRB;
assign int_out_45_d1       = WDATA;
// out_46
assign int_out_46_address0 = out_46_address0 >> 1;
assign int_out_46_ce0      = out_46_ce0;
assign int_out_46_we0      = out_46_we0;
assign int_out_46_be0      = 3 << (out_46_address0[0] * 2);
assign int_out_46_d0       = {2{out_46_d0}};
assign int_out_46_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_46_ce1      = ar_hs | (int_out_46_write & WVALID);
assign int_out_46_we1      = int_out_46_write & WVALID;
assign int_out_46_be1      = WSTRB;
assign int_out_46_d1       = WDATA;
// out_47
assign int_out_47_address0 = out_47_address0 >> 1;
assign int_out_47_ce0      = out_47_ce0;
assign int_out_47_we0      = out_47_we0;
assign int_out_47_be0      = 3 << (out_47_address0[0] * 2);
assign int_out_47_d0       = {2{out_47_d0}};
assign int_out_47_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_47_ce1      = ar_hs | (int_out_47_write & WVALID);
assign int_out_47_we1      = int_out_47_write & WVALID;
assign int_out_47_be1      = WSTRB;
assign int_out_47_d1       = WDATA;
// out_48
assign int_out_48_address0 = out_48_address0 >> 1;
assign int_out_48_ce0      = out_48_ce0;
assign int_out_48_we0      = out_48_we0;
assign int_out_48_be0      = 3 << (out_48_address0[0] * 2);
assign int_out_48_d0       = {2{out_48_d0}};
assign int_out_48_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_48_ce1      = ar_hs | (int_out_48_write & WVALID);
assign int_out_48_we1      = int_out_48_write & WVALID;
assign int_out_48_be1      = WSTRB;
assign int_out_48_d1       = WDATA;
// out_49
assign int_out_49_address0 = out_49_address0 >> 1;
assign int_out_49_ce0      = out_49_ce0;
assign int_out_49_we0      = out_49_we0;
assign int_out_49_be0      = 3 << (out_49_address0[0] * 2);
assign int_out_49_d0       = {2{out_49_d0}};
assign int_out_49_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_out_49_ce1      = ar_hs | (int_out_49_write & WVALID);
assign int_out_49_we1      = int_out_49_write & WVALID;
assign int_out_49_be1      = WSTRB;
assign int_out_49_d1       = WDATA;
// krnl
assign int_krnl_address0   = krnl_address0;
assign int_krnl_ce0        = krnl_ce0;
assign int_krnl_we0        = 1'b0;
assign int_krnl_be0        = 1'b0;
assign int_krnl_d0         = 1'b0;
assign krnl_q0             = int_krnl_q0;
assign int_krnl_address1   = ar_hs? raddr[5:2] : waddr[5:2];
assign int_krnl_ce1        = ar_hs | (int_krnl_write & WVALID);
assign int_krnl_we1        = int_krnl_write & WVALID;
assign int_krnl_be1        = WSTRB;
assign int_krnl_d1         = WDATA;
// int_in_0_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_0_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_0_BASE && raddr <= ADDR_IN_0_HIGH)
            int_in_0_read <= 1'b1;
        else
            int_in_0_read <= 1'b0;
    end
end

// int_in_0_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_0_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_0_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_0_HIGH)
            int_in_0_write <= 1'b1;
        else if (WVALID)
            int_in_0_write <= 1'b0;
    end
end

// int_in_0_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_0_ce0)
            int_in_0_shift <= in_0_address0[0];
    end
end

// int_in_1_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_1_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_1_BASE && raddr <= ADDR_IN_1_HIGH)
            int_in_1_read <= 1'b1;
        else
            int_in_1_read <= 1'b0;
    end
end

// int_in_1_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_1_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_1_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_1_HIGH)
            int_in_1_write <= 1'b1;
        else if (WVALID)
            int_in_1_write <= 1'b0;
    end
end

// int_in_1_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_1_ce0)
            int_in_1_shift <= in_1_address0[0];
    end
end

// int_in_2_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_2_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_2_BASE && raddr <= ADDR_IN_2_HIGH)
            int_in_2_read <= 1'b1;
        else
            int_in_2_read <= 1'b0;
    end
end

// int_in_2_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_2_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_2_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_2_HIGH)
            int_in_2_write <= 1'b1;
        else if (WVALID)
            int_in_2_write <= 1'b0;
    end
end

// int_in_2_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_2_ce0)
            int_in_2_shift <= in_2_address0[0];
    end
end

// int_in_3_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_3_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_3_BASE && raddr <= ADDR_IN_3_HIGH)
            int_in_3_read <= 1'b1;
        else
            int_in_3_read <= 1'b0;
    end
end

// int_in_3_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_3_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_3_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_3_HIGH)
            int_in_3_write <= 1'b1;
        else if (WVALID)
            int_in_3_write <= 1'b0;
    end
end

// int_in_3_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_3_ce0)
            int_in_3_shift <= in_3_address0[0];
    end
end

// int_in_4_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_4_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_4_BASE && raddr <= ADDR_IN_4_HIGH)
            int_in_4_read <= 1'b1;
        else
            int_in_4_read <= 1'b0;
    end
end

// int_in_4_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_4_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_4_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_4_HIGH)
            int_in_4_write <= 1'b1;
        else if (WVALID)
            int_in_4_write <= 1'b0;
    end
end

// int_in_4_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_4_ce0)
            int_in_4_shift <= in_4_address0[0];
    end
end

// int_in_5_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_5_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_5_BASE && raddr <= ADDR_IN_5_HIGH)
            int_in_5_read <= 1'b1;
        else
            int_in_5_read <= 1'b0;
    end
end

// int_in_5_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_5_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_5_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_5_HIGH)
            int_in_5_write <= 1'b1;
        else if (WVALID)
            int_in_5_write <= 1'b0;
    end
end

// int_in_5_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_5_ce0)
            int_in_5_shift <= in_5_address0[0];
    end
end

// int_in_6_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_6_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_6_BASE && raddr <= ADDR_IN_6_HIGH)
            int_in_6_read <= 1'b1;
        else
            int_in_6_read <= 1'b0;
    end
end

// int_in_6_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_6_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_6_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_6_HIGH)
            int_in_6_write <= 1'b1;
        else if (WVALID)
            int_in_6_write <= 1'b0;
    end
end

// int_in_6_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_6_ce0)
            int_in_6_shift <= in_6_address0[0];
    end
end

// int_in_7_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_7_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_7_BASE && raddr <= ADDR_IN_7_HIGH)
            int_in_7_read <= 1'b1;
        else
            int_in_7_read <= 1'b0;
    end
end

// int_in_7_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_7_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_7_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_7_HIGH)
            int_in_7_write <= 1'b1;
        else if (WVALID)
            int_in_7_write <= 1'b0;
    end
end

// int_in_7_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_7_ce0)
            int_in_7_shift <= in_7_address0[0];
    end
end

// int_in_8_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_8_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_8_BASE && raddr <= ADDR_IN_8_HIGH)
            int_in_8_read <= 1'b1;
        else
            int_in_8_read <= 1'b0;
    end
end

// int_in_8_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_8_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_8_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_8_HIGH)
            int_in_8_write <= 1'b1;
        else if (WVALID)
            int_in_8_write <= 1'b0;
    end
end

// int_in_8_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_8_ce0)
            int_in_8_shift <= in_8_address0[0];
    end
end

// int_in_9_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_9_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_9_BASE && raddr <= ADDR_IN_9_HIGH)
            int_in_9_read <= 1'b1;
        else
            int_in_9_read <= 1'b0;
    end
end

// int_in_9_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_9_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_9_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_9_HIGH)
            int_in_9_write <= 1'b1;
        else if (WVALID)
            int_in_9_write <= 1'b0;
    end
end

// int_in_9_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_9_ce0)
            int_in_9_shift <= in_9_address0[0];
    end
end

// int_in_10_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_10_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_10_BASE && raddr <= ADDR_IN_10_HIGH)
            int_in_10_read <= 1'b1;
        else
            int_in_10_read <= 1'b0;
    end
end

// int_in_10_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_10_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_10_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_10_HIGH)
            int_in_10_write <= 1'b1;
        else if (WVALID)
            int_in_10_write <= 1'b0;
    end
end

// int_in_10_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_10_ce0)
            int_in_10_shift <= in_10_address0[0];
    end
end

// int_in_11_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_11_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_11_BASE && raddr <= ADDR_IN_11_HIGH)
            int_in_11_read <= 1'b1;
        else
            int_in_11_read <= 1'b0;
    end
end

// int_in_11_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_11_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_11_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_11_HIGH)
            int_in_11_write <= 1'b1;
        else if (WVALID)
            int_in_11_write <= 1'b0;
    end
end

// int_in_11_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_11_ce0)
            int_in_11_shift <= in_11_address0[0];
    end
end

// int_in_12_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_12_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_12_BASE && raddr <= ADDR_IN_12_HIGH)
            int_in_12_read <= 1'b1;
        else
            int_in_12_read <= 1'b0;
    end
end

// int_in_12_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_12_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_12_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_12_HIGH)
            int_in_12_write <= 1'b1;
        else if (WVALID)
            int_in_12_write <= 1'b0;
    end
end

// int_in_12_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_12_ce0)
            int_in_12_shift <= in_12_address0[0];
    end
end

// int_in_13_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_13_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_13_BASE && raddr <= ADDR_IN_13_HIGH)
            int_in_13_read <= 1'b1;
        else
            int_in_13_read <= 1'b0;
    end
end

// int_in_13_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_13_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_13_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_13_HIGH)
            int_in_13_write <= 1'b1;
        else if (WVALID)
            int_in_13_write <= 1'b0;
    end
end

// int_in_13_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_13_ce0)
            int_in_13_shift <= in_13_address0[0];
    end
end

// int_in_14_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_14_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_14_BASE && raddr <= ADDR_IN_14_HIGH)
            int_in_14_read <= 1'b1;
        else
            int_in_14_read <= 1'b0;
    end
end

// int_in_14_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_14_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_14_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_14_HIGH)
            int_in_14_write <= 1'b1;
        else if (WVALID)
            int_in_14_write <= 1'b0;
    end
end

// int_in_14_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_14_ce0)
            int_in_14_shift <= in_14_address0[0];
    end
end

// int_in_15_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_15_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_15_BASE && raddr <= ADDR_IN_15_HIGH)
            int_in_15_read <= 1'b1;
        else
            int_in_15_read <= 1'b0;
    end
end

// int_in_15_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_15_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_15_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_15_HIGH)
            int_in_15_write <= 1'b1;
        else if (WVALID)
            int_in_15_write <= 1'b0;
    end
end

// int_in_15_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_15_ce0)
            int_in_15_shift <= in_15_address0[0];
    end
end

// int_in_16_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_16_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_16_BASE && raddr <= ADDR_IN_16_HIGH)
            int_in_16_read <= 1'b1;
        else
            int_in_16_read <= 1'b0;
    end
end

// int_in_16_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_16_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_16_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_16_HIGH)
            int_in_16_write <= 1'b1;
        else if (WVALID)
            int_in_16_write <= 1'b0;
    end
end

// int_in_16_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_16_ce0)
            int_in_16_shift <= in_16_address0[0];
    end
end

// int_in_17_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_17_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_17_BASE && raddr <= ADDR_IN_17_HIGH)
            int_in_17_read <= 1'b1;
        else
            int_in_17_read <= 1'b0;
    end
end

// int_in_17_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_17_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_17_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_17_HIGH)
            int_in_17_write <= 1'b1;
        else if (WVALID)
            int_in_17_write <= 1'b0;
    end
end

// int_in_17_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_17_ce0)
            int_in_17_shift <= in_17_address0[0];
    end
end

// int_in_18_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_18_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_18_BASE && raddr <= ADDR_IN_18_HIGH)
            int_in_18_read <= 1'b1;
        else
            int_in_18_read <= 1'b0;
    end
end

// int_in_18_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_18_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_18_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_18_HIGH)
            int_in_18_write <= 1'b1;
        else if (WVALID)
            int_in_18_write <= 1'b0;
    end
end

// int_in_18_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_18_ce0)
            int_in_18_shift <= in_18_address0[0];
    end
end

// int_in_19_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_19_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_19_BASE && raddr <= ADDR_IN_19_HIGH)
            int_in_19_read <= 1'b1;
        else
            int_in_19_read <= 1'b0;
    end
end

// int_in_19_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_19_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_19_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_19_HIGH)
            int_in_19_write <= 1'b1;
        else if (WVALID)
            int_in_19_write <= 1'b0;
    end
end

// int_in_19_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_19_ce0)
            int_in_19_shift <= in_19_address0[0];
    end
end

// int_in_20_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_20_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_20_BASE && raddr <= ADDR_IN_20_HIGH)
            int_in_20_read <= 1'b1;
        else
            int_in_20_read <= 1'b0;
    end
end

// int_in_20_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_20_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_20_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_20_HIGH)
            int_in_20_write <= 1'b1;
        else if (WVALID)
            int_in_20_write <= 1'b0;
    end
end

// int_in_20_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_20_ce0)
            int_in_20_shift <= in_20_address0[0];
    end
end

// int_in_21_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_21_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_21_BASE && raddr <= ADDR_IN_21_HIGH)
            int_in_21_read <= 1'b1;
        else
            int_in_21_read <= 1'b0;
    end
end

// int_in_21_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_21_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_21_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_21_HIGH)
            int_in_21_write <= 1'b1;
        else if (WVALID)
            int_in_21_write <= 1'b0;
    end
end

// int_in_21_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_21_ce0)
            int_in_21_shift <= in_21_address0[0];
    end
end

// int_in_22_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_22_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_22_BASE && raddr <= ADDR_IN_22_HIGH)
            int_in_22_read <= 1'b1;
        else
            int_in_22_read <= 1'b0;
    end
end

// int_in_22_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_22_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_22_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_22_HIGH)
            int_in_22_write <= 1'b1;
        else if (WVALID)
            int_in_22_write <= 1'b0;
    end
end

// int_in_22_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_22_ce0)
            int_in_22_shift <= in_22_address0[0];
    end
end

// int_in_23_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_23_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_23_BASE && raddr <= ADDR_IN_23_HIGH)
            int_in_23_read <= 1'b1;
        else
            int_in_23_read <= 1'b0;
    end
end

// int_in_23_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_23_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_23_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_23_HIGH)
            int_in_23_write <= 1'b1;
        else if (WVALID)
            int_in_23_write <= 1'b0;
    end
end

// int_in_23_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_23_ce0)
            int_in_23_shift <= in_23_address0[0];
    end
end

// int_in_24_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_24_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_24_BASE && raddr <= ADDR_IN_24_HIGH)
            int_in_24_read <= 1'b1;
        else
            int_in_24_read <= 1'b0;
    end
end

// int_in_24_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_24_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_24_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_24_HIGH)
            int_in_24_write <= 1'b1;
        else if (WVALID)
            int_in_24_write <= 1'b0;
    end
end

// int_in_24_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_24_ce0)
            int_in_24_shift <= in_24_address0[0];
    end
end

// int_in_25_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_25_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_25_BASE && raddr <= ADDR_IN_25_HIGH)
            int_in_25_read <= 1'b1;
        else
            int_in_25_read <= 1'b0;
    end
end

// int_in_25_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_25_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_25_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_25_HIGH)
            int_in_25_write <= 1'b1;
        else if (WVALID)
            int_in_25_write <= 1'b0;
    end
end

// int_in_25_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_25_ce0)
            int_in_25_shift <= in_25_address0[0];
    end
end

// int_in_26_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_26_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_26_BASE && raddr <= ADDR_IN_26_HIGH)
            int_in_26_read <= 1'b1;
        else
            int_in_26_read <= 1'b0;
    end
end

// int_in_26_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_26_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_26_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_26_HIGH)
            int_in_26_write <= 1'b1;
        else if (WVALID)
            int_in_26_write <= 1'b0;
    end
end

// int_in_26_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_26_ce0)
            int_in_26_shift <= in_26_address0[0];
    end
end

// int_in_27_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_27_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_27_BASE && raddr <= ADDR_IN_27_HIGH)
            int_in_27_read <= 1'b1;
        else
            int_in_27_read <= 1'b0;
    end
end

// int_in_27_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_27_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_27_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_27_HIGH)
            int_in_27_write <= 1'b1;
        else if (WVALID)
            int_in_27_write <= 1'b0;
    end
end

// int_in_27_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_27_ce0)
            int_in_27_shift <= in_27_address0[0];
    end
end

// int_in_28_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_28_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_28_BASE && raddr <= ADDR_IN_28_HIGH)
            int_in_28_read <= 1'b1;
        else
            int_in_28_read <= 1'b0;
    end
end

// int_in_28_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_28_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_28_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_28_HIGH)
            int_in_28_write <= 1'b1;
        else if (WVALID)
            int_in_28_write <= 1'b0;
    end
end

// int_in_28_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_28_ce0)
            int_in_28_shift <= in_28_address0[0];
    end
end

// int_in_29_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_29_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_29_BASE && raddr <= ADDR_IN_29_HIGH)
            int_in_29_read <= 1'b1;
        else
            int_in_29_read <= 1'b0;
    end
end

// int_in_29_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_29_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_29_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_29_HIGH)
            int_in_29_write <= 1'b1;
        else if (WVALID)
            int_in_29_write <= 1'b0;
    end
end

// int_in_29_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_29_ce0)
            int_in_29_shift <= in_29_address0[0];
    end
end

// int_in_30_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_30_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_30_BASE && raddr <= ADDR_IN_30_HIGH)
            int_in_30_read <= 1'b1;
        else
            int_in_30_read <= 1'b0;
    end
end

// int_in_30_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_30_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_30_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_30_HIGH)
            int_in_30_write <= 1'b1;
        else if (WVALID)
            int_in_30_write <= 1'b0;
    end
end

// int_in_30_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_30_ce0)
            int_in_30_shift <= in_30_address0[0];
    end
end

// int_in_31_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_31_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_31_BASE && raddr <= ADDR_IN_31_HIGH)
            int_in_31_read <= 1'b1;
        else
            int_in_31_read <= 1'b0;
    end
end

// int_in_31_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_31_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_31_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_31_HIGH)
            int_in_31_write <= 1'b1;
        else if (WVALID)
            int_in_31_write <= 1'b0;
    end
end

// int_in_31_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_31_ce0)
            int_in_31_shift <= in_31_address0[0];
    end
end

// int_in_32_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_32_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_32_BASE && raddr <= ADDR_IN_32_HIGH)
            int_in_32_read <= 1'b1;
        else
            int_in_32_read <= 1'b0;
    end
end

// int_in_32_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_32_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_32_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_32_HIGH)
            int_in_32_write <= 1'b1;
        else if (WVALID)
            int_in_32_write <= 1'b0;
    end
end

// int_in_32_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_32_ce0)
            int_in_32_shift <= in_32_address0[0];
    end
end

// int_in_33_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_33_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_33_BASE && raddr <= ADDR_IN_33_HIGH)
            int_in_33_read <= 1'b1;
        else
            int_in_33_read <= 1'b0;
    end
end

// int_in_33_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_33_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_33_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_33_HIGH)
            int_in_33_write <= 1'b1;
        else if (WVALID)
            int_in_33_write <= 1'b0;
    end
end

// int_in_33_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_33_ce0)
            int_in_33_shift <= in_33_address0[0];
    end
end

// int_in_34_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_34_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_34_BASE && raddr <= ADDR_IN_34_HIGH)
            int_in_34_read <= 1'b1;
        else
            int_in_34_read <= 1'b0;
    end
end

// int_in_34_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_34_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_34_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_34_HIGH)
            int_in_34_write <= 1'b1;
        else if (WVALID)
            int_in_34_write <= 1'b0;
    end
end

// int_in_34_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_34_ce0)
            int_in_34_shift <= in_34_address0[0];
    end
end

// int_in_35_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_35_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_35_BASE && raddr <= ADDR_IN_35_HIGH)
            int_in_35_read <= 1'b1;
        else
            int_in_35_read <= 1'b0;
    end
end

// int_in_35_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_35_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_35_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_35_HIGH)
            int_in_35_write <= 1'b1;
        else if (WVALID)
            int_in_35_write <= 1'b0;
    end
end

// int_in_35_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_35_ce0)
            int_in_35_shift <= in_35_address0[0];
    end
end

// int_in_36_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_36_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_36_BASE && raddr <= ADDR_IN_36_HIGH)
            int_in_36_read <= 1'b1;
        else
            int_in_36_read <= 1'b0;
    end
end

// int_in_36_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_36_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_36_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_36_HIGH)
            int_in_36_write <= 1'b1;
        else if (WVALID)
            int_in_36_write <= 1'b0;
    end
end

// int_in_36_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_36_ce0)
            int_in_36_shift <= in_36_address0[0];
    end
end

// int_in_37_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_37_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_37_BASE && raddr <= ADDR_IN_37_HIGH)
            int_in_37_read <= 1'b1;
        else
            int_in_37_read <= 1'b0;
    end
end

// int_in_37_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_37_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_37_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_37_HIGH)
            int_in_37_write <= 1'b1;
        else if (WVALID)
            int_in_37_write <= 1'b0;
    end
end

// int_in_37_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_37_ce0)
            int_in_37_shift <= in_37_address0[0];
    end
end

// int_in_38_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_38_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_38_BASE && raddr <= ADDR_IN_38_HIGH)
            int_in_38_read <= 1'b1;
        else
            int_in_38_read <= 1'b0;
    end
end

// int_in_38_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_38_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_38_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_38_HIGH)
            int_in_38_write <= 1'b1;
        else if (WVALID)
            int_in_38_write <= 1'b0;
    end
end

// int_in_38_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_38_ce0)
            int_in_38_shift <= in_38_address0[0];
    end
end

// int_in_39_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_39_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_39_BASE && raddr <= ADDR_IN_39_HIGH)
            int_in_39_read <= 1'b1;
        else
            int_in_39_read <= 1'b0;
    end
end

// int_in_39_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_39_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_39_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_39_HIGH)
            int_in_39_write <= 1'b1;
        else if (WVALID)
            int_in_39_write <= 1'b0;
    end
end

// int_in_39_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_39_ce0)
            int_in_39_shift <= in_39_address0[0];
    end
end

// int_in_40_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_40_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_40_BASE && raddr <= ADDR_IN_40_HIGH)
            int_in_40_read <= 1'b1;
        else
            int_in_40_read <= 1'b0;
    end
end

// int_in_40_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_40_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_40_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_40_HIGH)
            int_in_40_write <= 1'b1;
        else if (WVALID)
            int_in_40_write <= 1'b0;
    end
end

// int_in_40_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_40_ce0)
            int_in_40_shift <= in_40_address0[0];
    end
end

// int_in_41_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_41_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_41_BASE && raddr <= ADDR_IN_41_HIGH)
            int_in_41_read <= 1'b1;
        else
            int_in_41_read <= 1'b0;
    end
end

// int_in_41_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_41_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_41_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_41_HIGH)
            int_in_41_write <= 1'b1;
        else if (WVALID)
            int_in_41_write <= 1'b0;
    end
end

// int_in_41_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_41_ce0)
            int_in_41_shift <= in_41_address0[0];
    end
end

// int_in_42_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_42_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_42_BASE && raddr <= ADDR_IN_42_HIGH)
            int_in_42_read <= 1'b1;
        else
            int_in_42_read <= 1'b0;
    end
end

// int_in_42_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_42_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_42_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_42_HIGH)
            int_in_42_write <= 1'b1;
        else if (WVALID)
            int_in_42_write <= 1'b0;
    end
end

// int_in_42_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_42_ce0)
            int_in_42_shift <= in_42_address0[0];
    end
end

// int_in_43_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_43_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_43_BASE && raddr <= ADDR_IN_43_HIGH)
            int_in_43_read <= 1'b1;
        else
            int_in_43_read <= 1'b0;
    end
end

// int_in_43_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_43_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_43_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_43_HIGH)
            int_in_43_write <= 1'b1;
        else if (WVALID)
            int_in_43_write <= 1'b0;
    end
end

// int_in_43_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_43_ce0)
            int_in_43_shift <= in_43_address0[0];
    end
end

// int_in_44_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_44_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_44_BASE && raddr <= ADDR_IN_44_HIGH)
            int_in_44_read <= 1'b1;
        else
            int_in_44_read <= 1'b0;
    end
end

// int_in_44_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_44_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_44_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_44_HIGH)
            int_in_44_write <= 1'b1;
        else if (WVALID)
            int_in_44_write <= 1'b0;
    end
end

// int_in_44_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_44_ce0)
            int_in_44_shift <= in_44_address0[0];
    end
end

// int_in_45_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_45_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_45_BASE && raddr <= ADDR_IN_45_HIGH)
            int_in_45_read <= 1'b1;
        else
            int_in_45_read <= 1'b0;
    end
end

// int_in_45_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_45_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_45_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_45_HIGH)
            int_in_45_write <= 1'b1;
        else if (WVALID)
            int_in_45_write <= 1'b0;
    end
end

// int_in_45_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_45_ce0)
            int_in_45_shift <= in_45_address0[0];
    end
end

// int_in_46_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_46_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_46_BASE && raddr <= ADDR_IN_46_HIGH)
            int_in_46_read <= 1'b1;
        else
            int_in_46_read <= 1'b0;
    end
end

// int_in_46_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_46_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_46_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_46_HIGH)
            int_in_46_write <= 1'b1;
        else if (WVALID)
            int_in_46_write <= 1'b0;
    end
end

// int_in_46_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_46_ce0)
            int_in_46_shift <= in_46_address0[0];
    end
end

// int_in_47_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_47_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_47_BASE && raddr <= ADDR_IN_47_HIGH)
            int_in_47_read <= 1'b1;
        else
            int_in_47_read <= 1'b0;
    end
end

// int_in_47_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_47_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_47_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_47_HIGH)
            int_in_47_write <= 1'b1;
        else if (WVALID)
            int_in_47_write <= 1'b0;
    end
end

// int_in_47_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_47_ce0)
            int_in_47_shift <= in_47_address0[0];
    end
end

// int_in_48_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_48_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_48_BASE && raddr <= ADDR_IN_48_HIGH)
            int_in_48_read <= 1'b1;
        else
            int_in_48_read <= 1'b0;
    end
end

// int_in_48_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_48_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_48_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_48_HIGH)
            int_in_48_write <= 1'b1;
        else if (WVALID)
            int_in_48_write <= 1'b0;
    end
end

// int_in_48_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_48_ce0)
            int_in_48_shift <= in_48_address0[0];
    end
end

// int_in_49_read
always @(posedge ACLK) begin
    if (ARESET)
        int_in_49_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_IN_49_BASE && raddr <= ADDR_IN_49_HIGH)
            int_in_49_read <= 1'b1;
        else
            int_in_49_read <= 1'b0;
    end
end

// int_in_49_write
always @(posedge ACLK) begin
    if (ARESET)
        int_in_49_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_IN_49_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_IN_49_HIGH)
            int_in_49_write <= 1'b1;
        else if (WVALID)
            int_in_49_write <= 1'b0;
    end
end

// int_in_49_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (in_49_ce0)
            int_in_49_shift <= in_49_address0[0];
    end
end

// int_out_0_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_0_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_0_BASE && raddr <= ADDR_OUT_0_HIGH)
            int_out_0_read <= 1'b1;
        else
            int_out_0_read <= 1'b0;
    end
end

// int_out_0_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_0_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_0_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_0_HIGH)
            int_out_0_write <= 1'b1;
        else if (WVALID)
            int_out_0_write <= 1'b0;
    end
end

// int_out_0_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_0_ce0)
            int_out_0_shift <= out_0_address0[0];
    end
end

// int_out_1_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_1_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_1_BASE && raddr <= ADDR_OUT_1_HIGH)
            int_out_1_read <= 1'b1;
        else
            int_out_1_read <= 1'b0;
    end
end

// int_out_1_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_1_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_1_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_1_HIGH)
            int_out_1_write <= 1'b1;
        else if (WVALID)
            int_out_1_write <= 1'b0;
    end
end

// int_out_1_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_1_ce0)
            int_out_1_shift <= out_1_address0[0];
    end
end

// int_out_2_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_2_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_2_BASE && raddr <= ADDR_OUT_2_HIGH)
            int_out_2_read <= 1'b1;
        else
            int_out_2_read <= 1'b0;
    end
end

// int_out_2_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_2_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_2_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_2_HIGH)
            int_out_2_write <= 1'b1;
        else if (WVALID)
            int_out_2_write <= 1'b0;
    end
end

// int_out_2_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_2_ce0)
            int_out_2_shift <= out_2_address0[0];
    end
end

// int_out_3_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_3_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_3_BASE && raddr <= ADDR_OUT_3_HIGH)
            int_out_3_read <= 1'b1;
        else
            int_out_3_read <= 1'b0;
    end
end

// int_out_3_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_3_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_3_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_3_HIGH)
            int_out_3_write <= 1'b1;
        else if (WVALID)
            int_out_3_write <= 1'b0;
    end
end

// int_out_3_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_3_ce0)
            int_out_3_shift <= out_3_address0[0];
    end
end

// int_out_4_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_4_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_4_BASE && raddr <= ADDR_OUT_4_HIGH)
            int_out_4_read <= 1'b1;
        else
            int_out_4_read <= 1'b0;
    end
end

// int_out_4_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_4_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_4_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_4_HIGH)
            int_out_4_write <= 1'b1;
        else if (WVALID)
            int_out_4_write <= 1'b0;
    end
end

// int_out_4_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_4_ce0)
            int_out_4_shift <= out_4_address0[0];
    end
end

// int_out_5_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_5_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_5_BASE && raddr <= ADDR_OUT_5_HIGH)
            int_out_5_read <= 1'b1;
        else
            int_out_5_read <= 1'b0;
    end
end

// int_out_5_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_5_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_5_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_5_HIGH)
            int_out_5_write <= 1'b1;
        else if (WVALID)
            int_out_5_write <= 1'b0;
    end
end

// int_out_5_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_5_ce0)
            int_out_5_shift <= out_5_address0[0];
    end
end

// int_out_6_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_6_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_6_BASE && raddr <= ADDR_OUT_6_HIGH)
            int_out_6_read <= 1'b1;
        else
            int_out_6_read <= 1'b0;
    end
end

// int_out_6_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_6_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_6_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_6_HIGH)
            int_out_6_write <= 1'b1;
        else if (WVALID)
            int_out_6_write <= 1'b0;
    end
end

// int_out_6_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_6_ce0)
            int_out_6_shift <= out_6_address0[0];
    end
end

// int_out_7_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_7_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_7_BASE && raddr <= ADDR_OUT_7_HIGH)
            int_out_7_read <= 1'b1;
        else
            int_out_7_read <= 1'b0;
    end
end

// int_out_7_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_7_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_7_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_7_HIGH)
            int_out_7_write <= 1'b1;
        else if (WVALID)
            int_out_7_write <= 1'b0;
    end
end

// int_out_7_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_7_ce0)
            int_out_7_shift <= out_7_address0[0];
    end
end

// int_out_8_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_8_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_8_BASE && raddr <= ADDR_OUT_8_HIGH)
            int_out_8_read <= 1'b1;
        else
            int_out_8_read <= 1'b0;
    end
end

// int_out_8_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_8_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_8_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_8_HIGH)
            int_out_8_write <= 1'b1;
        else if (WVALID)
            int_out_8_write <= 1'b0;
    end
end

// int_out_8_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_8_ce0)
            int_out_8_shift <= out_8_address0[0];
    end
end

// int_out_9_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_9_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_9_BASE && raddr <= ADDR_OUT_9_HIGH)
            int_out_9_read <= 1'b1;
        else
            int_out_9_read <= 1'b0;
    end
end

// int_out_9_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_9_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_9_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_9_HIGH)
            int_out_9_write <= 1'b1;
        else if (WVALID)
            int_out_9_write <= 1'b0;
    end
end

// int_out_9_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_9_ce0)
            int_out_9_shift <= out_9_address0[0];
    end
end

// int_out_10_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_10_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_10_BASE && raddr <= ADDR_OUT_10_HIGH)
            int_out_10_read <= 1'b1;
        else
            int_out_10_read <= 1'b0;
    end
end

// int_out_10_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_10_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_10_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_10_HIGH)
            int_out_10_write <= 1'b1;
        else if (WVALID)
            int_out_10_write <= 1'b0;
    end
end

// int_out_10_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_10_ce0)
            int_out_10_shift <= out_10_address0[0];
    end
end

// int_out_11_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_11_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_11_BASE && raddr <= ADDR_OUT_11_HIGH)
            int_out_11_read <= 1'b1;
        else
            int_out_11_read <= 1'b0;
    end
end

// int_out_11_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_11_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_11_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_11_HIGH)
            int_out_11_write <= 1'b1;
        else if (WVALID)
            int_out_11_write <= 1'b0;
    end
end

// int_out_11_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_11_ce0)
            int_out_11_shift <= out_11_address0[0];
    end
end

// int_out_12_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_12_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_12_BASE && raddr <= ADDR_OUT_12_HIGH)
            int_out_12_read <= 1'b1;
        else
            int_out_12_read <= 1'b0;
    end
end

// int_out_12_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_12_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_12_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_12_HIGH)
            int_out_12_write <= 1'b1;
        else if (WVALID)
            int_out_12_write <= 1'b0;
    end
end

// int_out_12_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_12_ce0)
            int_out_12_shift <= out_12_address0[0];
    end
end

// int_out_13_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_13_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_13_BASE && raddr <= ADDR_OUT_13_HIGH)
            int_out_13_read <= 1'b1;
        else
            int_out_13_read <= 1'b0;
    end
end

// int_out_13_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_13_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_13_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_13_HIGH)
            int_out_13_write <= 1'b1;
        else if (WVALID)
            int_out_13_write <= 1'b0;
    end
end

// int_out_13_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_13_ce0)
            int_out_13_shift <= out_13_address0[0];
    end
end

// int_out_14_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_14_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_14_BASE && raddr <= ADDR_OUT_14_HIGH)
            int_out_14_read <= 1'b1;
        else
            int_out_14_read <= 1'b0;
    end
end

// int_out_14_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_14_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_14_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_14_HIGH)
            int_out_14_write <= 1'b1;
        else if (WVALID)
            int_out_14_write <= 1'b0;
    end
end

// int_out_14_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_14_ce0)
            int_out_14_shift <= out_14_address0[0];
    end
end

// int_out_15_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_15_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_15_BASE && raddr <= ADDR_OUT_15_HIGH)
            int_out_15_read <= 1'b1;
        else
            int_out_15_read <= 1'b0;
    end
end

// int_out_15_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_15_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_15_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_15_HIGH)
            int_out_15_write <= 1'b1;
        else if (WVALID)
            int_out_15_write <= 1'b0;
    end
end

// int_out_15_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_15_ce0)
            int_out_15_shift <= out_15_address0[0];
    end
end

// int_out_16_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_16_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_16_BASE && raddr <= ADDR_OUT_16_HIGH)
            int_out_16_read <= 1'b1;
        else
            int_out_16_read <= 1'b0;
    end
end

// int_out_16_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_16_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_16_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_16_HIGH)
            int_out_16_write <= 1'b1;
        else if (WVALID)
            int_out_16_write <= 1'b0;
    end
end

// int_out_16_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_16_ce0)
            int_out_16_shift <= out_16_address0[0];
    end
end

// int_out_17_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_17_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_17_BASE && raddr <= ADDR_OUT_17_HIGH)
            int_out_17_read <= 1'b1;
        else
            int_out_17_read <= 1'b0;
    end
end

// int_out_17_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_17_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_17_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_17_HIGH)
            int_out_17_write <= 1'b1;
        else if (WVALID)
            int_out_17_write <= 1'b0;
    end
end

// int_out_17_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_17_ce0)
            int_out_17_shift <= out_17_address0[0];
    end
end

// int_out_18_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_18_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_18_BASE && raddr <= ADDR_OUT_18_HIGH)
            int_out_18_read <= 1'b1;
        else
            int_out_18_read <= 1'b0;
    end
end

// int_out_18_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_18_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_18_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_18_HIGH)
            int_out_18_write <= 1'b1;
        else if (WVALID)
            int_out_18_write <= 1'b0;
    end
end

// int_out_18_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_18_ce0)
            int_out_18_shift <= out_18_address0[0];
    end
end

// int_out_19_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_19_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_19_BASE && raddr <= ADDR_OUT_19_HIGH)
            int_out_19_read <= 1'b1;
        else
            int_out_19_read <= 1'b0;
    end
end

// int_out_19_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_19_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_19_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_19_HIGH)
            int_out_19_write <= 1'b1;
        else if (WVALID)
            int_out_19_write <= 1'b0;
    end
end

// int_out_19_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_19_ce0)
            int_out_19_shift <= out_19_address0[0];
    end
end

// int_out_20_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_20_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_20_BASE && raddr <= ADDR_OUT_20_HIGH)
            int_out_20_read <= 1'b1;
        else
            int_out_20_read <= 1'b0;
    end
end

// int_out_20_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_20_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_20_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_20_HIGH)
            int_out_20_write <= 1'b1;
        else if (WVALID)
            int_out_20_write <= 1'b0;
    end
end

// int_out_20_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_20_ce0)
            int_out_20_shift <= out_20_address0[0];
    end
end

// int_out_21_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_21_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_21_BASE && raddr <= ADDR_OUT_21_HIGH)
            int_out_21_read <= 1'b1;
        else
            int_out_21_read <= 1'b0;
    end
end

// int_out_21_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_21_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_21_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_21_HIGH)
            int_out_21_write <= 1'b1;
        else if (WVALID)
            int_out_21_write <= 1'b0;
    end
end

// int_out_21_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_21_ce0)
            int_out_21_shift <= out_21_address0[0];
    end
end

// int_out_22_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_22_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_22_BASE && raddr <= ADDR_OUT_22_HIGH)
            int_out_22_read <= 1'b1;
        else
            int_out_22_read <= 1'b0;
    end
end

// int_out_22_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_22_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_22_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_22_HIGH)
            int_out_22_write <= 1'b1;
        else if (WVALID)
            int_out_22_write <= 1'b0;
    end
end

// int_out_22_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_22_ce0)
            int_out_22_shift <= out_22_address0[0];
    end
end

// int_out_23_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_23_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_23_BASE && raddr <= ADDR_OUT_23_HIGH)
            int_out_23_read <= 1'b1;
        else
            int_out_23_read <= 1'b0;
    end
end

// int_out_23_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_23_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_23_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_23_HIGH)
            int_out_23_write <= 1'b1;
        else if (WVALID)
            int_out_23_write <= 1'b0;
    end
end

// int_out_23_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_23_ce0)
            int_out_23_shift <= out_23_address0[0];
    end
end

// int_out_24_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_24_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_24_BASE && raddr <= ADDR_OUT_24_HIGH)
            int_out_24_read <= 1'b1;
        else
            int_out_24_read <= 1'b0;
    end
end

// int_out_24_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_24_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_24_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_24_HIGH)
            int_out_24_write <= 1'b1;
        else if (WVALID)
            int_out_24_write <= 1'b0;
    end
end

// int_out_24_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_24_ce0)
            int_out_24_shift <= out_24_address0[0];
    end
end

// int_out_25_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_25_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_25_BASE && raddr <= ADDR_OUT_25_HIGH)
            int_out_25_read <= 1'b1;
        else
            int_out_25_read <= 1'b0;
    end
end

// int_out_25_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_25_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_25_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_25_HIGH)
            int_out_25_write <= 1'b1;
        else if (WVALID)
            int_out_25_write <= 1'b0;
    end
end

// int_out_25_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_25_ce0)
            int_out_25_shift <= out_25_address0[0];
    end
end

// int_out_26_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_26_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_26_BASE && raddr <= ADDR_OUT_26_HIGH)
            int_out_26_read <= 1'b1;
        else
            int_out_26_read <= 1'b0;
    end
end

// int_out_26_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_26_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_26_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_26_HIGH)
            int_out_26_write <= 1'b1;
        else if (WVALID)
            int_out_26_write <= 1'b0;
    end
end

// int_out_26_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_26_ce0)
            int_out_26_shift <= out_26_address0[0];
    end
end

// int_out_27_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_27_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_27_BASE && raddr <= ADDR_OUT_27_HIGH)
            int_out_27_read <= 1'b1;
        else
            int_out_27_read <= 1'b0;
    end
end

// int_out_27_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_27_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_27_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_27_HIGH)
            int_out_27_write <= 1'b1;
        else if (WVALID)
            int_out_27_write <= 1'b0;
    end
end

// int_out_27_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_27_ce0)
            int_out_27_shift <= out_27_address0[0];
    end
end

// int_out_28_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_28_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_28_BASE && raddr <= ADDR_OUT_28_HIGH)
            int_out_28_read <= 1'b1;
        else
            int_out_28_read <= 1'b0;
    end
end

// int_out_28_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_28_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_28_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_28_HIGH)
            int_out_28_write <= 1'b1;
        else if (WVALID)
            int_out_28_write <= 1'b0;
    end
end

// int_out_28_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_28_ce0)
            int_out_28_shift <= out_28_address0[0];
    end
end

// int_out_29_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_29_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_29_BASE && raddr <= ADDR_OUT_29_HIGH)
            int_out_29_read <= 1'b1;
        else
            int_out_29_read <= 1'b0;
    end
end

// int_out_29_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_29_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_29_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_29_HIGH)
            int_out_29_write <= 1'b1;
        else if (WVALID)
            int_out_29_write <= 1'b0;
    end
end

// int_out_29_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_29_ce0)
            int_out_29_shift <= out_29_address0[0];
    end
end

// int_out_30_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_30_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_30_BASE && raddr <= ADDR_OUT_30_HIGH)
            int_out_30_read <= 1'b1;
        else
            int_out_30_read <= 1'b0;
    end
end

// int_out_30_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_30_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_30_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_30_HIGH)
            int_out_30_write <= 1'b1;
        else if (WVALID)
            int_out_30_write <= 1'b0;
    end
end

// int_out_30_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_30_ce0)
            int_out_30_shift <= out_30_address0[0];
    end
end

// int_out_31_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_31_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_31_BASE && raddr <= ADDR_OUT_31_HIGH)
            int_out_31_read <= 1'b1;
        else
            int_out_31_read <= 1'b0;
    end
end

// int_out_31_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_31_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_31_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_31_HIGH)
            int_out_31_write <= 1'b1;
        else if (WVALID)
            int_out_31_write <= 1'b0;
    end
end

// int_out_31_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_31_ce0)
            int_out_31_shift <= out_31_address0[0];
    end
end

// int_out_32_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_32_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_32_BASE && raddr <= ADDR_OUT_32_HIGH)
            int_out_32_read <= 1'b1;
        else
            int_out_32_read <= 1'b0;
    end
end

// int_out_32_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_32_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_32_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_32_HIGH)
            int_out_32_write <= 1'b1;
        else if (WVALID)
            int_out_32_write <= 1'b0;
    end
end

// int_out_32_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_32_ce0)
            int_out_32_shift <= out_32_address0[0];
    end
end

// int_out_33_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_33_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_33_BASE && raddr <= ADDR_OUT_33_HIGH)
            int_out_33_read <= 1'b1;
        else
            int_out_33_read <= 1'b0;
    end
end

// int_out_33_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_33_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_33_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_33_HIGH)
            int_out_33_write <= 1'b1;
        else if (WVALID)
            int_out_33_write <= 1'b0;
    end
end

// int_out_33_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_33_ce0)
            int_out_33_shift <= out_33_address0[0];
    end
end

// int_out_34_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_34_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_34_BASE && raddr <= ADDR_OUT_34_HIGH)
            int_out_34_read <= 1'b1;
        else
            int_out_34_read <= 1'b0;
    end
end

// int_out_34_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_34_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_34_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_34_HIGH)
            int_out_34_write <= 1'b1;
        else if (WVALID)
            int_out_34_write <= 1'b0;
    end
end

// int_out_34_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_34_ce0)
            int_out_34_shift <= out_34_address0[0];
    end
end

// int_out_35_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_35_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_35_BASE && raddr <= ADDR_OUT_35_HIGH)
            int_out_35_read <= 1'b1;
        else
            int_out_35_read <= 1'b0;
    end
end

// int_out_35_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_35_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_35_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_35_HIGH)
            int_out_35_write <= 1'b1;
        else if (WVALID)
            int_out_35_write <= 1'b0;
    end
end

// int_out_35_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_35_ce0)
            int_out_35_shift <= out_35_address0[0];
    end
end

// int_out_36_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_36_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_36_BASE && raddr <= ADDR_OUT_36_HIGH)
            int_out_36_read <= 1'b1;
        else
            int_out_36_read <= 1'b0;
    end
end

// int_out_36_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_36_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_36_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_36_HIGH)
            int_out_36_write <= 1'b1;
        else if (WVALID)
            int_out_36_write <= 1'b0;
    end
end

// int_out_36_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_36_ce0)
            int_out_36_shift <= out_36_address0[0];
    end
end

// int_out_37_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_37_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_37_BASE && raddr <= ADDR_OUT_37_HIGH)
            int_out_37_read <= 1'b1;
        else
            int_out_37_read <= 1'b0;
    end
end

// int_out_37_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_37_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_37_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_37_HIGH)
            int_out_37_write <= 1'b1;
        else if (WVALID)
            int_out_37_write <= 1'b0;
    end
end

// int_out_37_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_37_ce0)
            int_out_37_shift <= out_37_address0[0];
    end
end

// int_out_38_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_38_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_38_BASE && raddr <= ADDR_OUT_38_HIGH)
            int_out_38_read <= 1'b1;
        else
            int_out_38_read <= 1'b0;
    end
end

// int_out_38_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_38_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_38_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_38_HIGH)
            int_out_38_write <= 1'b1;
        else if (WVALID)
            int_out_38_write <= 1'b0;
    end
end

// int_out_38_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_38_ce0)
            int_out_38_shift <= out_38_address0[0];
    end
end

// int_out_39_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_39_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_39_BASE && raddr <= ADDR_OUT_39_HIGH)
            int_out_39_read <= 1'b1;
        else
            int_out_39_read <= 1'b0;
    end
end

// int_out_39_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_39_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_39_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_39_HIGH)
            int_out_39_write <= 1'b1;
        else if (WVALID)
            int_out_39_write <= 1'b0;
    end
end

// int_out_39_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_39_ce0)
            int_out_39_shift <= out_39_address0[0];
    end
end

// int_out_40_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_40_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_40_BASE && raddr <= ADDR_OUT_40_HIGH)
            int_out_40_read <= 1'b1;
        else
            int_out_40_read <= 1'b0;
    end
end

// int_out_40_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_40_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_40_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_40_HIGH)
            int_out_40_write <= 1'b1;
        else if (WVALID)
            int_out_40_write <= 1'b0;
    end
end

// int_out_40_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_40_ce0)
            int_out_40_shift <= out_40_address0[0];
    end
end

// int_out_41_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_41_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_41_BASE && raddr <= ADDR_OUT_41_HIGH)
            int_out_41_read <= 1'b1;
        else
            int_out_41_read <= 1'b0;
    end
end

// int_out_41_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_41_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_41_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_41_HIGH)
            int_out_41_write <= 1'b1;
        else if (WVALID)
            int_out_41_write <= 1'b0;
    end
end

// int_out_41_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_41_ce0)
            int_out_41_shift <= out_41_address0[0];
    end
end

// int_out_42_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_42_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_42_BASE && raddr <= ADDR_OUT_42_HIGH)
            int_out_42_read <= 1'b1;
        else
            int_out_42_read <= 1'b0;
    end
end

// int_out_42_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_42_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_42_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_42_HIGH)
            int_out_42_write <= 1'b1;
        else if (WVALID)
            int_out_42_write <= 1'b0;
    end
end

// int_out_42_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_42_ce0)
            int_out_42_shift <= out_42_address0[0];
    end
end

// int_out_43_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_43_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_43_BASE && raddr <= ADDR_OUT_43_HIGH)
            int_out_43_read <= 1'b1;
        else
            int_out_43_read <= 1'b0;
    end
end

// int_out_43_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_43_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_43_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_43_HIGH)
            int_out_43_write <= 1'b1;
        else if (WVALID)
            int_out_43_write <= 1'b0;
    end
end

// int_out_43_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_43_ce0)
            int_out_43_shift <= out_43_address0[0];
    end
end

// int_out_44_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_44_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_44_BASE && raddr <= ADDR_OUT_44_HIGH)
            int_out_44_read <= 1'b1;
        else
            int_out_44_read <= 1'b0;
    end
end

// int_out_44_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_44_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_44_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_44_HIGH)
            int_out_44_write <= 1'b1;
        else if (WVALID)
            int_out_44_write <= 1'b0;
    end
end

// int_out_44_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_44_ce0)
            int_out_44_shift <= out_44_address0[0];
    end
end

// int_out_45_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_45_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_45_BASE && raddr <= ADDR_OUT_45_HIGH)
            int_out_45_read <= 1'b1;
        else
            int_out_45_read <= 1'b0;
    end
end

// int_out_45_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_45_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_45_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_45_HIGH)
            int_out_45_write <= 1'b1;
        else if (WVALID)
            int_out_45_write <= 1'b0;
    end
end

// int_out_45_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_45_ce0)
            int_out_45_shift <= out_45_address0[0];
    end
end

// int_out_46_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_46_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_46_BASE && raddr <= ADDR_OUT_46_HIGH)
            int_out_46_read <= 1'b1;
        else
            int_out_46_read <= 1'b0;
    end
end

// int_out_46_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_46_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_46_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_46_HIGH)
            int_out_46_write <= 1'b1;
        else if (WVALID)
            int_out_46_write <= 1'b0;
    end
end

// int_out_46_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_46_ce0)
            int_out_46_shift <= out_46_address0[0];
    end
end

// int_out_47_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_47_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_47_BASE && raddr <= ADDR_OUT_47_HIGH)
            int_out_47_read <= 1'b1;
        else
            int_out_47_read <= 1'b0;
    end
end

// int_out_47_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_47_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_47_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_47_HIGH)
            int_out_47_write <= 1'b1;
        else if (WVALID)
            int_out_47_write <= 1'b0;
    end
end

// int_out_47_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_47_ce0)
            int_out_47_shift <= out_47_address0[0];
    end
end

// int_out_48_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_48_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_48_BASE && raddr <= ADDR_OUT_48_HIGH)
            int_out_48_read <= 1'b1;
        else
            int_out_48_read <= 1'b0;
    end
end

// int_out_48_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_48_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_48_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_48_HIGH)
            int_out_48_write <= 1'b1;
        else if (WVALID)
            int_out_48_write <= 1'b0;
    end
end

// int_out_48_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_48_ce0)
            int_out_48_shift <= out_48_address0[0];
    end
end

// int_out_49_read
always @(posedge ACLK) begin
    if (ARESET)
        int_out_49_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUT_49_BASE && raddr <= ADDR_OUT_49_HIGH)
            int_out_49_read <= 1'b1;
        else
            int_out_49_read <= 1'b0;
    end
end

// int_out_49_write
always @(posedge ACLK) begin
    if (ARESET)
        int_out_49_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUT_49_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUT_49_HIGH)
            int_out_49_write <= 1'b1;
        else if (WVALID)
            int_out_49_write <= 1'b0;
    end
end

// int_out_49_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (out_49_ce0)
            int_out_49_shift <= out_49_address0[0];
    end
end

// int_krnl_read
always @(posedge ACLK) begin
    if (ARESET)
        int_krnl_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_KRNL_BASE && raddr <= ADDR_KRNL_HIGH)
            int_krnl_read <= 1'b1;
        else
            int_krnl_read <= 1'b0;
    end
end

// int_krnl_write
always @(posedge ACLK) begin
    if (ARESET)
        int_krnl_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_KRNL_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_KRNL_HIGH)
            int_krnl_write <= 1'b1;
        else if (WVALID)
            int_krnl_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module convolve_conv_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

